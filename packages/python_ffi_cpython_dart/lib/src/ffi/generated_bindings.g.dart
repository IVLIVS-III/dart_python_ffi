// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

part '../extensions/bindings_extension.dart';

/// Bindings to Python C interface
class DartPythonCBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
  _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DartPythonCBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DartPythonCBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      lookup)
      : _lookup = lookup;

  ffi.Pointer<ffi.Void> PyMem_Malloc(
      int size,
      ) {
    return _PyMem_Malloc(
      size,
    );
  }

  late final _PyMem_MallocPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
      'PyMem_Malloc');
  late final _PyMem_Malloc =
  _PyMem_MallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> PyMem_Calloc(
      int nelem,
      int elsize,
      ) {
    return _PyMem_Calloc(
      nelem,
      elsize,
    );
  }

  late final _PyMem_CallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('PyMem_Calloc');
  late final _PyMem_Calloc =
  _PyMem_CallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> PyMem_Realloc(
      ffi.Pointer<ffi.Void> ptr,
      int new_size,
      ) {
    return _PyMem_Realloc(
      ptr,
      new_size,
    );
  }

  late final _PyMem_ReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('PyMem_Realloc');
  late final _PyMem_Realloc = _PyMem_ReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void PyMem_Free(
      ffi.Pointer<ffi.Void> ptr,
      ) {
    return _PyMem_Free(
      ptr,
    );
  }

  late final _PyMem_FreePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'PyMem_Free');
  late final _PyMem_Free =
  _PyMem_FreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int PyObject_CheckBuffer(
      ffi.Pointer<PyObject> obj,
      ) {
    return _PyObject_CheckBuffer(
      obj,
    );
  }

  late final _PyObject_CheckBufferPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyObject_CheckBuffer');
  late final _PyObject_CheckBuffer = _PyObject_CheckBufferPtr.asFunction<
      int Function(ffi.Pointer<PyObject>)>();

  int PyObject_GetBuffer(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<Py_buffer> view,
      int flags,
      ) {
    return _PyObject_GetBuffer(
      obj,
      view,
      flags,
    );
  }

  late final _PyObject_GetBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<Py_buffer>,
              ffi.Int)>>('PyObject_GetBuffer');
  late final _PyObject_GetBuffer = _PyObject_GetBufferPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<Py_buffer>, int)>();

  ffi.Pointer<ffi.Void> PyBuffer_GetPointer(
      ffi.Pointer<Py_buffer> view,
      ffi.Pointer<Py_ssize_t> indices,
      ) {
    return _PyBuffer_GetPointer(
      view,
      indices,
    );
  }

  late final _PyBuffer_GetPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<Py_buffer>,
              ffi.Pointer<Py_ssize_t>)>>('PyBuffer_GetPointer');
  late final _PyBuffer_GetPointer = _PyBuffer_GetPointerPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<Py_buffer>, ffi.Pointer<Py_ssize_t>)>();

  int PyBuffer_SizeFromFormat(
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyBuffer_SizeFromFormat(
      format,
    );
  }

  late final _PyBuffer_SizeFromFormatPtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<ffi.Char>)>>(
      'PyBuffer_SizeFromFormat');
  late final _PyBuffer_SizeFromFormat = _PyBuffer_SizeFromFormatPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  int PyBuffer_ToContiguous(
      ffi.Pointer<ffi.Void> buf,
      ffi.Pointer<Py_buffer> view,
      int len,
      int order,
      ) {
    return _PyBuffer_ToContiguous(
      buf,
      view,
      len,
      order,
    );
  }

  late final _PyBuffer_ToContiguousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<Py_buffer>,
              Py_ssize_t, ffi.Char)>>('PyBuffer_ToContiguous');
  late final _PyBuffer_ToContiguous = _PyBuffer_ToContiguousPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<Py_buffer>, int, int)>();

  int PyBuffer_FromContiguous(
      ffi.Pointer<Py_buffer> view,
      ffi.Pointer<ffi.Void> buf,
      int len,
      int order,
      ) {
    return _PyBuffer_FromContiguous(
      view,
      buf,
      len,
      order,
    );
  }

  late final _PyBuffer_FromContiguousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Py_buffer>, ffi.Pointer<ffi.Void>,
              Py_ssize_t, ffi.Char)>>('PyBuffer_FromContiguous');
  late final _PyBuffer_FromContiguous = _PyBuffer_FromContiguousPtr.asFunction<
      int Function(ffi.Pointer<Py_buffer>, ffi.Pointer<ffi.Void>, int, int)>();

  int PyObject_CopyData(
      ffi.Pointer<PyObject> dest,
      ffi.Pointer<PyObject> src,
      ) {
    return _PyObject_CopyData(
      dest,
      src,
    );
  }

  late final _PyObject_CopyDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_CopyData');
  late final _PyObject_CopyData = _PyObject_CopyDataPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyBuffer_IsContiguous(
      ffi.Pointer<Py_buffer> view,
      int fort,
      ) {
    return _PyBuffer_IsContiguous(
      view,
      fort,
    );
  }

  late final _PyBuffer_IsContiguousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Py_buffer>, ffi.Char)>>('PyBuffer_IsContiguous');
  late final _PyBuffer_IsContiguous = _PyBuffer_IsContiguousPtr.asFunction<
      int Function(ffi.Pointer<Py_buffer>, int)>();

  void PyBuffer_FillContiguousStrides(
      int ndims,
      ffi.Pointer<Py_ssize_t> shape,
      ffi.Pointer<Py_ssize_t> strides,
      int itemsize,
      int fort,
      ) {
    return _PyBuffer_FillContiguousStrides(
      ndims,
      shape,
      strides,
      itemsize,
      fort,
    );
  }

  late final _PyBuffer_FillContiguousStridesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int,
              ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<Py_ssize_t>,
              ffi.Int,
              ffi.Char)>>('PyBuffer_FillContiguousStrides');
  late final _PyBuffer_FillContiguousStrides =
  _PyBuffer_FillContiguousStridesPtr.asFunction<
      void Function(int, ffi.Pointer<Py_ssize_t>, ffi.Pointer<Py_ssize_t>,
          int, int)>();

  int PyBuffer_FillInfo(
      ffi.Pointer<Py_buffer> view,
      ffi.Pointer<PyObject> o,
      ffi.Pointer<ffi.Void> buf,
      int len,
      int readonly,
      int flags,
      ) {
    return _PyBuffer_FillInfo(
      view,
      o,
      buf,
      len,
      readonly,
      flags,
    );
  }

  late final _PyBuffer_FillInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<Py_buffer>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Void>,
              Py_ssize_t,
              ffi.Int,
              ffi.Int)>>('PyBuffer_FillInfo');
  late final _PyBuffer_FillInfo = _PyBuffer_FillInfoPtr.asFunction<
      int Function(ffi.Pointer<Py_buffer>, ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Void>, int, int, int)>();

  void PyBuffer_Release(
      ffi.Pointer<Py_buffer> view,
      ) {
    return _PyBuffer_Release(
      view,
    );
  }

  late final _PyBuffer_ReleasePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Py_buffer>)>>(
      'PyBuffer_Release');
  late final _PyBuffer_Release =
  _PyBuffer_ReleasePtr.asFunction<void Function(ffi.Pointer<Py_buffer>)>();

  int Py_Is(
      ffi.Pointer<PyObject> x,
      ffi.Pointer<PyObject> y,
      ) {
    return _Py_Is(
      x,
      y,
    );
  }

  late final _Py_IsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('Py_Is');
  late final _Py_Is = _Py_IsPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyType_FromSpec(
      ffi.Pointer<PyType_Spec> arg0,
      ) {
    return _PyType_FromSpec(
      arg0,
    );
  }

  late final _PyType_FromSpecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyType_Spec>)>>('PyType_FromSpec');
  late final _PyType_FromSpec = _PyType_FromSpecPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyType_Spec>)>();

  ffi.Pointer<PyObject> PyType_FromSpecWithBases(
      ffi.Pointer<PyType_Spec> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyType_FromSpecWithBases(
      arg0,
      arg1,
    );
  }

  late final _PyType_FromSpecWithBasesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyType_Spec>,
              ffi.Pointer<PyObject>)>>('PyType_FromSpecWithBases');
  late final _PyType_FromSpecWithBases =
  _PyType_FromSpecWithBasesPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyType_Spec>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Void> PyType_GetSlot(
      ffi.Pointer<PyTypeObject> arg0,
      int arg1,
      ) {
    return _PyType_GetSlot(
      arg0,
      arg1,
    );
  }

  late final _PyType_GetSlotPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<PyTypeObject>, ffi.Int)>>('PyType_GetSlot');
  late final _PyType_GetSlot = _PyType_GetSlotPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<PyTypeObject>, int)>();

  ffi.Pointer<PyObject> PyType_FromModuleAndSpec(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyType_Spec> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyType_FromModuleAndSpec(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyType_FromModuleAndSpecPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyType_Spec>,
              ffi.Pointer<PyObject>)>>('PyType_FromModuleAndSpec');
  late final _PyType_FromModuleAndSpec =
  _PyType_FromModuleAndSpecPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyType_Spec>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyType_GetModule(
      ffi.Pointer<PyTypeObject> arg0,
      ) {
    return _PyType_GetModule(
      arg0,
    );
  }

  late final _PyType_GetModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyTypeObject>)>>('PyType_GetModule');
  late final _PyType_GetModule = _PyType_GetModulePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>)>();

  ffi.Pointer<ffi.Void> PyType_GetModuleState(
      ffi.Pointer<PyTypeObject> arg0,
      ) {
    return _PyType_GetModuleState(
      arg0,
    );
  }

  late final _PyType_GetModuleStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<PyTypeObject>)>>('PyType_GetModuleState');
  late final _PyType_GetModuleState = _PyType_GetModuleStatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<PyTypeObject>)>();

  ffi.Pointer<PyObject> PyType_GetName(
      ffi.Pointer<PyTypeObject> arg0,
      ) {
    return _PyType_GetName(
      arg0,
    );
  }

  late final _PyType_GetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyTypeObject>)>>('PyType_GetName');
  late final _PyType_GetName = _PyType_GetNamePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>)>();

  ffi.Pointer<PyObject> PyType_GetQualName(
      ffi.Pointer<PyTypeObject> arg0,
      ) {
    return _PyType_GetQualName(
      arg0,
    );
  }

  late final _PyType_GetQualNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyTypeObject>)>>('PyType_GetQualName');
  late final _PyType_GetQualName = _PyType_GetQualNamePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>)>();

  int PyType_IsSubtype(
      ffi.Pointer<PyTypeObject> arg0,
      ffi.Pointer<PyTypeObject> arg1,
      ) {
    return _PyType_IsSubtype(
      arg0,
      arg1,
    );
  }

  late final _PyType_IsSubtypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyTypeObject>,
              ffi.Pointer<PyTypeObject>)>>('PyType_IsSubtype');
  late final _PyType_IsSubtype = _PyType_IsSubtypePtr.asFunction<
      int Function(ffi.Pointer<PyTypeObject>, ffi.Pointer<PyTypeObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyType_Type =
  _lookup<PyTypeObject>('PyType_Type');

  PyTypeObject get PyType_Type => _PyType_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyBaseObject_Type =
  _lookup<PyTypeObject>('PyBaseObject_Type');

  PyTypeObject get PyBaseObject_Type => _PyBaseObject_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PySuper_Type =
  _lookup<PyTypeObject>('PySuper_Type');

  PyTypeObject get PySuper_Type => _PySuper_Type.ref;

  int PyType_GetFlags(
      ffi.Pointer<PyTypeObject> arg0,
      ) {
    return _PyType_GetFlags(
      arg0,
    );
  }

  late final _PyType_GetFlagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<PyTypeObject>)>>('PyType_GetFlags');
  late final _PyType_GetFlags =
  _PyType_GetFlagsPtr.asFunction<int Function(ffi.Pointer<PyTypeObject>)>();

  int PyType_Ready(
      ffi.Pointer<PyTypeObject> arg0,
      ) {
    return _PyType_Ready(
      arg0,
    );
  }

  late final _PyType_ReadyPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyTypeObject>)>>(
      'PyType_Ready');
  late final _PyType_Ready =
  _PyType_ReadyPtr.asFunction<int Function(ffi.Pointer<PyTypeObject>)>();

  ffi.Pointer<PyObject> PyType_GenericAlloc(
      ffi.Pointer<PyTypeObject> arg0,
      int arg1,
      ) {
    return _PyType_GenericAlloc(
      arg0,
      arg1,
    );
  }

  late final _PyType_GenericAllocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyTypeObject>, Py_ssize_t)>>('PyType_GenericAlloc');
  late final _PyType_GenericAlloc = _PyType_GenericAllocPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>, int)>();

  ffi.Pointer<PyObject> PyType_GenericNew(
      ffi.Pointer<PyTypeObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyType_GenericNew(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyType_GenericNewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyTypeObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyType_GenericNew');
  late final _PyType_GenericNew = _PyType_GenericNewPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyType_ClearCache() {
    return _PyType_ClearCache();
  }

  late final _PyType_ClearCachePtr =
  _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>(
      'PyType_ClearCache');
  late final _PyType_ClearCache =
  _PyType_ClearCachePtr.asFunction<int Function()>();

  void PyType_Modified(
      ffi.Pointer<PyTypeObject> arg0,
      ) {
    return _PyType_Modified(
      arg0,
    );
  }

  late final _PyType_ModifiedPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyTypeObject>)>>(
      'PyType_Modified');
  late final _PyType_Modified = _PyType_ModifiedPtr.asFunction<
      void Function(ffi.Pointer<PyTypeObject>)>();

  ffi.Pointer<PyObject> PyObject_Repr(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_Repr(
      arg0,
    );
  }

  late final _PyObject_ReprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_Repr');
  late final _PyObject_Repr = _PyObject_ReprPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_Str(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_Str(
      arg0,
    );
  }

  late final _PyObject_StrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_Str');
  late final _PyObject_Str = _PyObject_StrPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_ASCII(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_ASCII(
      arg0,
    );
  }

  late final _PyObject_ASCIIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_ASCII');
  late final _PyObject_ASCII = _PyObject_ASCIIPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_Bytes(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_Bytes(
      arg0,
    );
  }

  late final _PyObject_BytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_Bytes');
  late final _PyObject_Bytes = _PyObject_BytesPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_RichCompare(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      int arg2,
      ) {
    return _PyObject_RichCompare(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_RichComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>, ffi.Int)>>('PyObject_RichCompare');
  late final _PyObject_RichCompare = _PyObject_RichComparePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int)>();

  int PyObject_RichCompareBool(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      int arg2,
      ) {
    return _PyObject_RichCompareBool(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_RichCompareBoolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Int)>>('PyObject_RichCompareBool');
  late final _PyObject_RichCompareBool =
  _PyObject_RichCompareBoolPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> PyObject_GetAttrString(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      ) {
    return _PyObject_GetAttrString(
      arg0,
      arg1,
    );
  }

  late final _PyObject_GetAttrStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyObject_GetAttrString');
  late final _PyObject_GetAttrString = _PyObject_GetAttrStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyObject_SetAttrString(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyObject_SetAttrString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_SetAttrStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PyObject_SetAttrString');
  late final _PyObject_SetAttrString = _PyObject_SetAttrStringPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>)>();

  int PyObject_HasAttrString(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      ) {
    return _PyObject_HasAttrString(
      arg0,
      arg1,
    );
  }

  late final _PyObject_HasAttrStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyObject_HasAttrString');
  late final _PyObject_HasAttrString = _PyObject_HasAttrStringPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyObject_GetAttr(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyObject_GetAttr(
      arg0,
      arg1,
    );
  }

  late final _PyObject_GetAttrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_GetAttr');
  late final _PyObject_GetAttr = _PyObject_GetAttrPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyObject_SetAttr(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyObject_SetAttr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_SetAttrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_SetAttr');
  late final _PyObject_SetAttr = _PyObject_SetAttrPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  int PyObject_HasAttr(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyObject_HasAttr(
      arg0,
      arg1,
    );
  }

  late final _PyObject_HasAttrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_HasAttr');
  late final _PyObject_HasAttr = _PyObject_HasAttrPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_SelfIter(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_SelfIter(
      arg0,
    );
  }

  late final _PyObject_SelfIterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_SelfIter');
  late final _PyObject_SelfIter = _PyObject_SelfIterPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_GenericGetAttr(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyObject_GenericGetAttr(
      arg0,
      arg1,
    );
  }

  late final _PyObject_GenericGetAttrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_GenericGetAttr');
  late final _PyObject_GenericGetAttr = _PyObject_GenericGetAttrPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyObject_GenericSetAttr(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyObject_GenericSetAttr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_GenericSetAttrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_GenericSetAttr');
  late final _PyObject_GenericSetAttr = _PyObject_GenericSetAttrPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  int PyObject_GenericSetDict(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<ffi.Void> arg2,
      ) {
    return _PyObject_GenericSetDict(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_GenericSetDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Void>)>>('PyObject_GenericSetDict');
  late final _PyObject_GenericSetDict = _PyObject_GenericSetDictPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Void>)>();

  int PyObject_Hash(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_Hash(
      arg0,
    );
  }

  late final _PyObject_HashPtr =
  _lookup<ffi.NativeFunction<Py_hash_t Function(ffi.Pointer<PyObject>)>>(
      'PyObject_Hash');
  late final _PyObject_Hash =
  _PyObject_HashPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyObject_HashNotImplemented(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_HashNotImplemented(
      arg0,
    );
  }

  late final _PyObject_HashNotImplementedPtr =
  _lookup<ffi.NativeFunction<Py_hash_t Function(ffi.Pointer<PyObject>)>>(
      'PyObject_HashNotImplemented');
  late final _PyObject_HashNotImplemented = _PyObject_HashNotImplementedPtr
      .asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyObject_IsTrue(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_IsTrue(
      arg0,
    );
  }

  late final _PyObject_IsTruePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyObject_IsTrue');
  late final _PyObject_IsTrue =
  _PyObject_IsTruePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyObject_Not(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_Not(
      arg0,
    );
  }

  late final _PyObject_NotPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyObject_Not');
  late final _PyObject_Not =
  _PyObject_NotPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyCallable_Check(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyCallable_Check(
      arg0,
    );
  }

  late final _PyCallable_CheckPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyCallable_Check');
  late final _PyCallable_Check =
  _PyCallable_CheckPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  void PyObject_ClearWeakRefs(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_ClearWeakRefs(
      arg0,
    );
  }

  late final _PyObject_ClearWeakRefsPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      'PyObject_ClearWeakRefs');
  late final _PyObject_ClearWeakRefs = _PyObject_ClearWeakRefsPtr.asFunction<
      void Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_Dir(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_Dir(
      arg0,
    );
  }

  late final _PyObject_DirPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_Dir');
  late final _PyObject_Dir = _PyObject_DirPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> _PyObject_GetState(
      ffi.Pointer<PyObject> arg0,
      ) {
    return __PyObject_GetState(
      arg0,
    );
  }

  late final __PyObject_GetStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('_PyObject_GetState');
  late final __PyObject_GetState = __PyObject_GetStatePtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int Py_ReprEnter(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _Py_ReprEnter(
      arg0,
    );
  }

  late final _Py_ReprEnterPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'Py_ReprEnter');
  late final _Py_ReprEnter =
  _Py_ReprEnterPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  void Py_ReprLeave(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _Py_ReprLeave(
      arg0,
    );
  }

  late final _Py_ReprLeavePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      'Py_ReprLeave');
  late final _Py_ReprLeave =
  _Py_ReprLeavePtr.asFunction<void Function(ffi.Pointer<PyObject>)>();

  void _Py_Dealloc(
      ffi.Pointer<PyObject> arg0,
      ) {
    return __Py_Dealloc(
      arg0,
    );
  }

  late final __Py_DeallocPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      '_Py_Dealloc');
  late final __Py_Dealloc =
  __Py_DeallocPtr.asFunction<void Function(ffi.Pointer<PyObject>)>();

  void Py_IncRef(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _Py_IncRef1(
      arg0,
    );
  }

  late final _Py_IncRefPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      'Py_IncRef');
  late final _Py_IncRef1 =
  _Py_IncRefPtr.asFunction<void Function(ffi.Pointer<PyObject>)>();

  void Py_DecRef(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _Py_DecRef1(
      arg0,
    );
  }

  late final _Py_DecRefPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      'Py_DecRef');
  late final _Py_DecRef1 =
  _Py_DecRefPtr.asFunction<void Function(ffi.Pointer<PyObject>)>();

  void _Py_IncRef(
      ffi.Pointer<PyObject> arg0,
      ) {
    return __Py_IncRef(
      arg0,
    );
  }

  late final __Py_IncRefPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      '_Py_IncRef');
  late final __Py_IncRef =
  __Py_IncRefPtr.asFunction<void Function(ffi.Pointer<PyObject>)>();

  void _Py_DecRef(
      ffi.Pointer<PyObject> arg0,
      ) {
    return __Py_DecRef(
      arg0,
    );
  }

  late final __Py_DecRefPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      '_Py_DecRef');
  late final __Py_DecRef =
  __Py_DecRefPtr.asFunction<void Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> Py_NewRef(
      ffi.Pointer<PyObject> obj,
      ) {
    return _Py_NewRef(
      obj,
    );
  }

  late final _Py_NewRefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>>('Py_NewRef');
  late final _Py_NewRef = _Py_NewRefPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> Py_XNewRef(
      ffi.Pointer<PyObject> obj,
      ) {
    return _Py_XNewRef(
      obj,
    );
  }

  late final _Py_XNewRefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>>('Py_XNewRef');
  late final _Py_XNewRef = _Py_XNewRefPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyObject> _Py_NoneStruct =
  _lookup<PyObject>('_Py_NoneStruct');

  PyObject get Py_NoneStruct => _Py_NoneStruct.ref;

  int Py_IsNone(
      ffi.Pointer<PyObject> x,
      ) {
    return _Py_IsNone(
      x,
    );
  }

  late final _Py_IsNonePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'Py_IsNone');
  late final _Py_IsNone =
  _Py_IsNonePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyObject> _Py_NotImplementedStruct =
  _lookup<PyObject>('_Py_NotImplementedStruct');

  PyObject get Py_NotImplementedStruct => _Py_NotImplementedStruct.ref;

  ffi.Pointer<ffi.Void> PyObject_Malloc(
      int size,
      ) {
    return _PyObject_Malloc(
      size,
    );
  }

  late final _PyObject_MallocPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
      'PyObject_Malloc');
  late final _PyObject_Malloc =
  _PyObject_MallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> PyObject_Calloc(
      int nelem,
      int elsize,
      ) {
    return _PyObject_Calloc(
      nelem,
      elsize,
    );
  }

  late final _PyObject_CallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size)>>('PyObject_Calloc');
  late final _PyObject_Calloc = _PyObject_CallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> PyObject_Realloc(
      ffi.Pointer<ffi.Void> ptr,
      int new_size,
      ) {
    return _PyObject_Realloc(
      ptr,
      new_size,
    );
  }

  late final _PyObject_ReallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('PyObject_Realloc');
  late final _PyObject_Realloc = _PyObject_ReallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void PyObject_Free(
      ffi.Pointer<ffi.Void> ptr,
      ) {
    return _PyObject_Free(
      ptr,
    );
  }

  late final _PyObject_FreePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'PyObject_Free');
  late final _PyObject_Free =
  _PyObject_FreePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<PyObject> PyObject_Init(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyTypeObject> arg1,
      ) {
    return _PyObject_Init(
      arg0,
      arg1,
    );
  }

  late final _PyObject_InitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyTypeObject>)>>('PyObject_Init');
  late final _PyObject_Init = _PyObject_InitPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyTypeObject>)>();

  ffi.Pointer<PyVarObject> PyObject_InitVar(
      ffi.Pointer<PyVarObject> arg0,
      ffi.Pointer<PyTypeObject> arg1,
      int arg2,
      ) {
    return _PyObject_InitVar(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyObject_InitVarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyVarObject> Function(ffi.Pointer<PyVarObject>,
              ffi.Pointer<PyTypeObject>, Py_ssize_t)>>('PyObject_InitVar');
  late final _PyObject_InitVar = _PyObject_InitVarPtr.asFunction<
      ffi.Pointer<PyVarObject> Function(
          ffi.Pointer<PyVarObject>, ffi.Pointer<PyTypeObject>, int)>();

  ffi.Pointer<PyObject> _PyObject_New(
      ffi.Pointer<PyTypeObject> arg0,
      ) {
    return __PyObject_New(
      arg0,
    );
  }

  late final __PyObject_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyTypeObject>)>>('_PyObject_New');
  late final __PyObject_New = __PyObject_NewPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>)>();

  ffi.Pointer<PyVarObject> _PyObject_NewVar(
      ffi.Pointer<PyTypeObject> arg0,
      int arg1,
      ) {
    return __PyObject_NewVar(
      arg0,
      arg1,
    );
  }

  late final __PyObject_NewVarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyVarObject> Function(
              ffi.Pointer<PyTypeObject>, Py_ssize_t)>>('_PyObject_NewVar');
  late final __PyObject_NewVar = __PyObject_NewVarPtr.asFunction<
      ffi.Pointer<PyVarObject> Function(ffi.Pointer<PyTypeObject>, int)>();

  int PyGC_Collect() {
    return _PyGC_Collect();
  }

  late final _PyGC_CollectPtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function()>>('PyGC_Collect');
  late final _PyGC_Collect = _PyGC_CollectPtr.asFunction<int Function()>();

  int PyGC_Enable() {
    return _PyGC_Enable();
  }

  late final _PyGC_EnablePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('PyGC_Enable');
  late final _PyGC_Enable = _PyGC_EnablePtr.asFunction<int Function()>();

  int PyGC_Disable() {
    return _PyGC_Disable();
  }

  late final _PyGC_DisablePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('PyGC_Disable');
  late final _PyGC_Disable = _PyGC_DisablePtr.asFunction<int Function()>();

  int PyGC_IsEnabled() {
    return _PyGC_IsEnabled();
  }

  late final _PyGC_IsEnabledPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('PyGC_IsEnabled');
  late final _PyGC_IsEnabled = _PyGC_IsEnabledPtr.asFunction<int Function()>();

  ffi.Pointer<PyVarObject> _PyObject_GC_Resize(
      ffi.Pointer<PyVarObject> arg0,
      int arg1,
      ) {
    return __PyObject_GC_Resize(
      arg0,
      arg1,
    );
  }

  late final __PyObject_GC_ResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyVarObject> Function(
              ffi.Pointer<PyVarObject>, Py_ssize_t)>>('_PyObject_GC_Resize');
  late final __PyObject_GC_Resize = __PyObject_GC_ResizePtr.asFunction<
      ffi.Pointer<PyVarObject> Function(ffi.Pointer<PyVarObject>, int)>();

  ffi.Pointer<PyObject> _PyObject_GC_New(
      ffi.Pointer<PyTypeObject> arg0,
      ) {
    return __PyObject_GC_New(
      arg0,
    );
  }

  late final __PyObject_GC_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyTypeObject>)>>('_PyObject_GC_New');
  late final __PyObject_GC_New = __PyObject_GC_NewPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>)>();

  ffi.Pointer<PyVarObject> _PyObject_GC_NewVar(
      ffi.Pointer<PyTypeObject> arg0,
      int arg1,
      ) {
    return __PyObject_GC_NewVar(
      arg0,
      arg1,
    );
  }

  late final __PyObject_GC_NewVarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyVarObject> Function(
              ffi.Pointer<PyTypeObject>, Py_ssize_t)>>('_PyObject_GC_NewVar');
  late final __PyObject_GC_NewVar = __PyObject_GC_NewVarPtr.asFunction<
      ffi.Pointer<PyVarObject> Function(ffi.Pointer<PyTypeObject>, int)>();

  void PyObject_GC_Track(
      ffi.Pointer<ffi.Void> arg0,
      ) {
    return _PyObject_GC_Track(
      arg0,
    );
  }

  late final _PyObject_GC_TrackPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'PyObject_GC_Track');
  late final _PyObject_GC_Track =
  _PyObject_GC_TrackPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void PyObject_GC_UnTrack(
      ffi.Pointer<ffi.Void> arg0,
      ) {
    return _PyObject_GC_UnTrack(
      arg0,
    );
  }

  late final _PyObject_GC_UnTrackPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'PyObject_GC_UnTrack');
  late final _PyObject_GC_UnTrack = _PyObject_GC_UnTrackPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>)>();

  void PyObject_GC_Del(
      ffi.Pointer<ffi.Void> arg0,
      ) {
    return _PyObject_GC_Del(
      arg0,
    );
  }

  late final _PyObject_GC_DelPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
      'PyObject_GC_Del');
  late final _PyObject_GC_Del =
  _PyObject_GC_DelPtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int PyObject_GC_IsTracked(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_GC_IsTracked(
      arg0,
    );
  }

  late final _PyObject_GC_IsTrackedPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyObject_GC_IsTracked');
  late final _PyObject_GC_IsTracked = _PyObject_GC_IsTrackedPtr.asFunction<
      int Function(ffi.Pointer<PyObject>)>();

  int PyObject_GC_IsFinalized(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_GC_IsFinalized(
      arg0,
    );
  }

  late final _PyObject_GC_IsFinalizedPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyObject_GC_IsFinalized');
  late final _PyObject_GC_IsFinalized = _PyObject_GC_IsFinalizedPtr.asFunction<
      int Function(ffi.Pointer<PyObject>)>();

  int _Py_HashDouble(
      ffi.Pointer<PyObject> arg0,
      double arg1,
      ) {
    return __Py_HashDouble(
      arg0,
      arg1,
    );
  }

  late final __Py_HashDoublePtr = _lookup<
      ffi.NativeFunction<
          Py_hash_t Function(
              ffi.Pointer<PyObject>, ffi.Double)>>('_Py_HashDouble');
  late final __Py_HashDouble = __Py_HashDoublePtr
      .asFunction<int Function(ffi.Pointer<PyObject>, double)>();

  int _Py_HashPointer(
      ffi.Pointer<ffi.Void> arg0,
      ) {
    return __Py_HashPointer(
      arg0,
    );
  }

  late final __Py_HashPointerPtr =
  _lookup<ffi.NativeFunction<Py_hash_t Function(ffi.Pointer<ffi.Void>)>>(
      '_Py_HashPointer');
  late final __Py_HashPointer =
  __Py_HashPointerPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int _Py_HashPointerRaw(
      ffi.Pointer<ffi.Void> arg0,
      ) {
    return __Py_HashPointerRaw(
      arg0,
    );
  }

  late final __Py_HashPointerRawPtr =
  _lookup<ffi.NativeFunction<Py_hash_t Function(ffi.Pointer<ffi.Void>)>>(
      '_Py_HashPointerRaw');
  late final __Py_HashPointerRaw =
  __Py_HashPointerRawPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int _Py_HashBytes(
      ffi.Pointer<ffi.Void> arg0,
      int arg1,
      ) {
    return __Py_HashBytes(
      arg0,
      arg1,
    );
  }

  late final __Py_HashBytesPtr = _lookup<
      ffi.NativeFunction<
          Py_hash_t Function(
              ffi.Pointer<ffi.Void>, Py_ssize_t)>>('_Py_HashBytes');
  late final __Py_HashBytes =
  __Py_HashBytesPtr.asFunction<int Function(ffi.Pointer<ffi.Void>, int)>();

  late final ffi.Pointer<_Py_HashSecret_t> _Py_HashSecret =
  _lookup<_Py_HashSecret_t>('_Py_HashSecret');

  _Py_HashSecret_t get Py_HashSecret => _Py_HashSecret.ref;

  ffi.Pointer<PyHash_FuncDef> PyHash_GetFuncDef() {
    return _PyHash_GetFuncDef();
  }

  late final _PyHash_GetFuncDefPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyHash_FuncDef> Function()>>(
      'PyHash_GetFuncDef');
  late final _PyHash_GetFuncDef = _PyHash_GetFuncDefPtr.asFunction<
      ffi.Pointer<PyHash_FuncDef> Function()>();

  late final ffi.Pointer<PyTypeObject> _PyByteArray_Type =
  _lookup<PyTypeObject>('PyByteArray_Type');

  PyTypeObject get PyByteArray_Type => _PyByteArray_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyByteArrayIter_Type =
  _lookup<PyTypeObject>('PyByteArrayIter_Type');

  PyTypeObject get PyByteArrayIter_Type => _PyByteArrayIter_Type.ref;

  ffi.Pointer<PyObject> PyByteArray_FromObject(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyByteArray_FromObject(
      arg0,
    );
  }

  late final _PyByteArray_FromObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyByteArray_FromObject');
  late final _PyByteArray_FromObject = _PyByteArray_FromObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyByteArray_Concat(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyByteArray_Concat(
      arg0,
      arg1,
    );
  }

  late final _PyByteArray_ConcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyByteArray_Concat');
  late final _PyByteArray_Concat = _PyByteArray_ConcatPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyByteArray_FromStringAndSize(
      ffi.Pointer<ffi.Char> arg0,
      int arg1,
      ) {
    return _PyByteArray_FromStringAndSize(
      arg0,
      arg1,
    );
  }

  late final _PyByteArray_FromStringAndSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              Py_ssize_t)>>('PyByteArray_FromStringAndSize');
  late final _PyByteArray_FromStringAndSize = _PyByteArray_FromStringAndSizePtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int)>();

  int PyByteArray_Size(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyByteArray_Size(
      arg0,
    );
  }

  late final _PyByteArray_SizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyByteArray_Size');
  late final _PyByteArray_Size =
  _PyByteArray_SizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Char> PyByteArray_AsString(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyByteArray_AsString(
      arg0,
    );
  }

  late final _PyByteArray_AsStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PyObject>)>>('PyByteArray_AsString');
  late final _PyByteArray_AsString = _PyByteArray_AsStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PyObject>)>();

  int PyByteArray_Resize(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyByteArray_Resize(
      arg0,
      arg1,
    );
  }

  late final _PyByteArray_ResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PyByteArray_Resize');
  late final _PyByteArray_Resize = _PyByteArray_ResizePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int)>();

  late final ffi.Pointer<PyTypeObject> _PyBytes_Type =
  _lookup<PyTypeObject>('PyBytes_Type');

  PyTypeObject get PyBytes_Type => _PyBytes_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyBytesIter_Type =
  _lookup<PyTypeObject>('PyBytesIter_Type');

  PyTypeObject get PyBytesIter_Type => _PyBytesIter_Type.ref;

  ffi.Pointer<PyObject> PyBytes_FromStringAndSize(
      ffi.Pointer<ffi.Char> arg0,
      int arg1,
      ) {
    return _PyBytes_FromStringAndSize(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_FromStringAndSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>, Py_ssize_t)>>('PyBytes_FromStringAndSize');
  late final _PyBytes_FromStringAndSize = _PyBytes_FromStringAndSizePtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<PyObject> PyBytes_FromString(
      ffi.Pointer<ffi.Char> arg0,
      ) {
    return _PyBytes_FromString(
      arg0,
    );
  }

  late final _PyBytes_FromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyBytes_FromString');
  late final _PyBytes_FromString = _PyBytes_FromStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyBytes_FromObject(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyBytes_FromObject(
      arg0,
    );
  }

  late final _PyBytes_FromObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyBytes_FromObject');
  late final _PyBytes_FromObject = _PyBytes_FromObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyBytes_FromFormatV(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<__va_list_tag> arg1,
      ) {
    return _PyBytes_FromFormatV(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_FromFormatVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('PyBytes_FromFormatV');
  late final _PyBytes_FromFormatV = _PyBytes_FromFormatVPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<PyObject> PyBytes_FromFormat(
      ffi.Pointer<ffi.Char> arg0,
      ) {
    return _PyBytes_FromFormat(
      arg0,
    );
  }

  late final _PyBytes_FromFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyBytes_FromFormat');
  late final _PyBytes_FromFormat = _PyBytes_FromFormatPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  int PyBytes_Size(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyBytes_Size(
      arg0,
    );
  }

  late final _PyBytes_SizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyBytes_Size');
  late final _PyBytes_Size =
  _PyBytes_SizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Char> PyBytes_AsString(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyBytes_AsString(
      arg0,
    );
  }

  late final _PyBytes_AsStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PyObject>)>>('PyBytes_AsString');
  late final _PyBytes_AsString = _PyBytes_AsStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyBytes_Repr(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyBytes_Repr(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_ReprPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Int)>>('PyBytes_Repr');
  late final _PyBytes_Repr = _PyBytes_ReprPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  void PyBytes_Concat(
      ffi.Pointer<ffi.Pointer<PyObject>> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyBytes_Concat(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_ConcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<PyObject>)>>('PyBytes_Concat');
  late final _PyBytes_Concat = _PyBytes_ConcatPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<PyObject>>, ffi.Pointer<PyObject>)>();

  void PyBytes_ConcatAndDel(
      ffi.Pointer<ffi.Pointer<PyObject>> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyBytes_ConcatAndDel(
      arg0,
      arg1,
    );
  }

  late final _PyBytes_ConcatAndDelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<PyObject>)>>('PyBytes_ConcatAndDel');
  late final _PyBytes_ConcatAndDel = _PyBytes_ConcatAndDelPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<PyObject>>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyBytes_DecodeEscape(
      ffi.Pointer<ffi.Char> arg0,
      int arg1,
      ffi.Pointer<ffi.Char> arg2,
      int arg3,
      ffi.Pointer<ffi.Char> arg4,
      ) {
    return _PyBytes_DecodeEscape(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _PyBytes_DecodeEscapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyBytes_DecodeEscape');
  late final _PyBytes_DecodeEscape = _PyBytes_DecodeEscapePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int PyBytes_AsStringAndSize(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<ffi.Pointer<ffi.Char>> s,
      ffi.Pointer<Py_ssize_t> len,
      ) {
    return _PyBytes_AsStringAndSize(
      obj,
      s,
      len,
    );
  }

  late final _PyBytes_AsStringAndSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<Py_ssize_t>)>>('PyBytes_AsStringAndSize');
  late final _PyBytes_AsStringAndSize = _PyBytes_AsStringAndSizePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<Py_ssize_t>)>();

  late final ffi.Pointer<PyTypeObject> _PyUnicode_Type =
  _lookup<PyTypeObject>('PyUnicode_Type');

  PyTypeObject get PyUnicode_Type => _PyUnicode_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyUnicodeIter_Type =
  _lookup<PyTypeObject>('PyUnicodeIter_Type');

  PyTypeObject get PyUnicodeIter_Type => _PyUnicodeIter_Type.ref;

  ffi.Pointer<PyObject> PyUnicode_FromStringAndSize(
      ffi.Pointer<ffi.Char> u,
      int size,
      ) {
    return _PyUnicode_FromStringAndSize(
      u,
      size,
    );
  }

  late final _PyUnicode_FromStringAndSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              Py_ssize_t)>>('PyUnicode_FromStringAndSize');
  late final _PyUnicode_FromStringAndSize = _PyUnicode_FromStringAndSizePtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<PyObject> PyUnicode_FromString(
      ffi.Pointer<ffi.Char> u,
      ) {
    return _PyUnicode_FromString(
      u,
    );
  }

  late final _PyUnicode_FromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyUnicode_FromString');
  late final _PyUnicode_FromString = _PyUnicode_FromStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_Substring(
      ffi.Pointer<PyObject> str,
      int start,
      int end,
      ) {
    return _PyUnicode_Substring(
      str,
      start,
      end,
    );
  }

  late final _PyUnicode_SubstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, Py_ssize_t,
              Py_ssize_t)>>('PyUnicode_Substring');
  late final _PyUnicode_Substring = _PyUnicode_SubstringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int, int)>();

  ffi.Pointer<Py_UCS4> PyUnicode_AsUCS4(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<Py_UCS4> buffer,
      int buflen,
      int copy_null,
      ) {
    return _PyUnicode_AsUCS4(
      unicode,
      buffer,
      buflen,
      copy_null,
    );
  }

  late final _PyUnicode_AsUCS4Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Py_UCS4> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<Py_UCS4>, Py_ssize_t, ffi.Int)>>('PyUnicode_AsUCS4');
  late final _PyUnicode_AsUCS4 = _PyUnicode_AsUCS4Ptr.asFunction<
      ffi.Pointer<Py_UCS4> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<Py_UCS4>, int, int)>();

  ffi.Pointer<Py_UCS4> PyUnicode_AsUCS4Copy(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_AsUCS4Copy(
      unicode,
    );
  }

  late final _PyUnicode_AsUCS4CopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Py_UCS4> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_AsUCS4Copy');
  late final _PyUnicode_AsUCS4Copy = _PyUnicode_AsUCS4CopyPtr.asFunction<
      ffi.Pointer<Py_UCS4> Function(ffi.Pointer<PyObject>)>();

  int PyUnicode_GetLength(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_GetLength(
      unicode,
    );
  }

  late final _PyUnicode_GetLengthPtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyUnicode_GetLength');
  late final _PyUnicode_GetLength =
  _PyUnicode_GetLengthPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyUnicode_GetSize(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_GetSize(
      unicode,
    );
  }

  late final _PyUnicode_GetSizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyUnicode_GetSize');
  late final _PyUnicode_GetSize =
  _PyUnicode_GetSizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyUnicode_ReadChar(
      ffi.Pointer<PyObject> unicode,
      int index,
      ) {
    return _PyUnicode_ReadChar(
      unicode,
      index,
    );
  }

  late final _PyUnicode_ReadCharPtr = _lookup<
      ffi.NativeFunction<
          Py_UCS4 Function(
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PyUnicode_ReadChar');
  late final _PyUnicode_ReadChar = _PyUnicode_ReadCharPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int)>();

  int PyUnicode_WriteChar(
      ffi.Pointer<PyObject> unicode,
      int index,
      int character,
      ) {
    return _PyUnicode_WriteChar(
      unicode,
      index,
      character,
    );
  }

  late final _PyUnicode_WriteCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t,
              Py_UCS4)>>('PyUnicode_WriteChar');
  late final _PyUnicode_WriteChar = _PyUnicode_WriteCharPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, int)>();

  int PyUnicode_Resize(
      ffi.Pointer<ffi.Pointer<PyObject>> unicode,
      int length,
      ) {
    return _PyUnicode_Resize(
      unicode,
      length,
    );
  }

  late final _PyUnicode_ResizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Pointer<PyObject>>,
              Py_ssize_t)>>('PyUnicode_Resize');
  late final _PyUnicode_Resize = _PyUnicode_ResizePtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<PyObject>>, int)>();

  ffi.Pointer<PyObject> PyUnicode_FromEncodedObject(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_FromEncodedObject(
      obj,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_FromEncodedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_FromEncodedObject');
  late final _PyUnicode_FromEncodedObject =
  _PyUnicode_FromEncodedObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_FromObject(
      ffi.Pointer<PyObject> obj,
      ) {
    return _PyUnicode_FromObject(
      obj,
    );
  }

  late final _PyUnicode_FromObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_FromObject');
  late final _PyUnicode_FromObject = _PyUnicode_FromObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_FromFormatV(
      ffi.Pointer<ffi.Char> format,
      ffi.Pointer<__va_list_tag> vargs,
      ) {
    return _PyUnicode_FromFormatV(
      format,
      vargs,
    );
  }

  late final _PyUnicode_FromFormatVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('PyUnicode_FromFormatV');
  late final _PyUnicode_FromFormatV = _PyUnicode_FromFormatVPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<PyObject> PyUnicode_FromFormat(
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyUnicode_FromFormat(
      format,
    );
  }

  late final _PyUnicode_FromFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyUnicode_FromFormat');
  late final _PyUnicode_FromFormat = _PyUnicode_FromFormatPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  void PyUnicode_InternInPlace(
      ffi.Pointer<ffi.Pointer<PyObject>> arg0,
      ) {
    return _PyUnicode_InternInPlace(
      arg0,
    );
  }

  late final _PyUnicode_InternInPlacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<PyObject>>)>>('PyUnicode_InternInPlace');
  late final _PyUnicode_InternInPlace = _PyUnicode_InternInPlacePtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<PyObject>>)>();

  ffi.Pointer<PyObject> PyUnicode_InternFromString(
      ffi.Pointer<ffi.Char> u,
      ) {
    return _PyUnicode_InternFromString(
      u,
    );
  }

  late final _PyUnicode_InternFromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyUnicode_InternFromString');
  late final _PyUnicode_InternFromString = _PyUnicode_InternFromStringPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  void PyUnicode_InternImmortal(
      ffi.Pointer<ffi.Pointer<PyObject>> arg0,
      ) {
    return _PyUnicode_InternImmortal(
      arg0,
    );
  }

  late final _PyUnicode_InternImmortalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<PyObject>>)>>('PyUnicode_InternImmortal');
  late final _PyUnicode_InternImmortal = _PyUnicode_InternImmortalPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<PyObject>>)>();

  ffi.Pointer<PyObject> PyUnicode_FromWideChar(
      ffi.Pointer<ffi.WChar> w,
      int size,
      ) {
    return _PyUnicode_FromWideChar(
      w,
      size,
    );
  }

  late final _PyUnicode_FromWideCharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.WChar>, Py_ssize_t)>>('PyUnicode_FromWideChar');
  late final _PyUnicode_FromWideChar = _PyUnicode_FromWideCharPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.WChar>, int)>();

  int PyUnicode_AsWideChar(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<ffi.WChar> w,
      int size,
      ) {
    return _PyUnicode_AsWideChar(
      unicode,
      w,
      size,
    );
  }

  late final _PyUnicode_AsWideCharPtr = _lookup<
      ffi.NativeFunction<
          Py_ssize_t Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.WChar>,
              Py_ssize_t)>>('PyUnicode_AsWideChar');
  late final _PyUnicode_AsWideChar = _PyUnicode_AsWideCharPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> PyUnicode_AsWideCharString(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<Py_ssize_t> size,
      ) {
    return _PyUnicode_AsWideCharString(
      unicode,
      size,
    );
  }

  late final _PyUnicode_AsWideCharStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicode_AsWideCharString');
  late final _PyUnicode_AsWideCharString =
  _PyUnicode_AsWideCharStringPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<Py_ssize_t>)>();

  ffi.Pointer<PyObject> PyUnicode_FromOrdinal(
      int ordinal,
      ) {
    return _PyUnicode_FromOrdinal(
      ordinal,
    );
  }

  late final _PyUnicode_FromOrdinalPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(ffi.Int)>>(
      'PyUnicode_FromOrdinal');
  late final _PyUnicode_FromOrdinal = _PyUnicode_FromOrdinalPtr.asFunction<
      ffi.Pointer<PyObject> Function(int)>();

  ffi.Pointer<ffi.Char> PyUnicode_GetDefaultEncoding() {
    return _PyUnicode_GetDefaultEncoding();
  }

  late final _PyUnicode_GetDefaultEncodingPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'PyUnicode_GetDefaultEncoding');
  late final _PyUnicode_GetDefaultEncoding = _PyUnicode_GetDefaultEncodingPtr
      .asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<PyObject> PyUnicode_Decode(
      ffi.Pointer<ffi.Char> s,
      int size,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_Decode(
      s,
      size,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_DecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_Decode');
  late final _PyUnicode_Decode = _PyUnicode_DecodePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsDecodedObject(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_AsDecodedObject(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsDecodedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_AsDecodedObject');
  late final _PyUnicode_AsDecodedObject =
  _PyUnicode_AsDecodedObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsDecodedUnicode(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_AsDecodedUnicode(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsDecodedUnicodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_AsDecodedUnicode');
  late final _PyUnicode_AsDecodedUnicode =
  _PyUnicode_AsDecodedUnicodePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsEncodedObject(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_AsEncodedObject(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsEncodedObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_AsEncodedObject');
  late final _PyUnicode_AsEncodedObject =
  _PyUnicode_AsEncodedObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsEncodedString(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_AsEncodedString(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsEncodedStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_AsEncodedString');
  late final _PyUnicode_AsEncodedString =
  _PyUnicode_AsEncodedStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsEncodedUnicode(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_AsEncodedUnicode(
      unicode,
      encoding,
      errors,
    );
  }

  late final _PyUnicode_AsEncodedUnicodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_AsEncodedUnicode');
  late final _PyUnicode_AsEncodedUnicode =
  _PyUnicode_AsEncodedUnicodePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_BuildEncodingMap(
      ffi.Pointer<PyObject> string,
      ) {
    return _PyUnicode_BuildEncodingMap(
      string,
    );
  }

  late final _PyUnicode_BuildEncodingMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_BuildEncodingMap');
  late final _PyUnicode_BuildEncodingMap = _PyUnicode_BuildEncodingMapPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF7(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_DecodeUTF7(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeUTF7Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeUTF7');
  late final _PyUnicode_DecodeUTF7 = _PyUnicode_DecodeUTF7Ptr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF7Stateful(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ffi.Pointer<Py_ssize_t> consumed,
      ) {
    return _PyUnicode_DecodeUTF7Stateful(
      string,
      length,
      errors,
      consumed,
    );
  }

  late final _PyUnicode_DecodeUTF7StatefulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicode_DecodeUTF7Stateful');
  late final _PyUnicode_DecodeUTF7Stateful =
  _PyUnicode_DecodeUTF7StatefulPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<Py_ssize_t>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF8(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_DecodeUTF8(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeUTF8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeUTF8');
  late final _PyUnicode_DecodeUTF8 = _PyUnicode_DecodeUTF8Ptr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF8Stateful(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ffi.Pointer<Py_ssize_t> consumed,
      ) {
    return _PyUnicode_DecodeUTF8Stateful(
      string,
      length,
      errors,
      consumed,
    );
  }

  late final _PyUnicode_DecodeUTF8StatefulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicode_DecodeUTF8Stateful');
  late final _PyUnicode_DecodeUTF8Stateful =
  _PyUnicode_DecodeUTF8StatefulPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<Py_ssize_t>)>();

  ffi.Pointer<PyObject> PyUnicode_AsUTF8String(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_AsUTF8String(
      unicode,
    );
  }

  late final _PyUnicode_AsUTF8StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_AsUTF8String');
  late final _PyUnicode_AsUTF8String = _PyUnicode_AsUTF8StringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Char> PyUnicode_AsUTF8AndSize(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<Py_ssize_t> size,
      ) {
    return _PyUnicode_AsUTF8AndSize(
      unicode,
      size,
    );
  }

  late final _PyUnicode_AsUTF8AndSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicode_AsUTF8AndSize');
  late final _PyUnicode_AsUTF8AndSize = _PyUnicode_AsUTF8AndSizePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<Py_ssize_t>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF32(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ffi.Pointer<ffi.Int> byteorder,
      ) {
    return _PyUnicode_DecodeUTF32(
      string,
      length,
      errors,
      byteorder,
    );
  }

  late final _PyUnicode_DecodeUTF32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('PyUnicode_DecodeUTF32');
  late final _PyUnicode_DecodeUTF32 = _PyUnicode_DecodeUTF32Ptr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF32Stateful(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ffi.Pointer<ffi.Int> byteorder,
      ffi.Pointer<Py_ssize_t> consumed,
      ) {
    return _PyUnicode_DecodeUTF32Stateful(
      string,
      length,
      errors,
      byteorder,
      consumed,
    );
  }

  late final _PyUnicode_DecodeUTF32StatefulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicode_DecodeUTF32Stateful');
  late final _PyUnicode_DecodeUTF32Stateful =
  _PyUnicode_DecodeUTF32StatefulPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<Py_ssize_t>)>();

  ffi.Pointer<PyObject> PyUnicode_AsUTF32String(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_AsUTF32String(
      unicode,
    );
  }

  late final _PyUnicode_AsUTF32StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_AsUTF32String');
  late final _PyUnicode_AsUTF32String = _PyUnicode_AsUTF32StringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF16(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ffi.Pointer<ffi.Int> byteorder,
      ) {
    return _PyUnicode_DecodeUTF16(
      string,
      length,
      errors,
      byteorder,
    );
  }

  late final _PyUnicode_DecodeUTF16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>)>>('PyUnicode_DecodeUTF16');
  late final _PyUnicode_DecodeUTF16 = _PyUnicode_DecodeUTF16Ptr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUTF16Stateful(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ffi.Pointer<ffi.Int> byteorder,
      ffi.Pointer<Py_ssize_t> consumed,
      ) {
    return _PyUnicode_DecodeUTF16Stateful(
      string,
      length,
      errors,
      byteorder,
      consumed,
    );
  }

  late final _PyUnicode_DecodeUTF16StatefulPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicode_DecodeUTF16Stateful');
  late final _PyUnicode_DecodeUTF16Stateful =
  _PyUnicode_DecodeUTF16StatefulPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<Py_ssize_t>)>();

  ffi.Pointer<PyObject> PyUnicode_AsUTF16String(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_AsUTF16String(
      unicode,
    );
  }

  late final _PyUnicode_AsUTF16StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_AsUTF16String');
  late final _PyUnicode_AsUTF16String = _PyUnicode_AsUTF16StringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeUnicodeEscape(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_DecodeUnicodeEscape(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeUnicodeEscapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeUnicodeEscape');
  late final _PyUnicode_DecodeUnicodeEscape =
  _PyUnicode_DecodeUnicodeEscapePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsUnicodeEscapeString(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_AsUnicodeEscapeString(
      unicode,
    );
  }

  late final _PyUnicode_AsUnicodeEscapeStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_AsUnicodeEscapeString');
  late final _PyUnicode_AsUnicodeEscapeString =
  _PyUnicode_AsUnicodeEscapeStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeRawUnicodeEscape(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_DecodeRawUnicodeEscape(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeRawUnicodeEscapePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeRawUnicodeEscape');
  late final _PyUnicode_DecodeRawUnicodeEscape =
  _PyUnicode_DecodeRawUnicodeEscapePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsRawUnicodeEscapeString(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_AsRawUnicodeEscapeString(
      unicode,
    );
  }

  late final _PyUnicode_AsRawUnicodeEscapeStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_AsRawUnicodeEscapeString');
  late final _PyUnicode_AsRawUnicodeEscapeString =
  _PyUnicode_AsRawUnicodeEscapeStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeLatin1(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_DecodeLatin1(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeLatin1Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeLatin1');
  late final _PyUnicode_DecodeLatin1 = _PyUnicode_DecodeLatin1Ptr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsLatin1String(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_AsLatin1String(
      unicode,
    );
  }

  late final _PyUnicode_AsLatin1StringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_AsLatin1String');
  late final _PyUnicode_AsLatin1String = _PyUnicode_AsLatin1StringPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeASCII(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_DecodeASCII(
      string,
      length,
      errors,
    );
  }

  late final _PyUnicode_DecodeASCIIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeASCII');
  late final _PyUnicode_DecodeASCII = _PyUnicode_DecodeASCIIPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsASCIIString(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_AsASCIIString(
      unicode,
    );
  }

  late final _PyUnicode_AsASCIIStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_AsASCIIString');
  late final _PyUnicode_AsASCIIString = _PyUnicode_AsASCIIStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeCharmap(
      ffi.Pointer<ffi.Char> string,
      int length,
      ffi.Pointer<PyObject> mapping,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_DecodeCharmap(
      string,
      length,
      mapping,
      errors,
    );
  }

  late final _PyUnicode_DecodeCharmapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeCharmap');
  late final _PyUnicode_DecodeCharmap = _PyUnicode_DecodeCharmapPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_AsCharmapString(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<PyObject> mapping,
      ) {
    return _PyUnicode_AsCharmapString(
      unicode,
      mapping,
    );
  }

  late final _PyUnicode_AsCharmapStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyUnicode_AsCharmapString');
  late final _PyUnicode_AsCharmapString =
  _PyUnicode_AsCharmapStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeLocaleAndSize(
      ffi.Pointer<ffi.Char> str,
      int len,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_DecodeLocaleAndSize(
      str,
      len,
      errors,
    );
  }

  late final _PyUnicode_DecodeLocaleAndSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeLocaleAndSize');
  late final _PyUnicode_DecodeLocaleAndSize =
  _PyUnicode_DecodeLocaleAndSizePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeLocale(
      ffi.Pointer<ffi.Char> str,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_DecodeLocale(
      str,
      errors,
    );
  }

  late final _PyUnicode_DecodeLocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeLocale');
  late final _PyUnicode_DecodeLocale = _PyUnicode_DecodeLocalePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_EncodeLocale(
      ffi.Pointer<PyObject> unicode,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_EncodeLocale(
      unicode,
      errors,
    );
  }

  late final _PyUnicode_EncodeLocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_EncodeLocale');
  late final _PyUnicode_EncodeLocale = _PyUnicode_EncodeLocalePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyUnicode_FSConverter(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Void> arg1,
      ) {
    return _PyUnicode_FSConverter(
      arg0,
      arg1,
    );
  }

  late final _PyUnicode_FSConverterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Void>)>>('PyUnicode_FSConverter');
  late final _PyUnicode_FSConverter = _PyUnicode_FSConverterPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Void>)>();

  int PyUnicode_FSDecoder(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Void> arg1,
      ) {
    return _PyUnicode_FSDecoder(
      arg0,
      arg1,
    );
  }

  late final _PyUnicode_FSDecoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Void>)>>('PyUnicode_FSDecoder');
  late final _PyUnicode_FSDecoder = _PyUnicode_FSDecoderPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeFSDefault(
      ffi.Pointer<ffi.Char> s,
      ) {
    return _PyUnicode_DecodeFSDefault(
      s,
    );
  }

  late final _PyUnicode_DecodeFSDefaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyUnicode_DecodeFSDefault');
  late final _PyUnicode_DecodeFSDefault = _PyUnicode_DecodeFSDefaultPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_DecodeFSDefaultAndSize(
      ffi.Pointer<ffi.Char> s,
      int size,
      ) {
    return _PyUnicode_DecodeFSDefaultAndSize(
      s,
      size,
    );
  }

  late final _PyUnicode_DecodeFSDefaultAndSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              Py_ssize_t)>>('PyUnicode_DecodeFSDefaultAndSize');
  late final _PyUnicode_DecodeFSDefaultAndSize =
  _PyUnicode_DecodeFSDefaultAndSizePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<PyObject> PyUnicode_EncodeFSDefault(
      ffi.Pointer<PyObject> unicode,
      ) {
    return _PyUnicode_EncodeFSDefault(
      unicode,
    );
  }

  late final _PyUnicode_EncodeFSDefaultPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicode_EncodeFSDefault');
  late final _PyUnicode_EncodeFSDefault = _PyUnicode_EncodeFSDefaultPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_Concat(
      ffi.Pointer<PyObject> left,
      ffi.Pointer<PyObject> right,
      ) {
    return _PyUnicode_Concat(
      left,
      right,
    );
  }

  late final _PyUnicode_ConcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyUnicode_Concat');
  late final _PyUnicode_Concat = _PyUnicode_ConcatPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  void PyUnicode_Append(
      ffi.Pointer<ffi.Pointer<PyObject>> pleft,
      ffi.Pointer<PyObject> right,
      ) {
    return _PyUnicode_Append(
      pleft,
      right,
    );
  }

  late final _PyUnicode_AppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<PyObject>)>>('PyUnicode_Append');
  late final _PyUnicode_Append = _PyUnicode_AppendPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<PyObject>>, ffi.Pointer<PyObject>)>();

  void PyUnicode_AppendAndDel(
      ffi.Pointer<ffi.Pointer<PyObject>> pleft,
      ffi.Pointer<PyObject> right,
      ) {
    return _PyUnicode_AppendAndDel(
      pleft,
      right,
    );
  }

  late final _PyUnicode_AppendAndDelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<PyObject>)>>('PyUnicode_AppendAndDel');
  late final _PyUnicode_AppendAndDel = _PyUnicode_AppendAndDelPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<PyObject>>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_Split(
      ffi.Pointer<PyObject> s,
      ffi.Pointer<PyObject> sep,
      int maxsplit,
      ) {
    return _PyUnicode_Split(
      s,
      sep,
      maxsplit,
    );
  }

  late final _PyUnicode_SplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PyUnicode_Split');
  late final _PyUnicode_Split = _PyUnicode_SplitPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> PyUnicode_Splitlines(
      ffi.Pointer<PyObject> s,
      int keepends,
      ) {
    return _PyUnicode_Splitlines(
      s,
      keepends,
    );
  }

  late final _PyUnicode_SplitlinesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Int)>>('PyUnicode_Splitlines');
  late final _PyUnicode_Splitlines = _PyUnicode_SplitlinesPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> PyUnicode_Partition(
      ffi.Pointer<PyObject> s,
      ffi.Pointer<PyObject> sep,
      ) {
    return _PyUnicode_Partition(
      s,
      sep,
    );
  }

  late final _PyUnicode_PartitionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyUnicode_Partition');
  late final _PyUnicode_Partition = _PyUnicode_PartitionPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_RPartition(
      ffi.Pointer<PyObject> s,
      ffi.Pointer<PyObject> sep,
      ) {
    return _PyUnicode_RPartition(
      s,
      sep,
    );
  }

  late final _PyUnicode_RPartitionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyUnicode_RPartition');
  late final _PyUnicode_RPartition = _PyUnicode_RPartitionPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicode_RSplit(
      ffi.Pointer<PyObject> s,
      ffi.Pointer<PyObject> sep,
      int maxsplit,
      ) {
    return _PyUnicode_RSplit(
      s,
      sep,
      maxsplit,
    );
  }

  late final _PyUnicode_RSplitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PyUnicode_RSplit');
  late final _PyUnicode_RSplit = _PyUnicode_RSplitPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> PyUnicode_Translate(
      ffi.Pointer<PyObject> str,
      ffi.Pointer<PyObject> table,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyUnicode_Translate(
      str,
      table,
      errors,
    );
  }

  late final _PyUnicode_TranslatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_Translate');
  late final _PyUnicode_Translate = _PyUnicode_TranslatePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_Join(
      ffi.Pointer<PyObject> separator,
      ffi.Pointer<PyObject> seq,
      ) {
    return _PyUnicode_Join(
      separator,
      seq,
    );
  }

  late final _PyUnicode_JoinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyUnicode_Join');
  late final _PyUnicode_Join = _PyUnicode_JoinPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyUnicode_Tailmatch(
      ffi.Pointer<PyObject> str,
      ffi.Pointer<PyObject> substr,
      int start,
      int end,
      int direction,
      ) {
    return _PyUnicode_Tailmatch(
      str,
      substr,
      start,
      end,
      direction,
    );
  }

  late final _PyUnicode_TailmatchPtr = _lookup<
      ffi.NativeFunction<
          Py_ssize_t Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              Py_ssize_t, Py_ssize_t, ffi.Int)>>('PyUnicode_Tailmatch');
  late final _PyUnicode_Tailmatch = _PyUnicode_TailmatchPtr.asFunction<
      int Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int, int, int)>();

  int PyUnicode_Find(
      ffi.Pointer<PyObject> str,
      ffi.Pointer<PyObject> substr,
      int start,
      int end,
      int direction,
      ) {
    return _PyUnicode_Find(
      str,
      substr,
      start,
      end,
      direction,
    );
  }

  late final _PyUnicode_FindPtr = _lookup<
      ffi.NativeFunction<
          Py_ssize_t Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              Py_ssize_t, Py_ssize_t, ffi.Int)>>('PyUnicode_Find');
  late final _PyUnicode_Find = _PyUnicode_FindPtr.asFunction<
      int Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int, int, int)>();

  int PyUnicode_FindChar(
      ffi.Pointer<PyObject> str,
      int ch,
      int start,
      int end,
      int direction,
      ) {
    return _PyUnicode_FindChar(
      str,
      ch,
      start,
      end,
      direction,
    );
  }

  late final _PyUnicode_FindCharPtr = _lookup<
      ffi.NativeFunction<
          Py_ssize_t Function(ffi.Pointer<PyObject>, Py_UCS4, Py_ssize_t,
              Py_ssize_t, ffi.Int)>>('PyUnicode_FindChar');
  late final _PyUnicode_FindChar = _PyUnicode_FindCharPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, int, int, int)>();

  int PyUnicode_Count(
      ffi.Pointer<PyObject> str,
      ffi.Pointer<PyObject> substr,
      int start,
      int end,
      ) {
    return _PyUnicode_Count(
      str,
      substr,
      start,
      end,
    );
  }

  late final _PyUnicode_CountPtr = _lookup<
      ffi.NativeFunction<
          Py_ssize_t Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              Py_ssize_t, Py_ssize_t)>>('PyUnicode_Count');
  late final _PyUnicode_Count = _PyUnicode_CountPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int, int)>();

  ffi.Pointer<PyObject> PyUnicode_Replace(
      ffi.Pointer<PyObject> str,
      ffi.Pointer<PyObject> substr,
      ffi.Pointer<PyObject> replstr,
      int maxcount,
      ) {
    return _PyUnicode_Replace(
      str,
      substr,
      replstr,
      maxcount,
    );
  }

  late final _PyUnicode_ReplacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              Py_ssize_t)>>('PyUnicode_Replace');
  late final _PyUnicode_Replace = _PyUnicode_ReplacePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int)>();

  int PyUnicode_Compare(
      ffi.Pointer<PyObject> left,
      ffi.Pointer<PyObject> right,
      ) {
    return _PyUnicode_Compare(
      left,
      right,
    );
  }

  late final _PyUnicode_ComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyUnicode_Compare');
  late final _PyUnicode_Compare = _PyUnicode_ComparePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyUnicode_CompareWithASCIIString(
      ffi.Pointer<PyObject> left,
      ffi.Pointer<ffi.Char> right,
      ) {
    return _PyUnicode_CompareWithASCIIString(
      left,
      right,
    );
  }

  late final _PyUnicode_CompareWithASCIIStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyUnicode_CompareWithASCIIString');
  late final _PyUnicode_CompareWithASCIIString =
  _PyUnicode_CompareWithASCIIStringPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicode_RichCompare(
      ffi.Pointer<PyObject> left,
      ffi.Pointer<PyObject> right,
      int op,
      ) {
    return _PyUnicode_RichCompare(
      left,
      right,
      op,
    );
  }

  late final _PyUnicode_RichComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>, ffi.Int)>>('PyUnicode_RichCompare');
  late final _PyUnicode_RichCompare = _PyUnicode_RichComparePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> PyUnicode_Format(
      ffi.Pointer<PyObject> format,
      ffi.Pointer<PyObject> args,
      ) {
    return _PyUnicode_Format(
      format,
      args,
    );
  }

  late final _PyUnicode_FormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyUnicode_Format');
  late final _PyUnicode_Format = _PyUnicode_FormatPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyUnicode_Contains(
      ffi.Pointer<PyObject> container,
      ffi.Pointer<PyObject> element,
      ) {
    return _PyUnicode_Contains(
      container,
      element,
    );
  }

  late final _PyUnicode_ContainsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyUnicode_Contains');
  late final _PyUnicode_Contains = _PyUnicode_ContainsPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyUnicode_IsIdentifier(
      ffi.Pointer<PyObject> s,
      ) {
    return _PyUnicode_IsIdentifier(
      s,
    );
  }

  late final _PyUnicode_IsIdentifierPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyUnicode_IsIdentifier');
  late final _PyUnicode_IsIdentifier = _PyUnicode_IsIdentifierPtr.asFunction<
      int Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyLong_Type =
  _lookup<PyTypeObject>('PyLong_Type');

  PyTypeObject get PyLong_Type => _PyLong_Type.ref;

  ffi.Pointer<PyObject> PyLong_FromLong(
      int arg0,
      ) {
    return _PyLong_FromLong(
      arg0,
    );
  }

  late final _PyLong_FromLongPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(ffi.Long)>>(
      'PyLong_FromLong');
  late final _PyLong_FromLong =
  _PyLong_FromLongPtr.asFunction<ffi.Pointer<PyObject> Function(int)>();

  ffi.Pointer<PyObject> PyLong_FromUnsignedLong(
      int arg0,
      ) {
    return _PyLong_FromUnsignedLong(
      arg0,
    );
  }

  late final _PyLong_FromUnsignedLongPtr = _lookup<
      ffi.NativeFunction<ffi.Pointer<PyObject> Function(ffi.UnsignedLong)>>(
      'PyLong_FromUnsignedLong');
  late final _PyLong_FromUnsignedLong = _PyLong_FromUnsignedLongPtr.asFunction<
      ffi.Pointer<PyObject> Function(int)>();

  ffi.Pointer<PyObject> PyLong_FromSize_t(
      int arg0,
      ) {
    return _PyLong_FromSize_t(
      arg0,
    );
  }

  late final _PyLong_FromSize_tPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(ffi.Size)>>(
      'PyLong_FromSize_t');
  late final _PyLong_FromSize_t =
  _PyLong_FromSize_tPtr.asFunction<ffi.Pointer<PyObject> Function(int)>();

  ffi.Pointer<PyObject> PyLong_FromSsize_t(
      int arg0,
      ) {
    return _PyLong_FromSsize_t(
      arg0,
    );
  }

  late final _PyLong_FromSsize_tPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(Py_ssize_t)>>(
      'PyLong_FromSsize_t');
  late final _PyLong_FromSsize_t =
  _PyLong_FromSsize_tPtr.asFunction<ffi.Pointer<PyObject> Function(int)>();

  ffi.Pointer<PyObject> PyLong_FromDouble(
      double arg0,
      ) {
    return _PyLong_FromDouble(
      arg0,
    );
  }

  late final _PyLong_FromDoublePtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(ffi.Double)>>(
      'PyLong_FromDouble');
  late final _PyLong_FromDouble = _PyLong_FromDoublePtr.asFunction<
      ffi.Pointer<PyObject> Function(double)>();

  int PyLong_AsLong(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsLong(
      arg0,
    );
  }

  late final _PyLong_AsLongPtr =
  _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<PyObject>)>>(
      'PyLong_AsLong');
  late final _PyLong_AsLong =
  _PyLong_AsLongPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyLong_AsLongAndOverflow(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Int> arg1,
      ) {
    return _PyLong_AsLongAndOverflow(
      arg0,
      arg1,
    );
  }

  late final _PyLong_AsLongAndOverflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Int>)>>('PyLong_AsLongAndOverflow');
  late final _PyLong_AsLongAndOverflow = _PyLong_AsLongAndOverflowPtr
      .asFunction<int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Int>)>();

  int PyLong_AsSsize_t(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsSsize_t(
      arg0,
    );
  }

  late final _PyLong_AsSsize_tPtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyLong_AsSsize_t');
  late final _PyLong_AsSsize_t =
  _PyLong_AsSsize_tPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyLong_AsSize_t(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsSize_t(
      arg0,
    );
  }

  late final _PyLong_AsSize_tPtr =
  _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<PyObject>)>>(
      'PyLong_AsSize_t');
  late final _PyLong_AsSize_t =
  _PyLong_AsSize_tPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyLong_AsUnsignedLong(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsUnsignedLong(
      arg0,
    );
  }

  late final _PyLong_AsUnsignedLongPtr = _lookup<
      ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<PyObject>)>>(
      'PyLong_AsUnsignedLong');
  late final _PyLong_AsUnsignedLong = _PyLong_AsUnsignedLongPtr.asFunction<
      int Function(ffi.Pointer<PyObject>)>();

  int PyLong_AsUnsignedLongMask(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsUnsignedLongMask(
      arg0,
    );
  }

  late final _PyLong_AsUnsignedLongMaskPtr = _lookup<
      ffi.NativeFunction<ffi.UnsignedLong Function(ffi.Pointer<PyObject>)>>(
      'PyLong_AsUnsignedLongMask');
  late final _PyLong_AsUnsignedLongMask = _PyLong_AsUnsignedLongMaskPtr
      .asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyLong_GetInfo() {
    return _PyLong_GetInfo();
  }

  late final _PyLong_GetInfoPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyLong_GetInfo');
  late final _PyLong_GetInfo =
  _PyLong_GetInfoPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  double PyLong_AsDouble(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsDouble(
      arg0,
    );
  }

  late final _PyLong_AsDoublePtr =
  _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PyObject>)>>(
      'PyLong_AsDouble');
  late final _PyLong_AsDouble =
  _PyLong_AsDoublePtr.asFunction<double Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyLong_FromVoidPtr(
      ffi.Pointer<ffi.Void> arg0,
      ) {
    return _PyLong_FromVoidPtr(
      arg0,
    );
  }

  late final _PyLong_FromVoidPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Void>)>>('PyLong_FromVoidPtr');
  late final _PyLong_FromVoidPtr = _PyLong_FromVoidPtrPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> PyLong_AsVoidPtr(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsVoidPtr(
      arg0,
    );
  }

  late final _PyLong_AsVoidPtrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<PyObject>)>>('PyLong_AsVoidPtr');
  late final _PyLong_AsVoidPtr = _PyLong_AsVoidPtrPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyLong_FromLongLong(
      int arg0,
      ) {
    return _PyLong_FromLongLong(
      arg0,
    );
  }

  late final _PyLong_FromLongLongPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(ffi.LongLong)>>(
      'PyLong_FromLongLong');
  late final _PyLong_FromLongLong =
  _PyLong_FromLongLongPtr.asFunction<ffi.Pointer<PyObject> Function(int)>();

  ffi.Pointer<PyObject> PyLong_FromUnsignedLongLong(
      int arg0,
      ) {
    return _PyLong_FromUnsignedLongLong(
      arg0,
    );
  }

  late final _PyLong_FromUnsignedLongLongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.UnsignedLongLong)>>('PyLong_FromUnsignedLongLong');
  late final _PyLong_FromUnsignedLongLong = _PyLong_FromUnsignedLongLongPtr
      .asFunction<ffi.Pointer<PyObject> Function(int)>();

  int PyLong_AsLongLong(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsLongLong(
      arg0,
    );
  }

  late final _PyLong_AsLongLongPtr =
  _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<PyObject>)>>(
      'PyLong_AsLongLong');
  late final _PyLong_AsLongLong =
  _PyLong_AsLongLongPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyLong_AsUnsignedLongLong(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsUnsignedLongLong(
      arg0,
    );
  }

  late final _PyLong_AsUnsignedLongLongPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<PyObject>)>>('PyLong_AsUnsignedLongLong');
  late final _PyLong_AsUnsignedLongLong = _PyLong_AsUnsignedLongLongPtr
      .asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyLong_AsUnsignedLongLongMask(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyLong_AsUnsignedLongLongMask(
      arg0,
    );
  }

  late final _PyLong_AsUnsignedLongLongMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<PyObject>)>>('PyLong_AsUnsignedLongLongMask');
  late final _PyLong_AsUnsignedLongLongMask = _PyLong_AsUnsignedLongLongMaskPtr
      .asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyLong_AsLongLongAndOverflow(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Int> arg1,
      ) {
    return _PyLong_AsLongLongAndOverflow(
      arg0,
      arg1,
    );
  }

  late final _PyLong_AsLongLongAndOverflowPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Int>)>>('PyLong_AsLongLongAndOverflow');
  late final _PyLong_AsLongLongAndOverflow = _PyLong_AsLongLongAndOverflowPtr
      .asFunction<int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<PyObject> PyLong_FromString(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
      int arg2,
      ) {
    return _PyLong_FromString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyLong_FromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('PyLong_FromString');
  late final _PyLong_FromString = _PyLong_FromStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int PyOS_strtoul(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
      int arg2,
      ) {
    return _PyOS_strtoul(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyOS_strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('PyOS_strtoul');
  late final _PyOS_strtoul = _PyOS_strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int PyOS_strtol(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
      int arg2,
      ) {
    return _PyOS_strtol(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyOS_strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('PyOS_strtol');
  late final _PyOS_strtol = _PyOS_strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  late final ffi.Pointer<PyTypeObject> _PyBool_Type =
  _lookup<PyTypeObject>('PyBool_Type');

  PyTypeObject get PyBool_Type => _PyBool_Type.ref;

  late final ffi.Pointer<PyLongObject> _Py_FalseStruct =
  _lookup<PyLongObject>('_Py_FalseStruct');

  PyLongObject get Py_FalseStruct => _Py_FalseStruct.ref;

  late final ffi.Pointer<PyLongObject> _Py_TrueStruct =
  _lookup<PyLongObject>('_Py_TrueStruct');

  PyLongObject get Py_TrueStruct => _Py_TrueStruct.ref;

  int Py_IsTrue(
      ffi.Pointer<PyObject> x,
      ) {
    return _Py_IsTrue(
      x,
    );
  }

  late final _Py_IsTruePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'Py_IsTrue');
  late final _Py_IsTrue =
  _Py_IsTruePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int Py_IsFalse(
      ffi.Pointer<PyObject> x,
      ) {
    return _Py_IsFalse(
      x,
    );
  }

  late final _Py_IsFalsePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'Py_IsFalse');
  late final _Py_IsFalse =
  _Py_IsFalsePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyBool_FromLong(
      int arg0,
      ) {
    return _PyBool_FromLong(
      arg0,
    );
  }

  late final _PyBool_FromLongPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(ffi.Long)>>(
      'PyBool_FromLong');
  late final _PyBool_FromLong =
  _PyBool_FromLongPtr.asFunction<ffi.Pointer<PyObject> Function(int)>();

  late final ffi.Pointer<PyTypeObject> _PyFloat_Type =
  _lookup<PyTypeObject>('PyFloat_Type');

  PyTypeObject get PyFloat_Type => _PyFloat_Type.ref;

  double PyFloat_GetMax() {
    return _PyFloat_GetMax();
  }

  late final _PyFloat_GetMaxPtr =
  _lookup<ffi.NativeFunction<ffi.Double Function()>>('PyFloat_GetMax');
  late final _PyFloat_GetMax =
  _PyFloat_GetMaxPtr.asFunction<double Function()>();

  double PyFloat_GetMin() {
    return _PyFloat_GetMin();
  }

  late final _PyFloat_GetMinPtr =
  _lookup<ffi.NativeFunction<ffi.Double Function()>>('PyFloat_GetMin');
  late final _PyFloat_GetMin =
  _PyFloat_GetMinPtr.asFunction<double Function()>();

  ffi.Pointer<PyObject> PyFloat_GetInfo() {
    return _PyFloat_GetInfo();
  }

  late final _PyFloat_GetInfoPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyFloat_GetInfo');
  late final _PyFloat_GetInfo =
  _PyFloat_GetInfoPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  ffi.Pointer<PyObject> PyFloat_FromString(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyFloat_FromString(
      arg0,
    );
  }

  late final _PyFloat_FromStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyFloat_FromString');
  late final _PyFloat_FromString = _PyFloat_FromStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyFloat_FromDouble(
      double arg0,
      ) {
    return _PyFloat_FromDouble(
      arg0,
    );
  }

  late final _PyFloat_FromDoublePtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(ffi.Double)>>(
      'PyFloat_FromDouble');
  late final _PyFloat_FromDouble = _PyFloat_FromDoublePtr.asFunction<
      ffi.Pointer<PyObject> Function(double)>();

  double PyFloat_AsDouble(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyFloat_AsDouble(
      arg0,
    );
  }

  late final _PyFloat_AsDoublePtr =
  _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PyObject>)>>(
      'PyFloat_AsDouble');
  late final _PyFloat_AsDouble =
  _PyFloat_AsDoublePtr.asFunction<double Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyComplex_Type =
  _lookup<PyTypeObject>('PyComplex_Type');

  PyTypeObject get PyComplex_Type => _PyComplex_Type.ref;

  ffi.Pointer<PyObject> PyComplex_FromDoubles(
      double real,
      double imag,
      ) {
    return _PyComplex_FromDoubles(
      real,
      imag,
    );
  }

  late final _PyComplex_FromDoublesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Double, ffi.Double)>>('PyComplex_FromDoubles');
  late final _PyComplex_FromDoubles = _PyComplex_FromDoublesPtr.asFunction<
      ffi.Pointer<PyObject> Function(double, double)>();

  double PyComplex_RealAsDouble(
      ffi.Pointer<PyObject> op,
      ) {
    return _PyComplex_RealAsDouble(
      op,
    );
  }

  late final _PyComplex_RealAsDoublePtr =
  _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PyObject>)>>(
      'PyComplex_RealAsDouble');
  late final _PyComplex_RealAsDouble = _PyComplex_RealAsDoublePtr.asFunction<
      double Function(ffi.Pointer<PyObject>)>();

  double PyComplex_ImagAsDouble(
      ffi.Pointer<PyObject> op,
      ) {
    return _PyComplex_ImagAsDouble(
      op,
    );
  }

  late final _PyComplex_ImagAsDoublePtr =
  _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PyObject>)>>(
      'PyComplex_ImagAsDouble');
  late final _PyComplex_ImagAsDouble = _PyComplex_ImagAsDoublePtr.asFunction<
      double Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyRange_Type =
  _lookup<PyTypeObject>('PyRange_Type');

  PyTypeObject get PyRange_Type => _PyRange_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyRangeIter_Type =
  _lookup<PyTypeObject>('PyRangeIter_Type');

  PyTypeObject get PyRangeIter_Type => _PyRangeIter_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyLongRangeIter_Type =
  _lookup<PyTypeObject>('PyLongRangeIter_Type');

  PyTypeObject get PyLongRangeIter_Type => _PyLongRangeIter_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyManagedBuffer_Type =
  _lookup<PyTypeObject>('_PyManagedBuffer_Type');

  PyTypeObject get PyManagedBuffer_Type => _PyManagedBuffer_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyMemoryView_Type =
  _lookup<PyTypeObject>('PyMemoryView_Type');

  PyTypeObject get PyMemoryView_Type => _PyMemoryView_Type.ref;

  ffi.Pointer<PyObject> PyMemoryView_FromObject(
      ffi.Pointer<PyObject> base,
      ) {
    return _PyMemoryView_FromObject(
      base,
    );
  }

  late final _PyMemoryView_FromObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyMemoryView_FromObject');
  late final _PyMemoryView_FromObject = _PyMemoryView_FromObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyMemoryView_FromMemory(
      ffi.Pointer<ffi.Char> mem,
      int size,
      int flags,
      ) {
    return _PyMemoryView_FromMemory(
      mem,
      size,
      flags,
    );
  }

  late final _PyMemoryView_FromMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, Py_ssize_t,
              ffi.Int)>>('PyMemoryView_FromMemory');
  late final _PyMemoryView_FromMemory = _PyMemoryView_FromMemoryPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<PyObject> PyMemoryView_FromBuffer(
      ffi.Pointer<Py_buffer> info,
      ) {
    return _PyMemoryView_FromBuffer(
      info,
    );
  }

  late final _PyMemoryView_FromBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<Py_buffer>)>>('PyMemoryView_FromBuffer');
  late final _PyMemoryView_FromBuffer = _PyMemoryView_FromBufferPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<Py_buffer>)>();

  ffi.Pointer<PyObject> PyMemoryView_GetContiguous(
      ffi.Pointer<PyObject> base,
      int buffertype,
      int order,
      ) {
    return _PyMemoryView_GetContiguous(
      base,
      buffertype,
      order,
    );
  }

  late final _PyMemoryView_GetContiguousPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, ffi.Int,
              ffi.Char)>>('PyMemoryView_GetContiguous');
  late final _PyMemoryView_GetContiguous =
  _PyMemoryView_GetContiguousPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int, int)>();

  late final ffi.Pointer<PyTypeObject> _PyTuple_Type =
  _lookup<PyTypeObject>('PyTuple_Type');

  PyTypeObject get PyTuple_Type => _PyTuple_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyTupleIter_Type =
  _lookup<PyTypeObject>('PyTupleIter_Type');

  PyTypeObject get PyTupleIter_Type => _PyTupleIter_Type.ref;

  ffi.Pointer<PyObject> PyTuple_New(
      int size,
      ) {
    return _PyTuple_New(
      size,
    );
  }

  late final _PyTuple_NewPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(Py_ssize_t)>>(
      'PyTuple_New');
  late final _PyTuple_New =
  _PyTuple_NewPtr.asFunction<ffi.Pointer<PyObject> Function(int)>();

  int PyTuple_Size(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyTuple_Size(
      arg0,
    );
  }

  late final _PyTuple_SizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyTuple_Size');
  late final _PyTuple_Size =
  _PyTuple_SizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyTuple_GetItem(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyTuple_GetItem(
      arg0,
      arg1,
    );
  }

  late final _PyTuple_GetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PyTuple_GetItem');
  late final _PyTuple_GetItem = _PyTuple_GetItemPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  int PyTuple_SetItem(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyTuple_SetItem(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyTuple_SetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t,
              ffi.Pointer<PyObject>)>>('PyTuple_SetItem');
  late final _PyTuple_SetItem = _PyTuple_SetItemPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyTuple_GetSlice(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      int arg2,
      ) {
    return _PyTuple_GetSlice(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyTuple_GetSlicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, Py_ssize_t,
              Py_ssize_t)>>('PyTuple_GetSlice');
  late final _PyTuple_GetSlice = _PyTuple_GetSlicePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int, int)>();

  ffi.Pointer<PyObject> PyTuple_Pack(
      int arg0,
      ) {
    return _PyTuple_Pack(
      arg0,
    );
  }

  late final _PyTuple_PackPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(Py_ssize_t)>>(
      'PyTuple_Pack');
  late final _PyTuple_Pack =
  _PyTuple_PackPtr.asFunction<ffi.Pointer<PyObject> Function(int)>();

  late final ffi.Pointer<PyTypeObject> _PyList_Type =
  _lookup<PyTypeObject>('PyList_Type');

  PyTypeObject get PyList_Type => _PyList_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyListIter_Type =
  _lookup<PyTypeObject>('PyListIter_Type');

  PyTypeObject get PyListIter_Type => _PyListIter_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyListRevIter_Type =
  _lookup<PyTypeObject>('PyListRevIter_Type');

  PyTypeObject get PyListRevIter_Type => _PyListRevIter_Type.ref;

  ffi.Pointer<PyObject> PyList_New(
      int size,
      ) {
    return _PyList_New(
      size,
    );
  }

  late final _PyList_NewPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function(Py_ssize_t)>>(
      'PyList_New');
  late final _PyList_New =
  _PyList_NewPtr.asFunction<ffi.Pointer<PyObject> Function(int)>();

  int PyList_Size(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyList_Size(
      arg0,
    );
  }

  late final _PyList_SizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyList_Size');
  late final _PyList_Size =
  _PyList_SizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyList_GetItem(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyList_GetItem(
      arg0,
      arg1,
    );
  }

  late final _PyList_GetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PyList_GetItem');
  late final _PyList_GetItem = _PyList_GetItemPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  int PyList_SetItem(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyList_SetItem(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyList_SetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t,
              ffi.Pointer<PyObject>)>>('PyList_SetItem');
  late final _PyList_SetItem = _PyList_SetItemPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, ffi.Pointer<PyObject>)>();

  int PyList_Insert(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyList_Insert(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyList_InsertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t,
              ffi.Pointer<PyObject>)>>('PyList_Insert');
  late final _PyList_Insert = _PyList_InsertPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, ffi.Pointer<PyObject>)>();

  int PyList_Append(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyList_Append(
      arg0,
      arg1,
    );
  }

  late final _PyList_AppendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyList_Append');
  late final _PyList_Append = _PyList_AppendPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyList_GetSlice(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      int arg2,
      ) {
    return _PyList_GetSlice(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyList_GetSlicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, Py_ssize_t,
              Py_ssize_t)>>('PyList_GetSlice');
  late final _PyList_GetSlice = _PyList_GetSlicePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int, int)>();

  int PyList_SetSlice(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      int arg2,
      ffi.Pointer<PyObject> arg3,
      ) {
    return _PyList_SetSlice(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyList_SetSlicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t, Py_ssize_t,
              ffi.Pointer<PyObject>)>>('PyList_SetSlice');
  late final _PyList_SetSlice = _PyList_SetSlicePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, int, ffi.Pointer<PyObject>)>();

  int PyList_Sort(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyList_Sort(
      arg0,
    );
  }

  late final _PyList_SortPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyList_Sort');
  late final _PyList_Sort =
  _PyList_SortPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyList_Reverse(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyList_Reverse(
      arg0,
    );
  }

  late final _PyList_ReversePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyList_Reverse');
  late final _PyList_Reverse =
  _PyList_ReversePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyList_AsTuple(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyList_AsTuple(
      arg0,
    );
  }

  late final _PyList_AsTuplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyList_AsTuple');
  late final _PyList_AsTuple = _PyList_AsTuplePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyDict_Type =
  _lookup<PyTypeObject>('PyDict_Type');

  PyTypeObject get PyDict_Type => _PyDict_Type.ref;

  ffi.Pointer<PyObject> PyDict_New() {
    return _PyDict_New();
  }

  late final _PyDict_NewPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyDict_New');
  late final _PyDict_New =
  _PyDict_NewPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  ffi.Pointer<PyObject> PyDict_GetItem(
      ffi.Pointer<PyObject> mp,
      ffi.Pointer<PyObject> key,
      ) {
    return _PyDict_GetItem(
      mp,
      key,
    );
  }

  late final _PyDict_GetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyDict_GetItem');
  late final _PyDict_GetItem = _PyDict_GetItemPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyDict_GetItemWithError(
      ffi.Pointer<PyObject> mp,
      ffi.Pointer<PyObject> key,
      ) {
    return _PyDict_GetItemWithError(
      mp,
      key,
    );
  }

  late final _PyDict_GetItemWithErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyDict_GetItemWithError');
  late final _PyDict_GetItemWithError = _PyDict_GetItemWithErrorPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyDict_SetItem(
      ffi.Pointer<PyObject> mp,
      ffi.Pointer<PyObject> key,
      ffi.Pointer<PyObject> item,
      ) {
    return _PyDict_SetItem(
      mp,
      key,
      item,
    );
  }

  late final _PyDict_SetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyDict_SetItem');
  late final _PyDict_SetItem = _PyDict_SetItemPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  int PyDict_DelItem(
      ffi.Pointer<PyObject> mp,
      ffi.Pointer<PyObject> key,
      ) {
    return _PyDict_DelItem(
      mp,
      key,
    );
  }

  late final _PyDict_DelItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyDict_DelItem');
  late final _PyDict_DelItem = _PyDict_DelItemPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  void PyDict_Clear(
      ffi.Pointer<PyObject> mp,
      ) {
    return _PyDict_Clear(
      mp,
    );
  }

  late final _PyDict_ClearPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      'PyDict_Clear');
  late final _PyDict_Clear =
  _PyDict_ClearPtr.asFunction<void Function(ffi.Pointer<PyObject>)>();

  int PyDict_Next(
      ffi.Pointer<PyObject> mp,
      ffi.Pointer<Py_ssize_t> pos,
      ffi.Pointer<ffi.Pointer<PyObject>> key,
      ffi.Pointer<ffi.Pointer<PyObject>> value,
      ) {
    return _PyDict_Next(
      mp,
      pos,
      key,
      value,
    );
  }

  late final _PyDict_NextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<ffi.Pointer<PyObject>>)>>('PyDict_Next');
  late final _PyDict_Next = _PyDict_NextPtr.asFunction<
      int Function(
          ffi.Pointer<PyObject>,
          ffi.Pointer<Py_ssize_t>,
          ffi.Pointer<ffi.Pointer<PyObject>>,
          ffi.Pointer<ffi.Pointer<PyObject>>)>();

  ffi.Pointer<PyObject> PyDict_Keys(
      ffi.Pointer<PyObject> mp,
      ) {
    return _PyDict_Keys(
      mp,
    );
  }

  late final _PyDict_KeysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyDict_Keys');
  late final _PyDict_Keys = _PyDict_KeysPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyDict_Values(
      ffi.Pointer<PyObject> mp,
      ) {
    return _PyDict_Values(
      mp,
    );
  }

  late final _PyDict_ValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyDict_Values');
  late final _PyDict_Values = _PyDict_ValuesPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyDict_Items(
      ffi.Pointer<PyObject> mp,
      ) {
    return _PyDict_Items(
      mp,
    );
  }

  late final _PyDict_ItemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyDict_Items');
  late final _PyDict_Items = _PyDict_ItemsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyDict_Size(
      ffi.Pointer<PyObject> mp,
      ) {
    return _PyDict_Size(
      mp,
    );
  }

  late final _PyDict_SizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyDict_Size');
  late final _PyDict_Size =
  _PyDict_SizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyDict_Copy(
      ffi.Pointer<PyObject> mp,
      ) {
    return _PyDict_Copy(
      mp,
    );
  }

  late final _PyDict_CopyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyDict_Copy');
  late final _PyDict_Copy = _PyDict_CopyPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyDict_Contains(
      ffi.Pointer<PyObject> mp,
      ffi.Pointer<PyObject> key,
      ) {
    return _PyDict_Contains(
      mp,
      key,
    );
  }

  late final _PyDict_ContainsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyDict_Contains');
  late final _PyDict_Contains = _PyDict_ContainsPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyDict_Update(
      ffi.Pointer<PyObject> mp,
      ffi.Pointer<PyObject> other,
      ) {
    return _PyDict_Update(
      mp,
      other,
    );
  }

  late final _PyDict_UpdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyDict_Update');
  late final _PyDict_Update = _PyDict_UpdatePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyDict_Merge(
      ffi.Pointer<PyObject> mp,
      ffi.Pointer<PyObject> other,
      int override,
      ) {
    return _PyDict_Merge(
      mp,
      other,
      override,
    );
  }

  late final _PyDict_MergePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Int)>>('PyDict_Merge');
  late final _PyDict_Merge = _PyDict_MergePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int)>();

  int PyDict_MergeFromSeq2(
      ffi.Pointer<PyObject> d,
      ffi.Pointer<PyObject> seq2,
      int override,
      ) {
    return _PyDict_MergeFromSeq2(
      d,
      seq2,
      override,
    );
  }

  late final _PyDict_MergeFromSeq2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Int)>>('PyDict_MergeFromSeq2');
  late final _PyDict_MergeFromSeq2 = _PyDict_MergeFromSeq2Ptr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> PyDict_GetItemString(
      ffi.Pointer<PyObject> dp,
      ffi.Pointer<ffi.Char> key,
      ) {
    return _PyDict_GetItemString(
      dp,
      key,
    );
  }

  late final _PyDict_GetItemStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyDict_GetItemString');
  late final _PyDict_GetItemString = _PyDict_GetItemStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyDict_SetItemString(
      ffi.Pointer<PyObject> dp,
      ffi.Pointer<ffi.Char> key,
      ffi.Pointer<PyObject> item,
      ) {
    return _PyDict_SetItemString(
      dp,
      key,
      item,
    );
  }

  late final _PyDict_SetItemStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PyDict_SetItemString');
  late final _PyDict_SetItemString = _PyDict_SetItemStringPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>)>();

  int PyDict_DelItemString(
      ffi.Pointer<PyObject> dp,
      ffi.Pointer<ffi.Char> key,
      ) {
    return _PyDict_DelItemString(
      dp,
      key,
    );
  }

  late final _PyDict_DelItemStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyDict_DelItemString');
  late final _PyDict_DelItemString = _PyDict_DelItemStringPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyObject_GenericGetDict(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Void> arg1,
      ) {
    return _PyObject_GenericGetDict(
      arg0,
      arg1,
    );
  }

  late final _PyObject_GenericGetDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Void>)>>('PyObject_GenericGetDict');
  late final _PyObject_GenericGetDict = _PyObject_GenericGetDictPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Void>)>();

  late final ffi.Pointer<PyTypeObject> _PyDictKeys_Type =
  _lookup<PyTypeObject>('PyDictKeys_Type');

  PyTypeObject get PyDictKeys_Type => _PyDictKeys_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyDictValues_Type =
  _lookup<PyTypeObject>('PyDictValues_Type');

  PyTypeObject get PyDictValues_Type => _PyDictValues_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyDictItems_Type =
  _lookup<PyTypeObject>('PyDictItems_Type');

  PyTypeObject get PyDictItems_Type => _PyDictItems_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyDictIterKey_Type =
  _lookup<PyTypeObject>('PyDictIterKey_Type');

  PyTypeObject get PyDictIterKey_Type => _PyDictIterKey_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyDictIterValue_Type =
  _lookup<PyTypeObject>('PyDictIterValue_Type');

  PyTypeObject get PyDictIterValue_Type => _PyDictIterValue_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyDictIterItem_Type =
  _lookup<PyTypeObject>('PyDictIterItem_Type');

  PyTypeObject get PyDictIterItem_Type => _PyDictIterItem_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyDictRevIterKey_Type =
  _lookup<PyTypeObject>('PyDictRevIterKey_Type');

  PyTypeObject get PyDictRevIterKey_Type => _PyDictRevIterKey_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyDictRevIterItem_Type =
  _lookup<PyTypeObject>('PyDictRevIterItem_Type');

  PyTypeObject get PyDictRevIterItem_Type => _PyDictRevIterItem_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyDictRevIterValue_Type =
  _lookup<PyTypeObject>('PyDictRevIterValue_Type');

  PyTypeObject get PyDictRevIterValue_Type => _PyDictRevIterValue_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyEnum_Type =
  _lookup<PyTypeObject>('PyEnum_Type');

  PyTypeObject get PyEnum_Type => _PyEnum_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyReversed_Type =
  _lookup<PyTypeObject>('PyReversed_Type');

  PyTypeObject get PyReversed_Type => _PyReversed_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PySet_Type =
  _lookup<PyTypeObject>('PySet_Type');

  PyTypeObject get PySet_Type => _PySet_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyFrozenSet_Type =
  _lookup<PyTypeObject>('PyFrozenSet_Type');

  PyTypeObject get PyFrozenSet_Type => _PyFrozenSet_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PySetIter_Type =
  _lookup<PyTypeObject>('PySetIter_Type');

  PyTypeObject get PySetIter_Type => _PySetIter_Type.ref;

  ffi.Pointer<PyObject> PySet_New(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PySet_New(
      arg0,
    );
  }

  late final _PySet_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>>('PySet_New');
  late final _PySet_New = _PySet_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyFrozenSet_New(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyFrozenSet_New(
      arg0,
    );
  }

  late final _PyFrozenSet_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyFrozenSet_New');
  late final _PyFrozenSet_New = _PyFrozenSet_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PySet_Add(
      ffi.Pointer<PyObject> set1,
      ffi.Pointer<PyObject> key,
      ) {
    return _PySet_Add(
      set1,
      key,
    );
  }

  late final _PySet_AddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PySet_Add');
  late final _PySet_Add = _PySet_AddPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PySet_Clear(
      ffi.Pointer<PyObject> set1,
      ) {
    return _PySet_Clear(
      set1,
    );
  }

  late final _PySet_ClearPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PySet_Clear');
  late final _PySet_Clear =
  _PySet_ClearPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PySet_Contains(
      ffi.Pointer<PyObject> anyset,
      ffi.Pointer<PyObject> key,
      ) {
    return _PySet_Contains(
      anyset,
      key,
    );
  }

  late final _PySet_ContainsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PySet_Contains');
  late final _PySet_Contains = _PySet_ContainsPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PySet_Discard(
      ffi.Pointer<PyObject> set1,
      ffi.Pointer<PyObject> key,
      ) {
    return _PySet_Discard(
      set1,
      key,
    );
  }

  late final _PySet_DiscardPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PySet_Discard');
  late final _PySet_Discard = _PySet_DiscardPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PySet_Pop(
      ffi.Pointer<PyObject> set1,
      ) {
    return _PySet_Pop(
      set1,
    );
  }

  late final _PySet_PopPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>>('PySet_Pop');
  late final _PySet_Pop = _PySet_PopPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PySet_Size(
      ffi.Pointer<PyObject> anyset,
      ) {
    return _PySet_Size(
      anyset,
    );
  }

  late final _PySet_SizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PySet_Size');
  late final _PySet_Size =
  _PySet_SizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyCFunction_Type =
  _lookup<PyTypeObject>('PyCFunction_Type');

  PyTypeObject get PyCFunction_Type => _PyCFunction_Type.ref;

  PyCFunction PyCFunction_GetFunction(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyCFunction_GetFunction(
      arg0,
    );
  }

  late final _PyCFunction_GetFunctionPtr =
  _lookup<ffi.NativeFunction<PyCFunction Function(ffi.Pointer<PyObject>)>>(
      'PyCFunction_GetFunction');
  late final _PyCFunction_GetFunction = _PyCFunction_GetFunctionPtr.asFunction<
      PyCFunction Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCFunction_GetSelf(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyCFunction_GetSelf(
      arg0,
    );
  }

  late final _PyCFunction_GetSelfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyCFunction_GetSelf');
  late final _PyCFunction_GetSelf = _PyCFunction_GetSelfPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyCFunction_GetFlags(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyCFunction_GetFlags(
      arg0,
    );
  }

  late final _PyCFunction_GetFlagsPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyCFunction_GetFlags');
  late final _PyCFunction_GetFlags = _PyCFunction_GetFlagsPtr.asFunction<
      int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCFunction_Call(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyCFunction_Call(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyCFunction_CallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyCFunction_Call');
  late final _PyCFunction_Call = _PyCFunction_CallPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCFunction_New(
      ffi.Pointer<PyMethodDef> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyCFunction_New(
      arg0,
      arg1,
    );
  }

  late final _PyCFunction_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyMethodDef>,
              ffi.Pointer<PyObject>)>>('PyCFunction_New');
  late final _PyCFunction_New = _PyCFunction_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyMethodDef>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCFunction_NewEx(
      ffi.Pointer<PyMethodDef> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyCFunction_NewEx(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyCFunction_NewExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyMethodDef>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyCFunction_NewEx');
  late final _PyCFunction_NewEx = _PyCFunction_NewExPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyMethodDef>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCMethod_New(
      ffi.Pointer<PyMethodDef> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ffi.Pointer<PyTypeObject> arg3,
      ) {
    return _PyCMethod_New(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyCMethod_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyMethodDef>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyTypeObject>)>>('PyCMethod_New');
  late final _PyCMethod_New = _PyCMethod_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyMethodDef>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyTypeObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyModule_Type =
  _lookup<PyTypeObject>('PyModule_Type');

  PyTypeObject get PyModule_Type => _PyModule_Type.ref;

  ffi.Pointer<PyObject> PyModule_NewObject(
      ffi.Pointer<PyObject> name,
      ) {
    return _PyModule_NewObject(
      name,
    );
  }

  late final _PyModule_NewObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyModule_NewObject');
  late final _PyModule_NewObject = _PyModule_NewObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyModule_New(
      ffi.Pointer<ffi.Char> name,
      ) {
    return _PyModule_New(
      name,
    );
  }

  late final _PyModule_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyModule_New');
  late final _PyModule_New = _PyModule_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyModule_GetDict(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyModule_GetDict(
      arg0,
    );
  }

  late final _PyModule_GetDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyModule_GetDict');
  late final _PyModule_GetDict = _PyModule_GetDictPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyModule_GetNameObject(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyModule_GetNameObject(
      arg0,
    );
  }

  late final _PyModule_GetNameObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyModule_GetNameObject');
  late final _PyModule_GetNameObject = _PyModule_GetNameObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Char> PyModule_GetName(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyModule_GetName(
      arg0,
    );
  }

  late final _PyModule_GetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PyObject>)>>('PyModule_GetName');
  late final _PyModule_GetName = _PyModule_GetNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Char> PyModule_GetFilename(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyModule_GetFilename(
      arg0,
    );
  }

  late final _PyModule_GetFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PyObject>)>>('PyModule_GetFilename');
  late final _PyModule_GetFilename = _PyModule_GetFilenamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyModule_GetFilenameObject(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyModule_GetFilenameObject(
      arg0,
    );
  }

  late final _PyModule_GetFilenameObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyModule_GetFilenameObject');
  late final _PyModule_GetFilenameObject = _PyModule_GetFilenameObjectPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  void _PyModule_Clear(
      ffi.Pointer<PyObject> arg0,
      ) {
    return __PyModule_Clear(
      arg0,
    );
  }

  late final __PyModule_ClearPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      '_PyModule_Clear');
  late final __PyModule_Clear =
  __PyModule_ClearPtr.asFunction<void Function(ffi.Pointer<PyObject>)>();

  void _PyModule_ClearDict(
      ffi.Pointer<PyObject> arg0,
      ) {
    return __PyModule_ClearDict(
      arg0,
    );
  }

  late final __PyModule_ClearDictPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      '_PyModule_ClearDict');
  late final __PyModule_ClearDict = __PyModule_ClearDictPtr
      .asFunction<void Function(ffi.Pointer<PyObject>)>();

  int _PyModuleSpec_IsInitializing(
      ffi.Pointer<PyObject> arg0,
      ) {
    return __PyModuleSpec_IsInitializing(
      arg0,
    );
  }

  late final __PyModuleSpec_IsInitializingPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      '_PyModuleSpec_IsInitializing');
  late final __PyModuleSpec_IsInitializing = __PyModuleSpec_IsInitializingPtr
      .asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyModuleDef> PyModule_GetDef(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyModule_GetDef(
      arg0,
    );
  }

  late final _PyModule_GetDefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyModuleDef> Function(
              ffi.Pointer<PyObject>)>>('PyModule_GetDef');
  late final _PyModule_GetDef = _PyModule_GetDefPtr.asFunction<
      ffi.Pointer<PyModuleDef> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Void> PyModule_GetState(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyModule_GetState(
      arg0,
    );
  }

  late final _PyModule_GetStatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<PyObject>)>>('PyModule_GetState');
  late final _PyModule_GetState = _PyModule_GetStatePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyModuleDef_Init(
      ffi.Pointer<PyModuleDef> arg0,
      ) {
    return _PyModuleDef_Init(
      arg0,
    );
  }

  late final _PyModuleDef_InitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyModuleDef>)>>('PyModuleDef_Init');
  late final _PyModuleDef_Init = _PyModuleDef_InitPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyModuleDef>)>();

  late final ffi.Pointer<PyTypeObject> _PyModuleDef_Type =
  _lookup<PyTypeObject>('PyModuleDef_Type');

  PyTypeObject get PyModuleDef_Type => _PyModuleDef_Type.ref;

  ffi.Pointer<PyObject> PyFile_FromFd(
      int arg0,
      ffi.Pointer<ffi.Char> arg1,
      ffi.Pointer<ffi.Char> arg2,
      int arg3,
      ffi.Pointer<ffi.Char> arg4,
      ffi.Pointer<ffi.Char> arg5,
      ffi.Pointer<ffi.Char> arg6,
      int arg7,
      ) {
    return _PyFile_FromFd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _PyFile_FromFdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int)>>('PyFile_FromFd');
  late final _PyFile_FromFd = _PyFile_FromFdPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int)>();

  ffi.Pointer<PyObject> PyFile_GetLine(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyFile_GetLine(
      arg0,
      arg1,
    );
  }

  late final _PyFile_GetLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Int)>>('PyFile_GetLine');
  late final _PyFile_GetLine = _PyFile_GetLinePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  int PyFile_WriteObject(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      int arg2,
      ) {
    return _PyFile_WriteObject(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyFile_WriteObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Int)>>('PyFile_WriteObject');
  late final _PyFile_WriteObject = _PyFile_WriteObjectPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>, int)>();

  int PyFile_WriteString(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyFile_WriteString(
      arg0,
      arg1,
    );
  }

  late final _PyFile_WriteStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PyFile_WriteString');
  late final _PyFile_WriteString = _PyFile_WriteStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<PyObject>)>();

  int PyObject_AsFileDescriptor(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_AsFileDescriptor(
      arg0,
    );
  }

  late final _PyObject_AsFileDescriptorPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyObject_AsFileDescriptor');
  late final _PyObject_AsFileDescriptor = _PyObject_AsFileDescriptorPtr
      .asFunction<int Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _Py_FileSystemDefaultEncoding =
  _lookup<ffi.Pointer<ffi.Char>>('Py_FileSystemDefaultEncoding');

  ffi.Pointer<ffi.Char> get Py_FileSystemDefaultEncoding =>
      _Py_FileSystemDefaultEncoding.value;

  set Py_FileSystemDefaultEncoding(ffi.Pointer<ffi.Char> value) =>
      _Py_FileSystemDefaultEncoding.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Char>>
  _Py_FileSystemDefaultEncodeErrors =
  _lookup<ffi.Pointer<ffi.Char>>('Py_FileSystemDefaultEncodeErrors');

  ffi.Pointer<ffi.Char> get Py_FileSystemDefaultEncodeErrors =>
      _Py_FileSystemDefaultEncodeErrors.value;

  set Py_FileSystemDefaultEncodeErrors(ffi.Pointer<ffi.Char> value) =>
      _Py_FileSystemDefaultEncodeErrors.value = value;

  late final ffi.Pointer<ffi.Int> _Py_HasFileSystemDefaultEncoding =
  _lookup<ffi.Int>('Py_HasFileSystemDefaultEncoding');

  int get Py_HasFileSystemDefaultEncoding =>
      _Py_HasFileSystemDefaultEncoding.value;

  set Py_HasFileSystemDefaultEncoding(int value) =>
      _Py_HasFileSystemDefaultEncoding.value = value;

  late final ffi.Pointer<ffi.Int> _Py_UTF8Mode =
  _lookup<ffi.Int>('Py_UTF8Mode');

  int get Py_UTF8Mode => _Py_UTF8Mode.value;

  set Py_UTF8Mode(int value) => _Py_UTF8Mode.value = value;

  late final ffi.Pointer<PyTypeObject> _PyCapsule_Type =
  _lookup<PyTypeObject>('PyCapsule_Type');

  PyTypeObject get PyCapsule_Type => _PyCapsule_Type.ref;

  ffi.Pointer<PyObject> PyCapsule_New(
      ffi.Pointer<ffi.Void> pointer,
      ffi.Pointer<ffi.Char> name,
      PyCapsule_Destructor destructor,
      ) {
    return _PyCapsule_New(
      pointer,
      name,
      destructor,
    );
  }

  late final _PyCapsule_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Char>, PyCapsule_Destructor)>>('PyCapsule_New');
  late final _PyCapsule_New = _PyCapsule_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Char>, PyCapsule_Destructor)>();

  ffi.Pointer<ffi.Void> PyCapsule_GetPointer(
      ffi.Pointer<PyObject> capsule,
      ffi.Pointer<ffi.Char> name,
      ) {
    return _PyCapsule_GetPointer(
      capsule,
      name,
    );
  }

  late final _PyCapsule_GetPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyCapsule_GetPointer');
  late final _PyCapsule_GetPointer = _PyCapsule_GetPointerPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  PyCapsule_Destructor PyCapsule_GetDestructor(
      ffi.Pointer<PyObject> capsule,
      ) {
    return _PyCapsule_GetDestructor(
      capsule,
    );
  }

  late final _PyCapsule_GetDestructorPtr = _lookup<
      ffi.NativeFunction<
          PyCapsule_Destructor Function(
              ffi.Pointer<PyObject>)>>('PyCapsule_GetDestructor');
  late final _PyCapsule_GetDestructor = _PyCapsule_GetDestructorPtr.asFunction<
      PyCapsule_Destructor Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Char> PyCapsule_GetName(
      ffi.Pointer<PyObject> capsule,
      ) {
    return _PyCapsule_GetName(
      capsule,
    );
  }

  late final _PyCapsule_GetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PyObject>)>>('PyCapsule_GetName');
  late final _PyCapsule_GetName = _PyCapsule_GetNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Void> PyCapsule_GetContext(
      ffi.Pointer<PyObject> capsule,
      ) {
    return _PyCapsule_GetContext(
      capsule,
    );
  }

  late final _PyCapsule_GetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<PyObject>)>>('PyCapsule_GetContext');
  late final _PyCapsule_GetContext = _PyCapsule_GetContextPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<PyObject>)>();

  int PyCapsule_IsValid(
      ffi.Pointer<PyObject> capsule,
      ffi.Pointer<ffi.Char> name,
      ) {
    return _PyCapsule_IsValid(
      capsule,
      name,
    );
  }

  late final _PyCapsule_IsValidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyCapsule_IsValid');
  late final _PyCapsule_IsValid = _PyCapsule_IsValidPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyCapsule_SetPointer(
      ffi.Pointer<PyObject> capsule,
      ffi.Pointer<ffi.Void> pointer,
      ) {
    return _PyCapsule_SetPointer(
      capsule,
      pointer,
    );
  }

  late final _PyCapsule_SetPointerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Void>)>>('PyCapsule_SetPointer');
  late final _PyCapsule_SetPointer = _PyCapsule_SetPointerPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Void>)>();

  int PyCapsule_SetDestructor(
      ffi.Pointer<PyObject> capsule,
      PyCapsule_Destructor destructor,
      ) {
    return _PyCapsule_SetDestructor(
      capsule,
      destructor,
    );
  }

  late final _PyCapsule_SetDestructorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              PyCapsule_Destructor)>>('PyCapsule_SetDestructor');
  late final _PyCapsule_SetDestructor = _PyCapsule_SetDestructorPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, PyCapsule_Destructor)>();

  int PyCapsule_SetName(
      ffi.Pointer<PyObject> capsule,
      ffi.Pointer<ffi.Char> name,
      ) {
    return _PyCapsule_SetName(
      capsule,
      name,
    );
  }

  late final _PyCapsule_SetNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyCapsule_SetName');
  late final _PyCapsule_SetName = _PyCapsule_SetNamePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyCapsule_SetContext(
      ffi.Pointer<PyObject> capsule,
      ffi.Pointer<ffi.Void> context,
      ) {
    return _PyCapsule_SetContext(
      capsule,
      context,
    );
  }

  late final _PyCapsule_SetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Void>)>>('PyCapsule_SetContext');
  late final _PyCapsule_SetContext = _PyCapsule_SetContextPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> PyCapsule_Import(
      ffi.Pointer<ffi.Char> name,
      int no_block,
      ) {
    return _PyCapsule_Import(
      name,
      no_block,
    );
  }

  late final _PyCapsule_ImportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('PyCapsule_Import');
  late final _PyCapsule_Import = _PyCapsule_ImportPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>, int)>();

  int PyFrame_GetLineNumber(
      ffi.Pointer<PyFrameObject> arg0,
      ) {
    return _PyFrame_GetLineNumber(
      arg0,
    );
  }

  late final _PyFrame_GetLineNumberPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyFrameObject>)>>(
      'PyFrame_GetLineNumber');
  late final _PyFrame_GetLineNumber = _PyFrame_GetLineNumberPtr.asFunction<
      int Function(ffi.Pointer<PyFrameObject>)>();

  ffi.Pointer<PyCodeObject> PyFrame_GetCode(
      ffi.Pointer<PyFrameObject> frame,
      ) {
    return _PyFrame_GetCode(
      frame,
    );
  }

  late final _PyFrame_GetCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyCodeObject> Function(
              ffi.Pointer<PyFrameObject>)>>('PyFrame_GetCode');
  late final _PyFrame_GetCode = _PyFrame_GetCodePtr.asFunction<
      ffi.Pointer<PyCodeObject> Function(ffi.Pointer<PyFrameObject>)>();

  int PyTraceBack_Here(
      ffi.Pointer<PyFrameObject> arg0,
      ) {
    return _PyTraceBack_Here(
      arg0,
    );
  }

  late final _PyTraceBack_HerePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyFrameObject>)>>(
      'PyTraceBack_Here');
  late final _PyTraceBack_Here = _PyTraceBack_HerePtr.asFunction<
      int Function(ffi.Pointer<PyFrameObject>)>();

  int PyTraceBack_Print(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyTraceBack_Print(
      arg0,
      arg1,
    );
  }

  late final _PyTraceBack_PrintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyTraceBack_Print');
  late final _PyTraceBack_Print = _PyTraceBack_PrintPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyTraceBack_Type =
  _lookup<PyTypeObject>('PyTraceBack_Type');

  PyTypeObject get PyTraceBack_Type => _PyTraceBack_Type.ref;

  late final ffi.Pointer<PyObject> _Py_EllipsisObject =
  _lookup<PyObject>('_Py_EllipsisObject');

  PyObject get Py_EllipsisObject => _Py_EllipsisObject.ref;

  late final ffi.Pointer<PyTypeObject> _PySlice_Type =
  _lookup<PyTypeObject>('PySlice_Type');

  PyTypeObject get PySlice_Type => _PySlice_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyEllipsis_Type =
  _lookup<PyTypeObject>('PyEllipsis_Type');

  PyTypeObject get PyEllipsis_Type => _PyEllipsis_Type.ref;

  ffi.Pointer<PyObject> PySlice_New(
      ffi.Pointer<PyObject> start,
      ffi.Pointer<PyObject> stop,
      ffi.Pointer<PyObject> step,
      ) {
    return _PySlice_New(
      start,
      stop,
      step,
    );
  }

  late final _PySlice_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PySlice_New');
  late final _PySlice_New = _PySlice_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> _PySlice_FromIndices(
      int start,
      int stop,
      ) {
    return __PySlice_FromIndices(
      start,
      stop,
    );
  }

  late final __PySlice_FromIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              Py_ssize_t, Py_ssize_t)>>('_PySlice_FromIndices');
  late final __PySlice_FromIndices = __PySlice_FromIndicesPtr
      .asFunction<ffi.Pointer<PyObject> Function(int, int)>();

  int _PySlice_GetLongIndices(
      ffi.Pointer<PySliceObject> self,
      ffi.Pointer<PyObject> length,
      ffi.Pointer<ffi.Pointer<PyObject>> start_ptr,
      ffi.Pointer<ffi.Pointer<PyObject>> stop_ptr,
      ffi.Pointer<ffi.Pointer<PyObject>> step_ptr,
      ) {
    return __PySlice_GetLongIndices(
      self,
      length,
      start_ptr,
      stop_ptr,
      step_ptr,
    );
  }

  late final __PySlice_GetLongIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PySliceObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<ffi.Pointer<PyObject>>)>>('_PySlice_GetLongIndices');
  late final __PySlice_GetLongIndices = __PySlice_GetLongIndicesPtr.asFunction<
      int Function(
          ffi.Pointer<PySliceObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Pointer<PyObject>>,
          ffi.Pointer<ffi.Pointer<PyObject>>,
          ffi.Pointer<ffi.Pointer<PyObject>>)>();

  int PySlice_GetIndices(
      ffi.Pointer<PyObject> r,
      int length,
      ffi.Pointer<Py_ssize_t> start,
      ffi.Pointer<Py_ssize_t> stop,
      ffi.Pointer<Py_ssize_t> step,
      ) {
    return _PySlice_GetIndices(
      r,
      length,
      start,
      stop,
      step,
    );
  }

  late final _PySlice_GetIndicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              Py_ssize_t,
              ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<Py_ssize_t>)>>('PySlice_GetIndices');
  late final _PySlice_GetIndices = _PySlice_GetIndicesPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, ffi.Pointer<Py_ssize_t>,
          ffi.Pointer<Py_ssize_t>, ffi.Pointer<Py_ssize_t>)>();

  int PySlice_GetIndicesEx(
      ffi.Pointer<PyObject> r,
      int length,
      ffi.Pointer<Py_ssize_t> start,
      ffi.Pointer<Py_ssize_t> stop,
      ffi.Pointer<Py_ssize_t> step,
      ffi.Pointer<Py_ssize_t> slicelength,
      ) {
    return _PySlice_GetIndicesEx(
      r,
      length,
      start,
      stop,
      step,
      slicelength,
    );
  }

  late final _PySlice_GetIndicesExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              Py_ssize_t,
              ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<Py_ssize_t>)>>('PySlice_GetIndicesEx');
  late final _PySlice_GetIndicesEx = _PySlice_GetIndicesExPtr.asFunction<
      int Function(
          ffi.Pointer<PyObject>,
          int,
          ffi.Pointer<Py_ssize_t>,
          ffi.Pointer<Py_ssize_t>,
          ffi.Pointer<Py_ssize_t>,
          ffi.Pointer<Py_ssize_t>)>();

  int PySlice_Unpack(
      ffi.Pointer<PyObject> slice,
      ffi.Pointer<Py_ssize_t> start,
      ffi.Pointer<Py_ssize_t> stop,
      ffi.Pointer<Py_ssize_t> step,
      ) {
    return _PySlice_Unpack(
      slice,
      start,
      stop,
      step,
    );
  }

  late final _PySlice_UnpackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<Py_ssize_t>)>>('PySlice_Unpack');
  late final _PySlice_Unpack = _PySlice_UnpackPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<Py_ssize_t>,
          ffi.Pointer<Py_ssize_t>, ffi.Pointer<Py_ssize_t>)>();

  int PySlice_AdjustIndices(
      int length,
      ffi.Pointer<Py_ssize_t> start,
      ffi.Pointer<Py_ssize_t> stop,
      int step,
      ) {
    return _PySlice_AdjustIndices(
      length,
      start,
      stop,
      step,
    );
  }

  late final _PySlice_AdjustIndicesPtr = _lookup<
      ffi.NativeFunction<
          Py_ssize_t Function(Py_ssize_t, ffi.Pointer<Py_ssize_t>,
              ffi.Pointer<Py_ssize_t>, Py_ssize_t)>>('PySlice_AdjustIndices');
  late final _PySlice_AdjustIndices = _PySlice_AdjustIndicesPtr.asFunction<
      int Function(
          int, ffi.Pointer<Py_ssize_t>, ffi.Pointer<Py_ssize_t>, int)>();

  late final ffi.Pointer<PyTypeObject> _PySeqIter_Type =
  _lookup<PyTypeObject>('PySeqIter_Type');

  PyTypeObject get PySeqIter_Type => _PySeqIter_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyCallIter_Type =
  _lookup<PyTypeObject>('PyCallIter_Type');

  PyTypeObject get PyCallIter_Type => _PyCallIter_Type.ref;

  ffi.Pointer<PyObject> PySeqIter_New(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PySeqIter_New(
      arg0,
    );
  }

  late final _PySeqIter_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PySeqIter_New');
  late final _PySeqIter_New = _PySeqIter_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCallIter_New(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyCallIter_New(
      arg0,
      arg1,
    );
  }

  late final _PyCallIter_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyCallIter_New');
  late final _PyCallIter_New = _PyCallIter_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyInterpreterState> PyInterpreterState_New() {
    return _PyInterpreterState_New();
  }

  late final _PyInterpreterState_NewPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyInterpreterState> Function()>>(
      'PyInterpreterState_New');
  late final _PyInterpreterState_New = _PyInterpreterState_NewPtr.asFunction<
      ffi.Pointer<PyInterpreterState> Function()>();

  void PyInterpreterState_Clear(
      ffi.Pointer<PyInterpreterState> arg0,
      ) {
    return _PyInterpreterState_Clear(
      arg0,
    );
  }

  late final _PyInterpreterState_ClearPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PyInterpreterState>)>>('PyInterpreterState_Clear');
  late final _PyInterpreterState_Clear = _PyInterpreterState_ClearPtr
      .asFunction<void Function(ffi.Pointer<PyInterpreterState>)>();

  void PyInterpreterState_Delete(
      ffi.Pointer<PyInterpreterState> arg0,
      ) {
    return _PyInterpreterState_Delete(
      arg0,
    );
  }

  late final _PyInterpreterState_DeletePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PyInterpreterState>)>>('PyInterpreterState_Delete');
  late final _PyInterpreterState_Delete = _PyInterpreterState_DeletePtr
      .asFunction<void Function(ffi.Pointer<PyInterpreterState>)>();

  ffi.Pointer<PyInterpreterState> PyInterpreterState_Get() {
    return _PyInterpreterState_Get();
  }

  late final _PyInterpreterState_GetPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyInterpreterState> Function()>>(
      'PyInterpreterState_Get');
  late final _PyInterpreterState_Get = _PyInterpreterState_GetPtr.asFunction<
      ffi.Pointer<PyInterpreterState> Function()>();

  ffi.Pointer<PyObject> PyInterpreterState_GetDict(
      ffi.Pointer<PyInterpreterState> arg0,
      ) {
    return _PyInterpreterState_GetDict(
      arg0,
    );
  }

  late final _PyInterpreterState_GetDictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyInterpreterState>)>>('PyInterpreterState_GetDict');
  late final _PyInterpreterState_GetDict =
  _PyInterpreterState_GetDictPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyInterpreterState>)>();

  int PyInterpreterState_GetID(
      ffi.Pointer<PyInterpreterState> arg0,
      ) {
    return _PyInterpreterState_GetID(
      arg0,
    );
  }

  late final _PyInterpreterState_GetIDPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<PyInterpreterState>)>>('PyInterpreterState_GetID');
  late final _PyInterpreterState_GetID = _PyInterpreterState_GetIDPtr
      .asFunction<int Function(ffi.Pointer<PyInterpreterState>)>();

  int PyState_AddModule(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyModuleDef> arg1,
      ) {
    return _PyState_AddModule(
      arg0,
      arg1,
    );
  }

  late final _PyState_AddModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyModuleDef>)>>('PyState_AddModule');
  late final _PyState_AddModule = _PyState_AddModulePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyModuleDef>)>();

  int PyState_RemoveModule(
      ffi.Pointer<PyModuleDef> arg0,
      ) {
    return _PyState_RemoveModule(
      arg0,
    );
  }

  late final _PyState_RemoveModulePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyModuleDef>)>>(
      'PyState_RemoveModule');
  late final _PyState_RemoveModule = _PyState_RemoveModulePtr.asFunction<
      int Function(ffi.Pointer<PyModuleDef>)>();

  ffi.Pointer<PyObject> PyState_FindModule(
      ffi.Pointer<PyModuleDef> arg0,
      ) {
    return _PyState_FindModule(
      arg0,
    );
  }

  late final _PyState_FindModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyModuleDef>)>>('PyState_FindModule');
  late final _PyState_FindModule = _PyState_FindModulePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyModuleDef>)>();

  ffi.Pointer<PyThreadState> PyThreadState_New(
      ffi.Pointer<PyInterpreterState> arg0,
      ) {
    return _PyThreadState_New(
      arg0,
    );
  }

  late final _PyThreadState_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyThreadState> Function(
              ffi.Pointer<PyInterpreterState>)>>('PyThreadState_New');
  late final _PyThreadState_New = _PyThreadState_NewPtr.asFunction<
      ffi.Pointer<PyThreadState> Function(ffi.Pointer<PyInterpreterState>)>();

  void PyThreadState_Clear(
      ffi.Pointer<PyThreadState> arg0,
      ) {
    return _PyThreadState_Clear(
      arg0,
    );
  }

  late final _PyThreadState_ClearPtr = _lookup<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyThreadState>)>>(
      'PyThreadState_Clear');
  late final _PyThreadState_Clear = _PyThreadState_ClearPtr.asFunction<
      void Function(ffi.Pointer<PyThreadState>)>();

  void PyThreadState_Delete(
      ffi.Pointer<PyThreadState> arg0,
      ) {
    return _PyThreadState_Delete(
      arg0,
    );
  }

  late final _PyThreadState_DeletePtr = _lookup<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyThreadState>)>>(
      'PyThreadState_Delete');
  late final _PyThreadState_Delete = _PyThreadState_DeletePtr.asFunction<
      void Function(ffi.Pointer<PyThreadState>)>();

  ffi.Pointer<PyThreadState> PyThreadState_Get() {
    return _PyThreadState_Get();
  }

  late final _PyThreadState_GetPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyThreadState> Function()>>(
      'PyThreadState_Get');
  late final _PyThreadState_Get =
  _PyThreadState_GetPtr.asFunction<ffi.Pointer<PyThreadState> Function()>();

  ffi.Pointer<PyThreadState> PyThreadState_Swap(
      ffi.Pointer<PyThreadState> arg0,
      ) {
    return _PyThreadState_Swap(
      arg0,
    );
  }

  late final _PyThreadState_SwapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyThreadState> Function(
              ffi.Pointer<PyThreadState>)>>('PyThreadState_Swap');
  late final _PyThreadState_Swap = _PyThreadState_SwapPtr.asFunction<
      ffi.Pointer<PyThreadState> Function(ffi.Pointer<PyThreadState>)>();

  ffi.Pointer<PyObject> PyThreadState_GetDict() {
    return _PyThreadState_GetDict();
  }

  late final _PyThreadState_GetDictPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyThreadState_GetDict');
  late final _PyThreadState_GetDict =
  _PyThreadState_GetDictPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  int PyThreadState_SetAsyncExc(
      int arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyThreadState_SetAsyncExc(
      arg0,
      arg1,
    );
  }

  late final _PyThreadState_SetAsyncExcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.UnsignedLong,
              ffi.Pointer<PyObject>)>>('PyThreadState_SetAsyncExc');
  late final _PyThreadState_SetAsyncExc = _PyThreadState_SetAsyncExcPtr
      .asFunction<int Function(int, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyInterpreterState> PyThreadState_GetInterpreter(
      ffi.Pointer<PyThreadState> tstate,
      ) {
    return _PyThreadState_GetInterpreter(
      tstate,
    );
  }

  late final _PyThreadState_GetInterpreterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyInterpreterState> Function(
              ffi.Pointer<PyThreadState>)>>('PyThreadState_GetInterpreter');
  late final _PyThreadState_GetInterpreter =
  _PyThreadState_GetInterpreterPtr.asFunction<
      ffi.Pointer<PyInterpreterState> Function(
          ffi.Pointer<PyThreadState>)>();

  ffi.Pointer<PyFrameObject> PyThreadState_GetFrame(
      ffi.Pointer<PyThreadState> tstate,
      ) {
    return _PyThreadState_GetFrame(
      tstate,
    );
  }

  late final _PyThreadState_GetFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyFrameObject> Function(
              ffi.Pointer<PyThreadState>)>>('PyThreadState_GetFrame');
  late final _PyThreadState_GetFrame = _PyThreadState_GetFramePtr.asFunction<
      ffi.Pointer<PyFrameObject> Function(ffi.Pointer<PyThreadState>)>();

  int PyThreadState_GetID(
      ffi.Pointer<PyThreadState> tstate,
      ) {
    return _PyThreadState_GetID(
      tstate,
    );
  }

  late final _PyThreadState_GetIDPtr = _lookup<
      ffi.NativeFunction<ffi.Uint64 Function(ffi.Pointer<PyThreadState>)>>(
      'PyThreadState_GetID');
  late final _PyThreadState_GetID = _PyThreadState_GetIDPtr.asFunction<
      int Function(ffi.Pointer<PyThreadState>)>();

  int PyGILState_Ensure() {
    return _PyGILState_Ensure();
  }

  late final _PyGILState_EnsurePtr =
  _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('PyGILState_Ensure');
  late final _PyGILState_Ensure =
  _PyGILState_EnsurePtr.asFunction<int Function()>();

  void PyGILState_Release(
      int arg0,
      ) {
    return _PyGILState_Release(
      arg0,
    );
  }

  late final _PyGILState_ReleasePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
      'PyGILState_Release');
  late final _PyGILState_Release =
  _PyGILState_ReleasePtr.asFunction<void Function(int)>();

  ffi.Pointer<PyThreadState> PyGILState_GetThisThreadState() {
    return _PyGILState_GetThisThreadState();
  }

  late final _PyGILState_GetThisThreadStatePtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyThreadState> Function()>>(
      'PyGILState_GetThisThreadState');
  late final _PyGILState_GetThisThreadState = _PyGILState_GetThisThreadStatePtr
      .asFunction<ffi.Pointer<PyThreadState> Function()>();

  late final ffi.Pointer<PyTypeObject> _PyClassMethodDescr_Type =
  _lookup<PyTypeObject>('PyClassMethodDescr_Type');

  PyTypeObject get PyClassMethodDescr_Type => _PyClassMethodDescr_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyGetSetDescr_Type =
  _lookup<PyTypeObject>('PyGetSetDescr_Type');

  PyTypeObject get PyGetSetDescr_Type => _PyGetSetDescr_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyMemberDescr_Type =
  _lookup<PyTypeObject>('PyMemberDescr_Type');

  PyTypeObject get PyMemberDescr_Type => _PyMemberDescr_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyMethodDescr_Type =
  _lookup<PyTypeObject>('PyMethodDescr_Type');

  PyTypeObject get PyMethodDescr_Type => _PyMethodDescr_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyWrapperDescr_Type =
  _lookup<PyTypeObject>('PyWrapperDescr_Type');

  PyTypeObject get PyWrapperDescr_Type => _PyWrapperDescr_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyDictProxy_Type =
  _lookup<PyTypeObject>('PyDictProxy_Type');

  PyTypeObject get PyDictProxy_Type => _PyDictProxy_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyProperty_Type =
  _lookup<PyTypeObject>('PyProperty_Type');

  PyTypeObject get PyProperty_Type => _PyProperty_Type.ref;

  ffi.Pointer<PyObject> PyDescr_NewMethod(
      ffi.Pointer<PyTypeObject> arg0,
      ffi.Pointer<PyMethodDef> arg1,
      ) {
    return _PyDescr_NewMethod(
      arg0,
      arg1,
    );
  }

  late final _PyDescr_NewMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>,
              ffi.Pointer<PyMethodDef>)>>('PyDescr_NewMethod');
  late final _PyDescr_NewMethod = _PyDescr_NewMethodPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyTypeObject>, ffi.Pointer<PyMethodDef>)>();

  ffi.Pointer<PyObject> PyDescr_NewClassMethod(
      ffi.Pointer<PyTypeObject> arg0,
      ffi.Pointer<PyMethodDef> arg1,
      ) {
    return _PyDescr_NewClassMethod(
      arg0,
      arg1,
    );
  }

  late final _PyDescr_NewClassMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>,
              ffi.Pointer<PyMethodDef>)>>('PyDescr_NewClassMethod');
  late final _PyDescr_NewClassMethod = _PyDescr_NewClassMethodPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyTypeObject>, ffi.Pointer<PyMethodDef>)>();

  ffi.Pointer<PyObject> PyDescr_NewMember(
      ffi.Pointer<PyTypeObject> arg0,
      ffi.Pointer<PyMemberDef> arg1,
      ) {
    return _PyDescr_NewMember(
      arg0,
      arg1,
    );
  }

  late final _PyDescr_NewMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>,
              ffi.Pointer<PyMemberDef>)>>('PyDescr_NewMember');
  late final _PyDescr_NewMember = _PyDescr_NewMemberPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyTypeObject>, ffi.Pointer<PyMemberDef>)>();

  ffi.Pointer<PyObject> PyDescr_NewGetSet(
      ffi.Pointer<PyTypeObject> arg0,
      ffi.Pointer<PyGetSetDef> arg1,
      ) {
    return _PyDescr_NewGetSet(
      arg0,
      arg1,
    );
  }

  late final _PyDescr_NewGetSetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>,
              ffi.Pointer<PyGetSetDef>)>>('PyDescr_NewGetSet');
  late final _PyDescr_NewGetSet = _PyDescr_NewGetSetPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyTypeObject>, ffi.Pointer<PyGetSetDef>)>();

  ffi.Pointer<PyObject> PyDictProxy_New(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyDictProxy_New(
      arg0,
    );
  }

  late final _PyDictProxy_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyDictProxy_New');
  late final _PyDictProxy_New = _PyDictProxy_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyWrapper_New(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyWrapper_New(
      arg0,
      arg1,
    );
  }

  late final _PyWrapper_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyWrapper_New');
  late final _PyWrapper_New = _PyWrapper_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> Py_GenericAlias(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _Py_GenericAlias(
      arg0,
      arg1,
    );
  }

  late final _Py_GenericAliasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('Py_GenericAlias');
  late final _Py_GenericAlias = _Py_GenericAliasPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyTypeObject> _Py_GenericAliasType =
  _lookup<PyTypeObject>('Py_GenericAliasType');

  PyTypeObject get Py_GenericAliasType => _Py_GenericAliasType.ref;

  int PyErr_WarnEx(
      ffi.Pointer<PyObject> category,
      ffi.Pointer<ffi.Char> message,
      int stack_level,
      ) {
    return _PyErr_WarnEx(
      category,
      message,
      stack_level,
    );
  }

  late final _PyErr_WarnExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              Py_ssize_t)>>('PyErr_WarnEx');
  late final _PyErr_WarnEx = _PyErr_WarnExPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>, int)>();

  int PyErr_WarnFormat(
      ffi.Pointer<PyObject> category,
      int stack_level,
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyErr_WarnFormat(
      category,
      stack_level,
      format,
    );
  }

  late final _PyErr_WarnFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyErr_WarnFormat');
  late final _PyErr_WarnFormat = _PyErr_WarnFormatPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, ffi.Pointer<ffi.Char>)>();

  int PyErr_ResourceWarning(
      ffi.Pointer<PyObject> source,
      int stack_level,
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyErr_ResourceWarning(
      source,
      stack_level,
      format,
    );
  }

  late final _PyErr_ResourceWarningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyErr_ResourceWarning');
  late final _PyErr_ResourceWarning = _PyErr_ResourceWarningPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, ffi.Pointer<ffi.Char>)>();

  int PyErr_WarnExplicit(
      ffi.Pointer<PyObject> category,
      ffi.Pointer<ffi.Char> message,
      ffi.Pointer<ffi.Char> filename,
      int lineno,
      ffi.Pointer<ffi.Char> module,
      ffi.Pointer<PyObject> registry,
      ) {
    return _PyErr_WarnExplicit(
      category,
      message,
      filename,
      lineno,
      module,
      registry,
    );
  }

  late final _PyErr_WarnExplicitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PyErr_WarnExplicit');
  late final _PyErr_WarnExplicit = _PyErr_WarnExplicitPtr.asFunction<
      int Function(
          ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyWeakref_RefType =
  _lookup<PyTypeObject>('_PyWeakref_RefType');

  PyTypeObject get PyWeakref_RefType => _PyWeakref_RefType.ref;

  late final ffi.Pointer<PyTypeObject> _PyWeakref_ProxyType =
  _lookup<PyTypeObject>('_PyWeakref_ProxyType');

  PyTypeObject get PyWeakref_ProxyType => _PyWeakref_ProxyType.ref;

  late final ffi.Pointer<PyTypeObject> _PyWeakref_CallableProxyType =
  _lookup<PyTypeObject>('_PyWeakref_CallableProxyType');

  PyTypeObject get PyWeakref_CallableProxyType =>
      _PyWeakref_CallableProxyType.ref;

  ffi.Pointer<PyObject> PyWeakref_NewRef(
      ffi.Pointer<PyObject> ob,
      ffi.Pointer<PyObject> callback,
      ) {
    return _PyWeakref_NewRef(
      ob,
      callback,
    );
  }

  late final _PyWeakref_NewRefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyWeakref_NewRef');
  late final _PyWeakref_NewRef = _PyWeakref_NewRefPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyWeakref_NewProxy(
      ffi.Pointer<PyObject> ob,
      ffi.Pointer<PyObject> callback,
      ) {
    return _PyWeakref_NewProxy(
      ob,
      callback,
    );
  }

  late final _PyWeakref_NewProxyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyWeakref_NewProxy');
  late final _PyWeakref_NewProxy = _PyWeakref_NewProxyPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyWeakref_GetObject(
      ffi.Pointer<PyObject> ref,
      ) {
    return _PyWeakref_GetObject(
      ref,
    );
  }

  late final _PyWeakref_GetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyWeakref_GetObject');
  late final _PyWeakref_GetObject = _PyWeakref_GetObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _PyStructSequence_UnnamedField =
  _lookup<ffi.Pointer<ffi.Char>>('PyStructSequence_UnnamedField');

  ffi.Pointer<ffi.Char> get PyStructSequence_UnnamedField =>
      _PyStructSequence_UnnamedField.value;

  set PyStructSequence_UnnamedField(ffi.Pointer<ffi.Char> value) =>
      _PyStructSequence_UnnamedField.value = value;

  void PyStructSequence_InitType(
      ffi.Pointer<PyTypeObject> type,
      ffi.Pointer<PyStructSequence_Desc> desc,
      ) {
    return _PyStructSequence_InitType(
      type,
      desc,
    );
  }

  late final _PyStructSequence_InitTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PyTypeObject>,
              ffi.Pointer<PyStructSequence_Desc>)>>(
      'PyStructSequence_InitType');
  late final _PyStructSequence_InitType =
  _PyStructSequence_InitTypePtr.asFunction<
      void Function(
          ffi.Pointer<PyTypeObject>, ffi.Pointer<PyStructSequence_Desc>)>();

  int PyStructSequence_InitType2(
      ffi.Pointer<PyTypeObject> type,
      ffi.Pointer<PyStructSequence_Desc> desc,
      ) {
    return _PyStructSequence_InitType2(
      type,
      desc,
    );
  }

  late final _PyStructSequence_InitType2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyTypeObject>,
              ffi.Pointer<PyStructSequence_Desc>)>>(
      'PyStructSequence_InitType2');
  late final _PyStructSequence_InitType2 =
  _PyStructSequence_InitType2Ptr.asFunction<
      int Function(
          ffi.Pointer<PyTypeObject>, ffi.Pointer<PyStructSequence_Desc>)>();

  ffi.Pointer<PyTypeObject> PyStructSequence_NewType(
      ffi.Pointer<PyStructSequence_Desc> desc,
      ) {
    return _PyStructSequence_NewType(
      desc,
    );
  }

  late final _PyStructSequence_NewTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyTypeObject> Function(
              ffi.Pointer<PyStructSequence_Desc>)>>('PyStructSequence_NewType');
  late final _PyStructSequence_NewType =
  _PyStructSequence_NewTypePtr.asFunction<
      ffi.Pointer<PyTypeObject> Function(
          ffi.Pointer<PyStructSequence_Desc>)>();

  ffi.Pointer<PyObject> PyStructSequence_New(
      ffi.Pointer<PyTypeObject> type,
      ) {
    return _PyStructSequence_New(
      type,
    );
  }

  late final _PyStructSequence_NewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyTypeObject>)>>('PyStructSequence_New');
  late final _PyStructSequence_New = _PyStructSequence_NewPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyTypeObject>)>();

  void PyStructSequence_SetItem(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyStructSequence_SetItem(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyStructSequence_SetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PyObject>, Py_ssize_t,
              ffi.Pointer<PyObject>)>>('PyStructSequence_SetItem');
  late final _PyStructSequence_SetItem =
  _PyStructSequence_SetItemPtr.asFunction<
      void Function(ffi.Pointer<PyObject>, int, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyStructSequence_GetItem(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyStructSequence_GetItem(
      arg0,
      arg1,
    );
  }

  late final _PyStructSequence_GetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PyStructSequence_GetItem');
  late final _PyStructSequence_GetItem = _PyStructSequence_GetItemPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  int PyCodec_Register(
      ffi.Pointer<PyObject> search_function,
      ) {
    return _PyCodec_Register(
      search_function,
    );
  }

  late final _PyCodec_RegisterPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyCodec_Register');
  late final _PyCodec_Register =
  _PyCodec_RegisterPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyCodec_Unregister(
      ffi.Pointer<PyObject> search_function,
      ) {
    return _PyCodec_Unregister(
      search_function,
    );
  }

  late final _PyCodec_UnregisterPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyCodec_Unregister');
  late final _PyCodec_Unregister =
  _PyCodec_UnregisterPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> _PyCodec_Lookup(
      ffi.Pointer<ffi.Char> encoding,
      ) {
    return __PyCodec_Lookup(
      encoding,
    );
  }

  late final __PyCodec_LookupPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('_PyCodec_Lookup');
  late final __PyCodec_Lookup = __PyCodec_LookupPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  int _PyCodec_Forget(
      ffi.Pointer<ffi.Char> encoding,
      ) {
    return __PyCodec_Forget(
      encoding,
    );
  }

  late final __PyCodec_ForgetPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
      '_PyCodec_Forget');
  late final __PyCodec_Forget =
  __PyCodec_ForgetPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int PyCodec_KnownEncoding(
      ffi.Pointer<ffi.Char> encoding,
      ) {
    return _PyCodec_KnownEncoding(
      encoding,
    );
  }

  late final _PyCodec_KnownEncodingPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
      'PyCodec_KnownEncoding');
  late final _PyCodec_KnownEncoding = _PyCodec_KnownEncodingPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyCodec_Encode(
      ffi.Pointer<PyObject> object,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyCodec_Encode(
      object,
      encoding,
      errors,
    );
  }

  late final _PyCodec_EncodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('PyCodec_Encode');
  late final _PyCodec_Encode = _PyCodec_EncodePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyCodec_Decode(
      ffi.Pointer<PyObject> object,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyCodec_Decode(
      object,
      encoding,
      errors,
    );
  }

  late final _PyCodec_DecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('PyCodec_Decode');
  late final _PyCodec_Decode = _PyCodec_DecodePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> _PyCodec_LookupTextEncoding(
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> alternate_command,
      ) {
    return __PyCodec_LookupTextEncoding(
      encoding,
      alternate_command,
    );
  }

  late final __PyCodec_LookupTextEncodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_PyCodec_LookupTextEncoding');
  late final __PyCodec_LookupTextEncoding =
  __PyCodec_LookupTextEncodingPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> _PyCodec_EncodeText(
      ffi.Pointer<PyObject> object,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return __PyCodec_EncodeText(
      object,
      encoding,
      errors,
    );
  }

  late final __PyCodec_EncodeTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_PyCodec_EncodeText');
  late final __PyCodec_EncodeText = __PyCodec_EncodeTextPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> _PyCodec_DecodeText(
      ffi.Pointer<PyObject> object,
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return __PyCodec_DecodeText(
      object,
      encoding,
      errors,
    );
  }

  late final __PyCodec_DecodeTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_PyCodec_DecodeText');
  late final __PyCodec_DecodeText = __PyCodec_DecodeTextPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> _PyCodecInfo_GetIncrementalDecoder(
      ffi.Pointer<PyObject> codec_info,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return __PyCodecInfo_GetIncrementalDecoder(
      codec_info,
      errors,
    );
  }

  late final __PyCodecInfo_GetIncrementalDecoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('_PyCodecInfo_GetIncrementalDecoder');
  late final __PyCodecInfo_GetIncrementalDecoder =
  __PyCodecInfo_GetIncrementalDecoderPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> _PyCodecInfo_GetIncrementalEncoder(
      ffi.Pointer<PyObject> codec_info,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return __PyCodecInfo_GetIncrementalEncoder(
      codec_info,
      errors,
    );
  }

  late final __PyCodecInfo_GetIncrementalEncoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('_PyCodecInfo_GetIncrementalEncoder');
  late final __PyCodecInfo_GetIncrementalEncoder =
  __PyCodecInfo_GetIncrementalEncoderPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyCodec_Encoder(
      ffi.Pointer<ffi.Char> encoding,
      ) {
    return _PyCodec_Encoder(
      encoding,
    );
  }

  late final _PyCodec_EncoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyCodec_Encoder');
  late final _PyCodec_Encoder = _PyCodec_EncoderPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyCodec_Decoder(
      ffi.Pointer<ffi.Char> encoding,
      ) {
    return _PyCodec_Decoder(
      encoding,
    );
  }

  late final _PyCodec_DecoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyCodec_Decoder');
  late final _PyCodec_Decoder = _PyCodec_DecoderPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyCodec_IncrementalEncoder(
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyCodec_IncrementalEncoder(
      encoding,
      errors,
    );
  }

  late final _PyCodec_IncrementalEncoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyCodec_IncrementalEncoder');
  late final _PyCodec_IncrementalEncoder =
  _PyCodec_IncrementalEncoderPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyCodec_IncrementalDecoder(
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyCodec_IncrementalDecoder(
      encoding,
      errors,
    );
  }

  late final _PyCodec_IncrementalDecoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyCodec_IncrementalDecoder');
  late final _PyCodec_IncrementalDecoder =
  _PyCodec_IncrementalDecoderPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyCodec_StreamReader(
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<PyObject> stream,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyCodec_StreamReader(
      encoding,
      stream,
      errors,
    );
  }

  late final _PyCodec_StreamReaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyCodec_StreamReader');
  late final _PyCodec_StreamReader = _PyCodec_StreamReaderPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyCodec_StreamWriter(
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<PyObject> stream,
      ffi.Pointer<ffi.Char> errors,
      ) {
    return _PyCodec_StreamWriter(
      encoding,
      stream,
      errors,
    );
  }

  late final _PyCodec_StreamWriterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyCodec_StreamWriter');
  late final _PyCodec_StreamWriter = _PyCodec_StreamWriterPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyCodec_RegisterError(
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<PyObject> error,
      ) {
    return _PyCodec_RegisterError(
      name,
      error,
    );
  }

  late final _PyCodec_RegisterErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PyCodec_RegisterError');
  late final _PyCodec_RegisterError = _PyCodec_RegisterErrorPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCodec_LookupError(
      ffi.Pointer<ffi.Char> name,
      ) {
    return _PyCodec_LookupError(
      name,
    );
  }

  late final _PyCodec_LookupErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyCodec_LookupError');
  late final _PyCodec_LookupError = _PyCodec_LookupErrorPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyCodec_StrictErrors(
      ffi.Pointer<PyObject> exc,
      ) {
    return _PyCodec_StrictErrors(
      exc,
    );
  }

  late final _PyCodec_StrictErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyCodec_StrictErrors');
  late final _PyCodec_StrictErrors = _PyCodec_StrictErrorsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCodec_IgnoreErrors(
      ffi.Pointer<PyObject> exc,
      ) {
    return _PyCodec_IgnoreErrors(
      exc,
    );
  }

  late final _PyCodec_IgnoreErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyCodec_IgnoreErrors');
  late final _PyCodec_IgnoreErrors = _PyCodec_IgnoreErrorsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCodec_ReplaceErrors(
      ffi.Pointer<PyObject> exc,
      ) {
    return _PyCodec_ReplaceErrors(
      exc,
    );
  }

  late final _PyCodec_ReplaceErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyCodec_ReplaceErrors');
  late final _PyCodec_ReplaceErrors = _PyCodec_ReplaceErrorsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCodec_XMLCharRefReplaceErrors(
      ffi.Pointer<PyObject> exc,
      ) {
    return _PyCodec_XMLCharRefReplaceErrors(
      exc,
    );
  }

  late final _PyCodec_XMLCharRefReplaceErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyCodec_XMLCharRefReplaceErrors');
  late final _PyCodec_XMLCharRefReplaceErrors =
  _PyCodec_XMLCharRefReplaceErrorsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCodec_BackslashReplaceErrors(
      ffi.Pointer<PyObject> exc,
      ) {
    return _PyCodec_BackslashReplaceErrors(
      exc,
    );
  }

  late final _PyCodec_BackslashReplaceErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyCodec_BackslashReplaceErrors');
  late final _PyCodec_BackslashReplaceErrors =
  _PyCodec_BackslashReplaceErrorsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyCodec_NameReplaceErrors(
      ffi.Pointer<PyObject> exc,
      ) {
    return _PyCodec_NameReplaceErrors(
      exc,
    );
  }

  late final _PyCodec_NameReplaceErrorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyCodec_NameReplaceErrors');
  late final _PyCodec_NameReplaceErrors = _PyCodec_NameReplaceErrorsPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.Char>> _Py_hexdigits =
  _lookup<ffi.Pointer<ffi.Char>>('Py_hexdigits');

  ffi.Pointer<ffi.Char> get Py_hexdigits => _Py_hexdigits.value;

  set Py_hexdigits(ffi.Pointer<ffi.Char> value) => _Py_hexdigits.value = value;

  void PyErr_SetNone(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyErr_SetNone(
      arg0,
    );
  }

  late final _PyErr_SetNonePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      'PyErr_SetNone');
  late final _PyErr_SetNone =
  _PyErr_SetNonePtr.asFunction<void Function(ffi.Pointer<PyObject>)>();

  void PyErr_SetObject(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyErr_SetObject(
      arg0,
      arg1,
    );
  }

  late final _PyErr_SetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_SetObject');
  late final _PyErr_SetObject = _PyErr_SetObjectPtr.asFunction<
      void Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  void PyErr_SetString(
      ffi.Pointer<PyObject> exception,
      ffi.Pointer<ffi.Char> string,
      ) {
    return _PyErr_SetString(
      exception,
      string,
    );
  }

  late final _PyErr_SetStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyErr_SetString');
  late final _PyErr_SetString = _PyErr_SetStringPtr.asFunction<
      void Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyErr_Occurred() {
    return _PyErr_Occurred();
  }

  late final _PyErr_OccurredPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyErr_Occurred');
  late final _PyErr_Occurred =
  _PyErr_OccurredPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  void PyErr_Clear() {
    return _PyErr_Clear();
  }

  late final _PyErr_ClearPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyErr_Clear');
  late final _PyErr_Clear = _PyErr_ClearPtr.asFunction<void Function()>();

  void PyErr_Fetch(
      ffi.Pointer<ffi.Pointer<PyObject>> arg0,
      ffi.Pointer<ffi.Pointer<PyObject>> arg1,
      ffi.Pointer<ffi.Pointer<PyObject>> arg2,
      ) {
    return _PyErr_Fetch(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_FetchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<ffi.Pointer<PyObject>>)>>('PyErr_Fetch');
  late final _PyErr_Fetch = _PyErr_FetchPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<PyObject>>,
          ffi.Pointer<ffi.Pointer<PyObject>>,
          ffi.Pointer<ffi.Pointer<PyObject>>)>();

  void PyErr_Restore(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyErr_Restore(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_RestorePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_Restore');
  late final _PyErr_Restore = _PyErr_RestorePtr.asFunction<
      void Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyErr_GetHandledException() {
    return _PyErr_GetHandledException();
  }

  late final _PyErr_GetHandledExceptionPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyErr_GetHandledException');
  late final _PyErr_GetHandledException = _PyErr_GetHandledExceptionPtr
      .asFunction<ffi.Pointer<PyObject> Function()>();

  void PyErr_SetHandledException(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyErr_SetHandledException(
      arg0,
    );
  }

  late final _PyErr_SetHandledExceptionPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      'PyErr_SetHandledException');
  late final _PyErr_SetHandledException = _PyErr_SetHandledExceptionPtr
      .asFunction<void Function(ffi.Pointer<PyObject>)>();

  void PyErr_GetExcInfo(
      ffi.Pointer<ffi.Pointer<PyObject>> arg0,
      ffi.Pointer<ffi.Pointer<PyObject>> arg1,
      ffi.Pointer<ffi.Pointer<PyObject>> arg2,
      ) {
    return _PyErr_GetExcInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_GetExcInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<ffi.Pointer<PyObject>>)>>('PyErr_GetExcInfo');
  late final _PyErr_GetExcInfo = _PyErr_GetExcInfoPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<PyObject>>,
          ffi.Pointer<ffi.Pointer<PyObject>>,
          ffi.Pointer<ffi.Pointer<PyObject>>)>();

  void PyErr_SetExcInfo(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyErr_SetExcInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_SetExcInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_SetExcInfo');
  late final _PyErr_SetExcInfo = _PyErr_SetExcInfoPtr.asFunction<
      void Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  void Py_FatalError(
      ffi.Pointer<ffi.Char> message,
      ) {
    return _Py_FatalError(
      message,
    );
  }

  late final _Py_FatalErrorPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
      'Py_FatalError');
  late final _Py_FatalError =
  _Py_FatalErrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int PyErr_GivenExceptionMatches(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyErr_GivenExceptionMatches(
      arg0,
      arg1,
    );
  }

  late final _PyErr_GivenExceptionMatchesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_GivenExceptionMatches');
  late final _PyErr_GivenExceptionMatches = _PyErr_GivenExceptionMatchesPtr
      .asFunction<int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyErr_ExceptionMatches(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyErr_ExceptionMatches(
      arg0,
    );
  }

  late final _PyErr_ExceptionMatchesPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyErr_ExceptionMatches');
  late final _PyErr_ExceptionMatches = _PyErr_ExceptionMatchesPtr.asFunction<
      int Function(ffi.Pointer<PyObject>)>();

  void PyErr_NormalizeException(
      ffi.Pointer<ffi.Pointer<PyObject>> arg0,
      ffi.Pointer<ffi.Pointer<PyObject>> arg1,
      ffi.Pointer<ffi.Pointer<PyObject>> arg2,
      ) {
    return _PyErr_NormalizeException(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_NormalizeExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Pointer<ffi.Pointer<PyObject>>)>>('PyErr_NormalizeException');
  late final _PyErr_NormalizeException =
  _PyErr_NormalizeExceptionPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<PyObject>>,
          ffi.Pointer<ffi.Pointer<PyObject>>,
          ffi.Pointer<ffi.Pointer<PyObject>>)>();

  int PyException_SetTraceback(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyException_SetTraceback(
      arg0,
      arg1,
    );
  }

  late final _PyException_SetTracebackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyException_SetTraceback');
  late final _PyException_SetTraceback = _PyException_SetTracebackPtr
      .asFunction<int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyException_GetTraceback(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyException_GetTraceback(
      arg0,
    );
  }

  late final _PyException_GetTracebackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyException_GetTraceback');
  late final _PyException_GetTraceback = _PyException_GetTracebackPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyException_GetCause(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyException_GetCause(
      arg0,
    );
  }

  late final _PyException_GetCausePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyException_GetCause');
  late final _PyException_GetCause = _PyException_GetCausePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  void PyException_SetCause(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyException_SetCause(
      arg0,
      arg1,
    );
  }

  late final _PyException_SetCausePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyException_SetCause');
  late final _PyException_SetCause = _PyException_SetCausePtr.asFunction<
      void Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyException_GetContext(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyException_GetContext(
      arg0,
    );
  }

  late final _PyException_GetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyException_GetContext');
  late final _PyException_GetContext = _PyException_GetContextPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  void PyException_SetContext(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyException_SetContext(
      arg0,
      arg1,
    );
  }

  late final _PyException_SetContextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyException_SetContext');
  late final _PyException_SetContext = _PyException_SetContextPtr.asFunction<
      void Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Char> PyExceptionClass_Name(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyExceptionClass_Name(
      arg0,
    );
  }

  late final _PyExceptionClass_NamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PyObject>)>>('PyExceptionClass_Name');
  late final _PyExceptionClass_Name = _PyExceptionClass_NamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BaseException =
  _lookup<ffi.Pointer<PyObject>>('PyExc_BaseException');

  ffi.Pointer<PyObject> get PyExc_BaseException => _PyExc_BaseException.value;

  set PyExc_BaseException(ffi.Pointer<PyObject> value) =>
      _PyExc_BaseException.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_Exception =
  _lookup<ffi.Pointer<PyObject>>('PyExc_Exception');

  ffi.Pointer<PyObject> get PyExc_Exception => _PyExc_Exception.value;

  set PyExc_Exception(ffi.Pointer<PyObject> value) =>
      _PyExc_Exception.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BaseExceptionGroup =
  _lookup<ffi.Pointer<PyObject>>('PyExc_BaseExceptionGroup');

  ffi.Pointer<PyObject> get PyExc_BaseExceptionGroup =>
      _PyExc_BaseExceptionGroup.value;

  set PyExc_BaseExceptionGroup(ffi.Pointer<PyObject> value) =>
      _PyExc_BaseExceptionGroup.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_StopAsyncIteration =
  _lookup<ffi.Pointer<PyObject>>('PyExc_StopAsyncIteration');

  ffi.Pointer<PyObject> get PyExc_StopAsyncIteration =>
      _PyExc_StopAsyncIteration.value;

  set PyExc_StopAsyncIteration(ffi.Pointer<PyObject> value) =>
      _PyExc_StopAsyncIteration.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_StopIteration =
  _lookup<ffi.Pointer<PyObject>>('PyExc_StopIteration');

  ffi.Pointer<PyObject> get PyExc_StopIteration => _PyExc_StopIteration.value;

  set PyExc_StopIteration(ffi.Pointer<PyObject> value) =>
      _PyExc_StopIteration.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_GeneratorExit =
  _lookup<ffi.Pointer<PyObject>>('PyExc_GeneratorExit');

  ffi.Pointer<PyObject> get PyExc_GeneratorExit => _PyExc_GeneratorExit.value;

  set PyExc_GeneratorExit(ffi.Pointer<PyObject> value) =>
      _PyExc_GeneratorExit.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ArithmeticError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ArithmeticError');

  ffi.Pointer<PyObject> get PyExc_ArithmeticError =>
      _PyExc_ArithmeticError.value;

  set PyExc_ArithmeticError(ffi.Pointer<PyObject> value) =>
      _PyExc_ArithmeticError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_LookupError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_LookupError');

  ffi.Pointer<PyObject> get PyExc_LookupError => _PyExc_LookupError.value;

  set PyExc_LookupError(ffi.Pointer<PyObject> value) =>
      _PyExc_LookupError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_AssertionError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_AssertionError');

  ffi.Pointer<PyObject> get PyExc_AssertionError => _PyExc_AssertionError.value;

  set PyExc_AssertionError(ffi.Pointer<PyObject> value) =>
      _PyExc_AssertionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_AttributeError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_AttributeError');

  ffi.Pointer<PyObject> get PyExc_AttributeError => _PyExc_AttributeError.value;

  set PyExc_AttributeError(ffi.Pointer<PyObject> value) =>
      _PyExc_AttributeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BufferError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_BufferError');

  ffi.Pointer<PyObject> get PyExc_BufferError => _PyExc_BufferError.value;

  set PyExc_BufferError(ffi.Pointer<PyObject> value) =>
      _PyExc_BufferError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_EOFError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_EOFError');

  ffi.Pointer<PyObject> get PyExc_EOFError => _PyExc_EOFError.value;

  set PyExc_EOFError(ffi.Pointer<PyObject> value) =>
      _PyExc_EOFError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_FloatingPointError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_FloatingPointError');

  ffi.Pointer<PyObject> get PyExc_FloatingPointError =>
      _PyExc_FloatingPointError.value;

  set PyExc_FloatingPointError(ffi.Pointer<PyObject> value) =>
      _PyExc_FloatingPointError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_OSError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_OSError');

  ffi.Pointer<PyObject> get PyExc_OSError => _PyExc_OSError.value;

  set PyExc_OSError(ffi.Pointer<PyObject> value) =>
      _PyExc_OSError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ImportError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ImportError');

  ffi.Pointer<PyObject> get PyExc_ImportError => _PyExc_ImportError.value;

  set PyExc_ImportError(ffi.Pointer<PyObject> value) =>
      _PyExc_ImportError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ModuleNotFoundError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ModuleNotFoundError');

  ffi.Pointer<PyObject> get PyExc_ModuleNotFoundError =>
      _PyExc_ModuleNotFoundError.value;

  set PyExc_ModuleNotFoundError(ffi.Pointer<PyObject> value) =>
      _PyExc_ModuleNotFoundError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_IndexError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_IndexError');

  ffi.Pointer<PyObject> get PyExc_IndexError => _PyExc_IndexError.value;

  set PyExc_IndexError(ffi.Pointer<PyObject> value) =>
      _PyExc_IndexError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_KeyError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_KeyError');

  ffi.Pointer<PyObject> get PyExc_KeyError => _PyExc_KeyError.value;

  set PyExc_KeyError(ffi.Pointer<PyObject> value) =>
      _PyExc_KeyError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_KeyboardInterrupt =
  _lookup<ffi.Pointer<PyObject>>('PyExc_KeyboardInterrupt');

  ffi.Pointer<PyObject> get PyExc_KeyboardInterrupt =>
      _PyExc_KeyboardInterrupt.value;

  set PyExc_KeyboardInterrupt(ffi.Pointer<PyObject> value) =>
      _PyExc_KeyboardInterrupt.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_MemoryError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_MemoryError');

  ffi.Pointer<PyObject> get PyExc_MemoryError => _PyExc_MemoryError.value;

  set PyExc_MemoryError(ffi.Pointer<PyObject> value) =>
      _PyExc_MemoryError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_NameError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_NameError');

  ffi.Pointer<PyObject> get PyExc_NameError => _PyExc_NameError.value;

  set PyExc_NameError(ffi.Pointer<PyObject> value) =>
      _PyExc_NameError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_OverflowError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_OverflowError');

  ffi.Pointer<PyObject> get PyExc_OverflowError => _PyExc_OverflowError.value;

  set PyExc_OverflowError(ffi.Pointer<PyObject> value) =>
      _PyExc_OverflowError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_RuntimeError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_RuntimeError');

  ffi.Pointer<PyObject> get PyExc_RuntimeError => _PyExc_RuntimeError.value;

  set PyExc_RuntimeError(ffi.Pointer<PyObject> value) =>
      _PyExc_RuntimeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_RecursionError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_RecursionError');

  ffi.Pointer<PyObject> get PyExc_RecursionError => _PyExc_RecursionError.value;

  set PyExc_RecursionError(ffi.Pointer<PyObject> value) =>
      _PyExc_RecursionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_NotImplementedError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_NotImplementedError');

  ffi.Pointer<PyObject> get PyExc_NotImplementedError =>
      _PyExc_NotImplementedError.value;

  set PyExc_NotImplementedError(ffi.Pointer<PyObject> value) =>
      _PyExc_NotImplementedError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_SyntaxError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_SyntaxError');

  ffi.Pointer<PyObject> get PyExc_SyntaxError => _PyExc_SyntaxError.value;

  set PyExc_SyntaxError(ffi.Pointer<PyObject> value) =>
      _PyExc_SyntaxError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_IndentationError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_IndentationError');

  ffi.Pointer<PyObject> get PyExc_IndentationError =>
      _PyExc_IndentationError.value;

  set PyExc_IndentationError(ffi.Pointer<PyObject> value) =>
      _PyExc_IndentationError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_TabError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_TabError');

  ffi.Pointer<PyObject> get PyExc_TabError => _PyExc_TabError.value;

  set PyExc_TabError(ffi.Pointer<PyObject> value) =>
      _PyExc_TabError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ReferenceError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ReferenceError');

  ffi.Pointer<PyObject> get PyExc_ReferenceError => _PyExc_ReferenceError.value;

  set PyExc_ReferenceError(ffi.Pointer<PyObject> value) =>
      _PyExc_ReferenceError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_SystemError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_SystemError');

  ffi.Pointer<PyObject> get PyExc_SystemError => _PyExc_SystemError.value;

  set PyExc_SystemError(ffi.Pointer<PyObject> value) =>
      _PyExc_SystemError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_SystemExit =
  _lookup<ffi.Pointer<PyObject>>('PyExc_SystemExit');

  ffi.Pointer<PyObject> get PyExc_SystemExit => _PyExc_SystemExit.value;

  set PyExc_SystemExit(ffi.Pointer<PyObject> value) =>
      _PyExc_SystemExit.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_TypeError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_TypeError');

  ffi.Pointer<PyObject> get PyExc_TypeError => _PyExc_TypeError.value;

  set PyExc_TypeError(ffi.Pointer<PyObject> value) =>
      _PyExc_TypeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnboundLocalError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_UnboundLocalError');

  ffi.Pointer<PyObject> get PyExc_UnboundLocalError =>
      _PyExc_UnboundLocalError.value;

  set PyExc_UnboundLocalError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnboundLocalError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeError');

  ffi.Pointer<PyObject> get PyExc_UnicodeError => _PyExc_UnicodeError.value;

  set PyExc_UnicodeError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeEncodeError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeEncodeError');

  ffi.Pointer<PyObject> get PyExc_UnicodeEncodeError =>
      _PyExc_UnicodeEncodeError.value;

  set PyExc_UnicodeEncodeError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeEncodeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeDecodeError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeDecodeError');

  ffi.Pointer<PyObject> get PyExc_UnicodeDecodeError =>
      _PyExc_UnicodeDecodeError.value;

  set PyExc_UnicodeDecodeError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeDecodeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeTranslateError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeTranslateError');

  ffi.Pointer<PyObject> get PyExc_UnicodeTranslateError =>
      _PyExc_UnicodeTranslateError.value;

  set PyExc_UnicodeTranslateError(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeTranslateError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ValueError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ValueError');

  ffi.Pointer<PyObject> get PyExc_ValueError => _PyExc_ValueError.value;

  set PyExc_ValueError(ffi.Pointer<PyObject> value) =>
      _PyExc_ValueError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ZeroDivisionError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ZeroDivisionError');

  ffi.Pointer<PyObject> get PyExc_ZeroDivisionError =>
      _PyExc_ZeroDivisionError.value;

  set PyExc_ZeroDivisionError(ffi.Pointer<PyObject> value) =>
      _PyExc_ZeroDivisionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BlockingIOError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_BlockingIOError');

  ffi.Pointer<PyObject> get PyExc_BlockingIOError =>
      _PyExc_BlockingIOError.value;

  set PyExc_BlockingIOError(ffi.Pointer<PyObject> value) =>
      _PyExc_BlockingIOError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BrokenPipeError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_BrokenPipeError');

  ffi.Pointer<PyObject> get PyExc_BrokenPipeError =>
      _PyExc_BrokenPipeError.value;

  set PyExc_BrokenPipeError(ffi.Pointer<PyObject> value) =>
      _PyExc_BrokenPipeError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ChildProcessError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ChildProcessError');

  ffi.Pointer<PyObject> get PyExc_ChildProcessError =>
      _PyExc_ChildProcessError.value;

  set PyExc_ChildProcessError(ffi.Pointer<PyObject> value) =>
      _PyExc_ChildProcessError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ConnectionError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ConnectionError');

  ffi.Pointer<PyObject> get PyExc_ConnectionError =>
      _PyExc_ConnectionError.value;

  set PyExc_ConnectionError(ffi.Pointer<PyObject> value) =>
      _PyExc_ConnectionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ConnectionAbortedError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ConnectionAbortedError');

  ffi.Pointer<PyObject> get PyExc_ConnectionAbortedError =>
      _PyExc_ConnectionAbortedError.value;

  set PyExc_ConnectionAbortedError(ffi.Pointer<PyObject> value) =>
      _PyExc_ConnectionAbortedError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ConnectionRefusedError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ConnectionRefusedError');

  ffi.Pointer<PyObject> get PyExc_ConnectionRefusedError =>
      _PyExc_ConnectionRefusedError.value;

  set PyExc_ConnectionRefusedError(ffi.Pointer<PyObject> value) =>
      _PyExc_ConnectionRefusedError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ConnectionResetError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ConnectionResetError');

  ffi.Pointer<PyObject> get PyExc_ConnectionResetError =>
      _PyExc_ConnectionResetError.value;

  set PyExc_ConnectionResetError(ffi.Pointer<PyObject> value) =>
      _PyExc_ConnectionResetError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_FileExistsError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_FileExistsError');

  ffi.Pointer<PyObject> get PyExc_FileExistsError =>
      _PyExc_FileExistsError.value;

  set PyExc_FileExistsError(ffi.Pointer<PyObject> value) =>
      _PyExc_FileExistsError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_FileNotFoundError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_FileNotFoundError');

  ffi.Pointer<PyObject> get PyExc_FileNotFoundError =>
      _PyExc_FileNotFoundError.value;

  set PyExc_FileNotFoundError(ffi.Pointer<PyObject> value) =>
      _PyExc_FileNotFoundError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_InterruptedError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_InterruptedError');

  ffi.Pointer<PyObject> get PyExc_InterruptedError =>
      _PyExc_InterruptedError.value;

  set PyExc_InterruptedError(ffi.Pointer<PyObject> value) =>
      _PyExc_InterruptedError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_IsADirectoryError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_IsADirectoryError');

  ffi.Pointer<PyObject> get PyExc_IsADirectoryError =>
      _PyExc_IsADirectoryError.value;

  set PyExc_IsADirectoryError(ffi.Pointer<PyObject> value) =>
      _PyExc_IsADirectoryError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_NotADirectoryError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_NotADirectoryError');

  ffi.Pointer<PyObject> get PyExc_NotADirectoryError =>
      _PyExc_NotADirectoryError.value;

  set PyExc_NotADirectoryError(ffi.Pointer<PyObject> value) =>
      _PyExc_NotADirectoryError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_PermissionError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_PermissionError');

  ffi.Pointer<PyObject> get PyExc_PermissionError =>
      _PyExc_PermissionError.value;

  set PyExc_PermissionError(ffi.Pointer<PyObject> value) =>
      _PyExc_PermissionError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ProcessLookupError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ProcessLookupError');

  ffi.Pointer<PyObject> get PyExc_ProcessLookupError =>
      _PyExc_ProcessLookupError.value;

  set PyExc_ProcessLookupError(ffi.Pointer<PyObject> value) =>
      _PyExc_ProcessLookupError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_TimeoutError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_TimeoutError');

  ffi.Pointer<PyObject> get PyExc_TimeoutError => _PyExc_TimeoutError.value;

  set PyExc_TimeoutError(ffi.Pointer<PyObject> value) =>
      _PyExc_TimeoutError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_EnvironmentError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_EnvironmentError');

  ffi.Pointer<PyObject> get PyExc_EnvironmentError =>
      _PyExc_EnvironmentError.value;

  set PyExc_EnvironmentError(ffi.Pointer<PyObject> value) =>
      _PyExc_EnvironmentError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_IOError =
  _lookup<ffi.Pointer<PyObject>>('PyExc_IOError');

  ffi.Pointer<PyObject> get PyExc_IOError => _PyExc_IOError.value;

  set PyExc_IOError(ffi.Pointer<PyObject> value) =>
      _PyExc_IOError.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_Warning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_Warning');

  ffi.Pointer<PyObject> get PyExc_Warning => _PyExc_Warning.value;

  set PyExc_Warning(ffi.Pointer<PyObject> value) =>
      _PyExc_Warning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UserWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_UserWarning');

  ffi.Pointer<PyObject> get PyExc_UserWarning => _PyExc_UserWarning.value;

  set PyExc_UserWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_UserWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_DeprecationWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_DeprecationWarning');

  ffi.Pointer<PyObject> get PyExc_DeprecationWarning =>
      _PyExc_DeprecationWarning.value;

  set PyExc_DeprecationWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_DeprecationWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>>
  _PyExc_PendingDeprecationWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_PendingDeprecationWarning');

  ffi.Pointer<PyObject> get PyExc_PendingDeprecationWarning =>
      _PyExc_PendingDeprecationWarning.value;

  set PyExc_PendingDeprecationWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_PendingDeprecationWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_SyntaxWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_SyntaxWarning');

  ffi.Pointer<PyObject> get PyExc_SyntaxWarning => _PyExc_SyntaxWarning.value;

  set PyExc_SyntaxWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_SyntaxWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_RuntimeWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_RuntimeWarning');

  ffi.Pointer<PyObject> get PyExc_RuntimeWarning => _PyExc_RuntimeWarning.value;

  set PyExc_RuntimeWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_RuntimeWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_FutureWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_FutureWarning');

  ffi.Pointer<PyObject> get PyExc_FutureWarning => _PyExc_FutureWarning.value;

  set PyExc_FutureWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_FutureWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ImportWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ImportWarning');

  ffi.Pointer<PyObject> get PyExc_ImportWarning => _PyExc_ImportWarning.value;

  set PyExc_ImportWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_ImportWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_UnicodeWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_UnicodeWarning');

  ffi.Pointer<PyObject> get PyExc_UnicodeWarning => _PyExc_UnicodeWarning.value;

  set PyExc_UnicodeWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_UnicodeWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_BytesWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_BytesWarning');

  ffi.Pointer<PyObject> get PyExc_BytesWarning => _PyExc_BytesWarning.value;

  set PyExc_BytesWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_BytesWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_EncodingWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_EncodingWarning');

  ffi.Pointer<PyObject> get PyExc_EncodingWarning =>
      _PyExc_EncodingWarning.value;

  set PyExc_EncodingWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_EncodingWarning.value = value;

  late final ffi.Pointer<ffi.Pointer<PyObject>> _PyExc_ResourceWarning =
  _lookup<ffi.Pointer<PyObject>>('PyExc_ResourceWarning');

  ffi.Pointer<PyObject> get PyExc_ResourceWarning =>
      _PyExc_ResourceWarning.value;

  set PyExc_ResourceWarning(ffi.Pointer<PyObject> value) =>
      _PyExc_ResourceWarning.value = value;

  int PyErr_BadArgument() {
    return _PyErr_BadArgument();
  }

  late final _PyErr_BadArgumentPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('PyErr_BadArgument');
  late final _PyErr_BadArgument =
  _PyErr_BadArgumentPtr.asFunction<int Function()>();

  ffi.Pointer<PyObject> PyErr_NoMemory() {
    return _PyErr_NoMemory();
  }

  late final _PyErr_NoMemoryPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyErr_NoMemory');
  late final _PyErr_NoMemory =
  _PyErr_NoMemoryPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  ffi.Pointer<PyObject> PyErr_SetFromErrno(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyErr_SetFromErrno(
      arg0,
    );
  }

  late final _PyErr_SetFromErrnoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyErr_SetFromErrno');
  late final _PyErr_SetFromErrno = _PyErr_SetFromErrnoPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyErr_SetFromErrnoWithFilenameObject(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PyErr_SetFromErrnoWithFilenameObject(
      arg0,
      arg1,
    );
  }

  late final _PyErr_SetFromErrnoWithFilenameObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_SetFromErrnoWithFilenameObject');
  late final _PyErr_SetFromErrnoWithFilenameObject =
  _PyErr_SetFromErrnoWithFilenameObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyErr_SetFromErrnoWithFilenameObjects(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyErr_SetFromErrnoWithFilenameObjects(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_SetFromErrnoWithFilenameObjectsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_SetFromErrnoWithFilenameObjects');
  late final _PyErr_SetFromErrnoWithFilenameObjects =
  _PyErr_SetFromErrnoWithFilenameObjectsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyErr_SetFromErrnoWithFilename(
      ffi.Pointer<PyObject> exc,
      ffi.Pointer<ffi.Char> filename,
      ) {
    return _PyErr_SetFromErrnoWithFilename(
      exc,
      filename,
    );
  }

  late final _PyErr_SetFromErrnoWithFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyErr_SetFromErrnoWithFilename');
  late final _PyErr_SetFromErrnoWithFilename =
  _PyErr_SetFromErrnoWithFilenamePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyErr_Format(
      ffi.Pointer<PyObject> exception,
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyErr_Format(
      exception,
      format,
    );
  }

  late final _PyErr_FormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>>('PyErr_Format');
  late final _PyErr_Format = _PyErr_FormatPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyErr_FormatV(
      ffi.Pointer<PyObject> exception,
      ffi.Pointer<ffi.Char> format,
      ffi.Pointer<__va_list_tag> vargs,
      ) {
    return _PyErr_FormatV(
      exception,
      format,
      vargs,
    );
  }

  late final _PyErr_FormatVPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('PyErr_FormatV');
  late final _PyErr_FormatV = _PyErr_FormatVPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  ffi.Pointer<PyObject> PyErr_SetImportErrorSubclass(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ffi.Pointer<PyObject> arg3,
      ) {
    return _PyErr_SetImportErrorSubclass(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyErr_SetImportErrorSubclassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_SetImportErrorSubclass');
  late final _PyErr_SetImportErrorSubclass =
  _PyErr_SetImportErrorSubclassPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyErr_SetImportError(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyErr_SetImportError(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_SetImportErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_SetImportError');
  late final _PyErr_SetImportError = _PyErr_SetImportErrorPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  void PyErr_BadInternalCall() {
    return _PyErr_BadInternalCall1();
  }

  late final _PyErr_BadInternalCallPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyErr_BadInternalCall');
  late final _PyErr_BadInternalCall1 =
  _PyErr_BadInternalCallPtr.asFunction<void Function()>();

  void _PyErr_BadInternalCall(
      ffi.Pointer<ffi.Char> filename,
      int lineno,
      ) {
    return __PyErr_BadInternalCall(
      filename,
      lineno,
    );
  }

  late final __PyErr_BadInternalCallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('_PyErr_BadInternalCall');
  late final __PyErr_BadInternalCall = __PyErr_BadInternalCallPtr
      .asFunction<void Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<PyObject> PyErr_NewException(
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<PyObject> base,
      ffi.Pointer<PyObject> dict,
      ) {
    return _PyErr_NewException(
      name,
      base,
      dict,
    );
  }

  late final _PyErr_NewExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_NewException');
  late final _PyErr_NewException = _PyErr_NewExceptionPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyErr_NewExceptionWithDoc(
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<ffi.Char> doc,
      ffi.Pointer<PyObject> base,
      ffi.Pointer<PyObject> dict,
      ) {
    return _PyErr_NewExceptionWithDoc(
      name,
      doc,
      base,
      dict,
    );
  }

  late final _PyErr_NewExceptionWithDocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_NewExceptionWithDoc');
  late final _PyErr_NewExceptionWithDoc =
  _PyErr_NewExceptionWithDocPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  void PyErr_WriteUnraisable(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyErr_WriteUnraisable(
      arg0,
    );
  }

  late final _PyErr_WriteUnraisablePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      'PyErr_WriteUnraisable');
  late final _PyErr_WriteUnraisable = _PyErr_WriteUnraisablePtr.asFunction<
      void Function(ffi.Pointer<PyObject>)>();

  int PyErr_CheckSignals() {
    return _PyErr_CheckSignals();
  }

  late final _PyErr_CheckSignalsPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('PyErr_CheckSignals');
  late final _PyErr_CheckSignals =
  _PyErr_CheckSignalsPtr.asFunction<int Function()>();

  void PyErr_SetInterrupt() {
    return _PyErr_SetInterrupt();
  }

  late final _PyErr_SetInterruptPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyErr_SetInterrupt');
  late final _PyErr_SetInterrupt =
  _PyErr_SetInterruptPtr.asFunction<void Function()>();

  int PyErr_SetInterruptEx(
      int signum,
      ) {
    return _PyErr_SetInterruptEx(
      signum,
    );
  }

  late final _PyErr_SetInterruptExPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
      'PyErr_SetInterruptEx');
  late final _PyErr_SetInterruptEx =
  _PyErr_SetInterruptExPtr.asFunction<int Function(int)>();

  void PyErr_SyntaxLocation(
      ffi.Pointer<ffi.Char> filename,
      int lineno,
      ) {
    return _PyErr_SyntaxLocation(
      filename,
      lineno,
    );
  }

  late final _PyErr_SyntaxLocationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('PyErr_SyntaxLocation');
  late final _PyErr_SyntaxLocation = _PyErr_SyntaxLocationPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int)>();

  void PyErr_SyntaxLocationEx(
      ffi.Pointer<ffi.Char> filename,
      int lineno,
      int col_offset,
      ) {
    return _PyErr_SyntaxLocationEx(
      filename,
      lineno,
      col_offset,
    );
  }

  late final _PyErr_SyntaxLocationExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Int)>>('PyErr_SyntaxLocationEx');
  late final _PyErr_SyntaxLocationEx = _PyErr_SyntaxLocationExPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<PyObject> PyErr_ProgramText(
      ffi.Pointer<ffi.Char> filename,
      int lineno,
      ) {
    return _PyErr_ProgramText(
      filename,
      lineno,
    );
  }

  late final _PyErr_ProgramTextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>, ffi.Int)>>('PyErr_ProgramText');
  late final _PyErr_ProgramText = _PyErr_ProgramTextPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<PyObject> PyUnicodeDecodeError_Create(
      ffi.Pointer<ffi.Char> encoding,
      ffi.Pointer<ffi.Char> object,
      int length,
      int start,
      int end,
      ffi.Pointer<ffi.Char> reason,
      ) {
    return _PyUnicodeDecodeError_Create(
      encoding,
      object,
      length,
      start,
      end,
      reason,
    );
  }

  late final _PyUnicodeDecodeError_CreatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              Py_ssize_t,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>)>>('PyUnicodeDecodeError_Create');
  late final _PyUnicodeDecodeError_Create =
  _PyUnicodeDecodeError_CreatePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyUnicodeEncodeError_GetEncoding(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyUnicodeEncodeError_GetEncoding(
      arg0,
    );
  }

  late final _PyUnicodeEncodeError_GetEncodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicodeEncodeError_GetEncoding');
  late final _PyUnicodeEncodeError_GetEncoding =
  _PyUnicodeEncodeError_GetEncodingPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicodeDecodeError_GetEncoding(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyUnicodeDecodeError_GetEncoding(
      arg0,
    );
  }

  late final _PyUnicodeDecodeError_GetEncodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicodeDecodeError_GetEncoding');
  late final _PyUnicodeDecodeError_GetEncoding =
  _PyUnicodeDecodeError_GetEncodingPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicodeEncodeError_GetObject(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyUnicodeEncodeError_GetObject(
      arg0,
    );
  }

  late final _PyUnicodeEncodeError_GetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicodeEncodeError_GetObject');
  late final _PyUnicodeEncodeError_GetObject =
  _PyUnicodeEncodeError_GetObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicodeDecodeError_GetObject(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyUnicodeDecodeError_GetObject(
      arg0,
    );
  }

  late final _PyUnicodeDecodeError_GetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicodeDecodeError_GetObject');
  late final _PyUnicodeDecodeError_GetObject =
  _PyUnicodeDecodeError_GetObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicodeTranslateError_GetObject(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyUnicodeTranslateError_GetObject(
      arg0,
    );
  }

  late final _PyUnicodeTranslateError_GetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicodeTranslateError_GetObject');
  late final _PyUnicodeTranslateError_GetObject =
  _PyUnicodeTranslateError_GetObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyUnicodeEncodeError_GetStart(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<Py_ssize_t> arg1,
      ) {
    return _PyUnicodeEncodeError_GetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeEncodeError_GetStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicodeEncodeError_GetStart');
  late final _PyUnicodeEncodeError_GetStart =
  _PyUnicodeEncodeError_GetStartPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<Py_ssize_t>)>();

  int PyUnicodeDecodeError_GetStart(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<Py_ssize_t> arg1,
      ) {
    return _PyUnicodeDecodeError_GetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeDecodeError_GetStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicodeDecodeError_GetStart');
  late final _PyUnicodeDecodeError_GetStart =
  _PyUnicodeDecodeError_GetStartPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<Py_ssize_t>)>();

  int PyUnicodeTranslateError_GetStart(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<Py_ssize_t> arg1,
      ) {
    return _PyUnicodeTranslateError_GetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeTranslateError_GetStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicodeTranslateError_GetStart');
  late final _PyUnicodeTranslateError_GetStart =
  _PyUnicodeTranslateError_GetStartPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<Py_ssize_t>)>();

  int PyUnicodeEncodeError_SetStart(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyUnicodeEncodeError_SetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeEncodeError_SetStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              Py_ssize_t)>>('PyUnicodeEncodeError_SetStart');
  late final _PyUnicodeEncodeError_SetStart = _PyUnicodeEncodeError_SetStartPtr
      .asFunction<int Function(ffi.Pointer<PyObject>, int)>();

  int PyUnicodeDecodeError_SetStart(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyUnicodeDecodeError_SetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeDecodeError_SetStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              Py_ssize_t)>>('PyUnicodeDecodeError_SetStart');
  late final _PyUnicodeDecodeError_SetStart = _PyUnicodeDecodeError_SetStartPtr
      .asFunction<int Function(ffi.Pointer<PyObject>, int)>();

  int PyUnicodeTranslateError_SetStart(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyUnicodeTranslateError_SetStart(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeTranslateError_SetStartPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              Py_ssize_t)>>('PyUnicodeTranslateError_SetStart');
  late final _PyUnicodeTranslateError_SetStart =
  _PyUnicodeTranslateError_SetStartPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int)>();

  int PyUnicodeEncodeError_GetEnd(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<Py_ssize_t> arg1,
      ) {
    return _PyUnicodeEncodeError_GetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeEncodeError_GetEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicodeEncodeError_GetEnd');
  late final _PyUnicodeEncodeError_GetEnd =
  _PyUnicodeEncodeError_GetEndPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<Py_ssize_t>)>();

  int PyUnicodeDecodeError_GetEnd(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<Py_ssize_t> arg1,
      ) {
    return _PyUnicodeDecodeError_GetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeDecodeError_GetEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicodeDecodeError_GetEnd');
  late final _PyUnicodeDecodeError_GetEnd =
  _PyUnicodeDecodeError_GetEndPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<Py_ssize_t>)>();

  int PyUnicodeTranslateError_GetEnd(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<Py_ssize_t> arg1,
      ) {
    return _PyUnicodeTranslateError_GetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeTranslateError_GetEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<Py_ssize_t>)>>('PyUnicodeTranslateError_GetEnd');
  late final _PyUnicodeTranslateError_GetEnd =
  _PyUnicodeTranslateError_GetEndPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<Py_ssize_t>)>();

  int PyUnicodeEncodeError_SetEnd(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyUnicodeEncodeError_SetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeEncodeError_SetEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              Py_ssize_t)>>('PyUnicodeEncodeError_SetEnd');
  late final _PyUnicodeEncodeError_SetEnd = _PyUnicodeEncodeError_SetEndPtr
      .asFunction<int Function(ffi.Pointer<PyObject>, int)>();

  int PyUnicodeDecodeError_SetEnd(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyUnicodeDecodeError_SetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeDecodeError_SetEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              Py_ssize_t)>>('PyUnicodeDecodeError_SetEnd');
  late final _PyUnicodeDecodeError_SetEnd = _PyUnicodeDecodeError_SetEndPtr
      .asFunction<int Function(ffi.Pointer<PyObject>, int)>();

  int PyUnicodeTranslateError_SetEnd(
      ffi.Pointer<PyObject> arg0,
      int arg1,
      ) {
    return _PyUnicodeTranslateError_SetEnd(
      arg0,
      arg1,
    );
  }

  late final _PyUnicodeTranslateError_SetEndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              Py_ssize_t)>>('PyUnicodeTranslateError_SetEnd');
  late final _PyUnicodeTranslateError_SetEnd =
  _PyUnicodeTranslateError_SetEndPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> PyUnicodeEncodeError_GetReason(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyUnicodeEncodeError_GetReason(
      arg0,
    );
  }

  late final _PyUnicodeEncodeError_GetReasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicodeEncodeError_GetReason');
  late final _PyUnicodeEncodeError_GetReason =
  _PyUnicodeEncodeError_GetReasonPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicodeDecodeError_GetReason(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyUnicodeDecodeError_GetReason(
      arg0,
    );
  }

  late final _PyUnicodeDecodeError_GetReasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicodeDecodeError_GetReason');
  late final _PyUnicodeDecodeError_GetReason =
  _PyUnicodeDecodeError_GetReasonPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyUnicodeTranslateError_GetReason(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyUnicodeTranslateError_GetReason(
      arg0,
    );
  }

  late final _PyUnicodeTranslateError_GetReasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyUnicodeTranslateError_GetReason');
  late final _PyUnicodeTranslateError_GetReason =
  _PyUnicodeTranslateError_GetReasonPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyUnicodeEncodeError_SetReason(
      ffi.Pointer<PyObject> exc,
      ffi.Pointer<ffi.Char> reason,
      ) {
    return _PyUnicodeEncodeError_SetReason(
      exc,
      reason,
    );
  }

  late final _PyUnicodeEncodeError_SetReasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyUnicodeEncodeError_SetReason');
  late final _PyUnicodeEncodeError_SetReason =
  _PyUnicodeEncodeError_SetReasonPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyUnicodeDecodeError_SetReason(
      ffi.Pointer<PyObject> exc,
      ffi.Pointer<ffi.Char> reason,
      ) {
    return _PyUnicodeDecodeError_SetReason(
      exc,
      reason,
    );
  }

  late final _PyUnicodeDecodeError_SetReasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyUnicodeDecodeError_SetReason');
  late final _PyUnicodeDecodeError_SetReason =
  _PyUnicodeDecodeError_SetReasonPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyUnicodeTranslateError_SetReason(
      ffi.Pointer<PyObject> exc,
      ffi.Pointer<ffi.Char> reason,
      ) {
    return _PyUnicodeTranslateError_SetReason(
      exc,
      reason,
    );
  }

  late final _PyUnicodeTranslateError_SetReasonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyUnicodeTranslateError_SetReason');
  late final _PyUnicodeTranslateError_SetReason =
  _PyUnicodeTranslateError_SetReasonPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyOS_snprintf(
      ffi.Pointer<ffi.Char> str,
      int size,
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyOS_snprintf(
      str,
      size,
      format,
    );
  }

  late final _PyOS_snprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('PyOS_snprintf');
  late final _PyOS_snprintf = _PyOS_snprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int PyOS_vsnprintf(
      ffi.Pointer<ffi.Char> str,
      int size,
      ffi.Pointer<ffi.Char> format,
      ffi.Pointer<__va_list_tag> va,
      ) {
    return _PyOS_vsnprintf(
      str,
      size,
      format,
      va,
    );
  }

  late final _PyOS_vsnprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('PyOS_vsnprintf');
  late final _PyOS_vsnprintf = _PyOS_vsnprintfPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  void PyThread_init_thread() {
    return _PyThread_init_thread();
  }

  late final _PyThread_init_threadPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyThread_init_thread');
  late final _PyThread_init_thread =
  _PyThread_init_threadPtr.asFunction<void Function()>();

  int PyThread_start_new_thread(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
      arg0,
      ffi.Pointer<ffi.Void> arg1,
      ) {
    return _PyThread_start_new_thread(
      arg0,
      arg1,
    );
  }

  late final _PyThread_start_new_threadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('PyThread_start_new_thread');
  late final _PyThread_start_new_thread =
  _PyThread_start_new_threadPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  void PyThread_exit_thread() {
    return _PyThread_exit_thread();
  }

  late final _PyThread_exit_threadPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyThread_exit_thread');
  late final _PyThread_exit_thread =
  _PyThread_exit_threadPtr.asFunction<void Function()>();

  int PyThread_get_thread_ident() {
    return _PyThread_get_thread_ident();
  }

  late final _PyThread_get_thread_identPtr =
  _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
      'PyThread_get_thread_ident');
  late final _PyThread_get_thread_ident =
  _PyThread_get_thread_identPtr.asFunction<int Function()>();

  int PyThread_get_thread_native_id() {
    return _PyThread_get_thread_native_id();
  }

  late final _PyThread_get_thread_native_idPtr =
  _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>(
      'PyThread_get_thread_native_id');
  late final _PyThread_get_thread_native_id =
  _PyThread_get_thread_native_idPtr.asFunction<int Function()>();

  PyThread_type_lock PyThread_allocate_lock() {
    return _PyThread_allocate_lock();
  }

  late final _PyThread_allocate_lockPtr =
  _lookup<ffi.NativeFunction<PyThread_type_lock Function()>>(
      'PyThread_allocate_lock');
  late final _PyThread_allocate_lock =
  _PyThread_allocate_lockPtr.asFunction<PyThread_type_lock Function()>();

  void PyThread_free_lock(
      PyThread_type_lock arg0,
      ) {
    return _PyThread_free_lock(
      arg0,
    );
  }

  late final _PyThread_free_lockPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(PyThread_type_lock)>>(
      'PyThread_free_lock');
  late final _PyThread_free_lock =
  _PyThread_free_lockPtr.asFunction<void Function(PyThread_type_lock)>();

  int PyThread_acquire_lock(
      PyThread_type_lock arg0,
      int arg1,
      ) {
    return _PyThread_acquire_lock(
      arg0,
      arg1,
    );
  }

  late final _PyThread_acquire_lockPtr = _lookup<
      ffi.NativeFunction<ffi.Int Function(PyThread_type_lock, ffi.Int)>>(
      'PyThread_acquire_lock');
  late final _PyThread_acquire_lock = _PyThread_acquire_lockPtr.asFunction<
      int Function(PyThread_type_lock, int)>();

  int PyThread_acquire_lock_timed(
      PyThread_type_lock arg0,
      int microseconds,
      int intr_flag,
      ) {
    return _PyThread_acquire_lock_timed(
      arg0,
      microseconds,
      intr_flag,
    );
  }

  late final _PyThread_acquire_lock_timedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(PyThread_type_lock, ffi.LongLong,
              ffi.Int)>>('PyThread_acquire_lock_timed');
  late final _PyThread_acquire_lock_timed = _PyThread_acquire_lock_timedPtr
      .asFunction<int Function(PyThread_type_lock, int, int)>();

  void PyThread_release_lock(
      PyThread_type_lock arg0,
      ) {
    return _PyThread_release_lock(
      arg0,
    );
  }

  late final _PyThread_release_lockPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(PyThread_type_lock)>>(
      'PyThread_release_lock');
  late final _PyThread_release_lock =
  _PyThread_release_lockPtr.asFunction<void Function(PyThread_type_lock)>();

  int PyThread_get_stacksize() {
    return _PyThread_get_stacksize();
  }

  late final _PyThread_get_stacksizePtr =
  _lookup<ffi.NativeFunction<ffi.Size Function()>>(
      'PyThread_get_stacksize');
  late final _PyThread_get_stacksize =
  _PyThread_get_stacksizePtr.asFunction<int Function()>();

  int PyThread_set_stacksize(
      int arg0,
      ) {
    return _PyThread_set_stacksize(
      arg0,
    );
  }

  late final _PyThread_set_stacksizePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size)>>(
      'PyThread_set_stacksize');
  late final _PyThread_set_stacksize =
  _PyThread_set_stacksizePtr.asFunction<int Function(int)>();

  ffi.Pointer<PyObject> PyThread_GetInfo() {
    return _PyThread_GetInfo();
  }

  late final _PyThread_GetInfoPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyThread_GetInfo');
  late final _PyThread_GetInfo =
  _PyThread_GetInfoPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  int PyThread_create_key() {
    return _PyThread_create_key();
  }

  late final _PyThread_create_keyPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('PyThread_create_key');
  late final _PyThread_create_key =
  _PyThread_create_keyPtr.asFunction<int Function()>();

  void PyThread_delete_key(
      int key,
      ) {
    return _PyThread_delete_key(
      key,
    );
  }

  late final _PyThread_delete_keyPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
      'PyThread_delete_key');
  late final _PyThread_delete_key =
  _PyThread_delete_keyPtr.asFunction<void Function(int)>();

  int PyThread_set_key_value(
      int key,
      ffi.Pointer<ffi.Void> value,
      ) {
    return _PyThread_set_key_value(
      key,
      value,
    );
  }

  late final _PyThread_set_key_valuePtr = _lookup<
      ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<ffi.Void>)>>(
      'PyThread_set_key_value');
  late final _PyThread_set_key_value = _PyThread_set_key_valuePtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> PyThread_get_key_value(
      int key,
      ) {
    return _PyThread_get_key_value(
      key,
    );
  }

  late final _PyThread_get_key_valuePtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Int)>>(
      'PyThread_get_key_value');
  late final _PyThread_get_key_value = _PyThread_get_key_valuePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  void PyThread_delete_key_value(
      int key,
      ) {
    return _PyThread_delete_key_value(
      key,
    );
  }

  late final _PyThread_delete_key_valuePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
      'PyThread_delete_key_value');
  late final _PyThread_delete_key_value =
  _PyThread_delete_key_valuePtr.asFunction<void Function(int)>();

  void PyThread_ReInitTLS() {
    return _PyThread_ReInitTLS();
  }

  late final _PyThread_ReInitTLSPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyThread_ReInitTLS');
  late final _PyThread_ReInitTLS =
  _PyThread_ReInitTLSPtr.asFunction<void Function()>();

  ffi.Pointer<Py_tss_t> PyThread_tss_alloc() {
    return _PyThread_tss_alloc();
  }

  late final _PyThread_tss_allocPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<Py_tss_t> Function()>>(
      'PyThread_tss_alloc');
  late final _PyThread_tss_alloc =
  _PyThread_tss_allocPtr.asFunction<ffi.Pointer<Py_tss_t> Function()>();

  void PyThread_tss_free(
      ffi.Pointer<Py_tss_t> key,
      ) {
    return _PyThread_tss_free(
      key,
    );
  }

  late final _PyThread_tss_freePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Py_tss_t>)>>(
      'PyThread_tss_free');
  late final _PyThread_tss_free =
  _PyThread_tss_freePtr.asFunction<void Function(ffi.Pointer<Py_tss_t>)>();

  int PyThread_tss_is_created(
      ffi.Pointer<Py_tss_t> key,
      ) {
    return _PyThread_tss_is_created(
      key,
    );
  }

  late final _PyThread_tss_is_createdPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Py_tss_t>)>>(
      'PyThread_tss_is_created');
  late final _PyThread_tss_is_created = _PyThread_tss_is_createdPtr.asFunction<
      int Function(ffi.Pointer<Py_tss_t>)>();

  int PyThread_tss_create(
      ffi.Pointer<Py_tss_t> key,
      ) {
    return _PyThread_tss_create(
      key,
    );
  }

  late final _PyThread_tss_createPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<Py_tss_t>)>>(
      'PyThread_tss_create');
  late final _PyThread_tss_create =
  _PyThread_tss_createPtr.asFunction<int Function(ffi.Pointer<Py_tss_t>)>();

  void PyThread_tss_delete(
      ffi.Pointer<Py_tss_t> key,
      ) {
    return _PyThread_tss_delete(
      key,
    );
  }

  late final _PyThread_tss_deletePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Py_tss_t>)>>(
      'PyThread_tss_delete');
  late final _PyThread_tss_delete = _PyThread_tss_deletePtr.asFunction<
      void Function(ffi.Pointer<Py_tss_t>)>();

  int PyThread_tss_set(
      ffi.Pointer<Py_tss_t> key,
      ffi.Pointer<ffi.Void> value,
      ) {
    return _PyThread_tss_set(
      key,
      value,
    );
  }

  late final _PyThread_tss_setPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<Py_tss_t>,
              ffi.Pointer<ffi.Void>)>>('PyThread_tss_set');
  late final _PyThread_tss_set = _PyThread_tss_setPtr.asFunction<
      int Function(ffi.Pointer<Py_tss_t>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> PyThread_tss_get(
      ffi.Pointer<Py_tss_t> key,
      ) {
    return _PyThread_tss_get(
      key,
    );
  }

  late final _PyThread_tss_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<Py_tss_t>)>>('PyThread_tss_get');
  late final _PyThread_tss_get = _PyThread_tss_getPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<Py_tss_t>)>();

  int PyArg_Parse(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      ) {
    return _PyArg_Parse(
      arg0,
      arg1,
    );
  }

  late final _PyArg_ParsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>>('PyArg_Parse');
  late final _PyArg_Parse = _PyArg_ParsePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyArg_ParseTuple(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      ) {
    return _PyArg_ParseTuple(
      arg0,
      arg1,
    );
  }

  late final _PyArg_ParseTuplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyArg_ParseTuple');
  late final _PyArg_ParseTuple = _PyArg_ParseTuplePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyArg_ParseTupleAndKeywords(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<ffi.Char> arg2,
      ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
      ) {
    return _PyArg_ParseTupleAndKeywords(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyArg_ParseTupleAndKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'PyArg_ParseTupleAndKeywords');
  late final _PyArg_ParseTupleAndKeywords =
  _PyArg_ParseTupleAndKeywordsPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int PyArg_VaParse(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      ffi.Pointer<__va_list_tag> arg2,
      ) {
    return _PyArg_VaParse(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyArg_VaParsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('PyArg_VaParse');
  late final _PyArg_VaParse = _PyArg_VaParsePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<__va_list_tag>)>();

  int PyArg_VaParseTupleAndKeywords(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<ffi.Char> arg2,
      ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
      ffi.Pointer<__va_list_tag> arg4,
      ) {
    return _PyArg_VaParseTupleAndKeywords(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _PyArg_VaParseTupleAndKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<__va_list_tag>)>>('PyArg_VaParseTupleAndKeywords');
  late final _PyArg_VaParseTupleAndKeywords =
  _PyArg_VaParseTupleAndKeywordsPtr.asFunction<
      int Function(
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<__va_list_tag>)>();

  int PyArg_ValidateKeywordArguments(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyArg_ValidateKeywordArguments(
      arg0,
    );
  }

  late final _PyArg_ValidateKeywordArgumentsPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyArg_ValidateKeywordArguments');
  late final _PyArg_ValidateKeywordArguments =
  _PyArg_ValidateKeywordArgumentsPtr.asFunction<
      int Function(ffi.Pointer<PyObject>)>();

  int PyArg_UnpackTuple(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      int arg2,
      int arg3,
      ) {
    return _PyArg_UnpackTuple(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PyArg_UnpackTuplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              Py_ssize_t, Py_ssize_t)>>('PyArg_UnpackTuple');
  late final _PyArg_UnpackTuple = _PyArg_UnpackTuplePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<PyObject> Py_BuildValue(
      ffi.Pointer<ffi.Char> arg0,
      ) {
    return _Py_BuildValue(
      arg0,
    );
  }

  late final _Py_BuildValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('Py_BuildValue');
  late final _Py_BuildValue = _Py_BuildValuePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> _Py_BuildValue_SizeT(
      ffi.Pointer<ffi.Char> arg0,
      ) {
    return __Py_BuildValue_SizeT(
      arg0,
    );
  }

  late final __Py_BuildValue_SizeTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('_Py_BuildValue_SizeT');
  late final __Py_BuildValue_SizeT = __Py_BuildValue_SizeTPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> Py_VaBuildValue(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<__va_list_tag> arg1,
      ) {
    return _Py_VaBuildValue(
      arg0,
      arg1,
    );
  }

  late final _Py_VaBuildValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<__va_list_tag>)>>('Py_VaBuildValue');
  late final _Py_VaBuildValue = _Py_VaBuildValuePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<__va_list_tag>)>();

  int PyModule_AddObjectRef(
      ffi.Pointer<PyObject> mod,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<PyObject> value,
      ) {
    return _PyModule_AddObjectRef(
      mod,
      name,
      value,
    );
  }

  late final _PyModule_AddObjectRefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PyModule_AddObjectRef');
  late final _PyModule_AddObjectRef = _PyModule_AddObjectRefPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>)>();

  int PyModule_AddObject(
      ffi.Pointer<PyObject> mod,
      ffi.Pointer<ffi.Char> arg1,
      ffi.Pointer<PyObject> value,
      ) {
    return _PyModule_AddObject(
      mod,
      arg1,
      value,
    );
  }

  late final _PyModule_AddObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PyModule_AddObject');
  late final _PyModule_AddObject = _PyModule_AddObjectPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>)>();

  int PyModule_AddIntConstant(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      int arg2,
      ) {
    return _PyModule_AddIntConstant(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyModule_AddIntConstantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              ffi.Long)>>('PyModule_AddIntConstant');
  late final _PyModule_AddIntConstant = _PyModule_AddIntConstantPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>, int)>();

  int PyModule_AddStringConstant(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      ffi.Pointer<ffi.Char> arg2,
      ) {
    return _PyModule_AddStringConstant(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyModule_AddStringConstantPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyModule_AddStringConstant');
  late final _PyModule_AddStringConstant =
  _PyModule_AddStringConstantPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int PyModule_AddType(
      ffi.Pointer<PyObject> module,
      ffi.Pointer<PyTypeObject> type,
      ) {
    return _PyModule_AddType(
      module,
      type,
    );
  }

  late final _PyModule_AddTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyTypeObject>)>>('PyModule_AddType');
  late final _PyModule_AddType = _PyModule_AddTypePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyTypeObject>)>();

  int PyModule_SetDocString(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<ffi.Char> arg1,
      ) {
    return _PyModule_SetDocString(
      arg0,
      arg1,
    );
  }

  late final _PyModule_SetDocStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyModule_SetDocString');
  late final _PyModule_SetDocString = _PyModule_SetDocStringPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyModule_AddFunctions(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyMethodDef> arg1,
      ) {
    return _PyModule_AddFunctions(
      arg0,
      arg1,
    );
  }

  late final _PyModule_AddFunctionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyMethodDef>)>>('PyModule_AddFunctions');
  late final _PyModule_AddFunctions = _PyModule_AddFunctionsPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyMethodDef>)>();

  int PyModule_ExecDef(
      ffi.Pointer<PyObject> module,
      ffi.Pointer<PyModuleDef> def,
      ) {
    return _PyModule_ExecDef(
      module,
      def,
    );
  }

  late final _PyModule_ExecDefPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyModuleDef>)>>('PyModule_ExecDef');
  late final _PyModule_ExecDef = _PyModule_ExecDefPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyModuleDef>)>();

  ffi.Pointer<PyObject> PyModule_Create2(
      ffi.Pointer<PyModuleDef> arg0,
      int apiver,
      ) {
    return _PyModule_Create2(
      arg0,
      apiver,
    );
  }

  late final _PyModule_Create2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyModuleDef>, ffi.Int)>>('PyModule_Create2');
  late final _PyModule_Create2 = _PyModule_Create2Ptr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyModuleDef>, int)>();

  ffi.Pointer<PyObject> PyModule_FromDefAndSpec2(
      ffi.Pointer<PyModuleDef> def,
      ffi.Pointer<PyObject> spec,
      int module_api_version,
      ) {
    return _PyModule_FromDefAndSpec2(
      def,
      spec,
      module_api_version,
    );
  }

  late final _PyModule_FromDefAndSpec2Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyModuleDef>,
              ffi.Pointer<PyObject>, ffi.Int)>>('PyModule_FromDefAndSpec2');
  late final _PyModule_FromDefAndSpec2 =
  _PyModule_FromDefAndSpec2Ptr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyModuleDef>, ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> Py_CompileString(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<ffi.Char> arg1,
      int arg2,
      ) {
    return _Py_CompileString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _Py_CompileStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('Py_CompileString');
  late final _Py_CompileString = _Py_CompileStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void PyErr_Print() {
    return _PyErr_Print();
  }

  late final _PyErr_PrintPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyErr_Print');
  late final _PyErr_Print = _PyErr_PrintPtr.asFunction<void Function()>();

  void PyErr_PrintEx(
      int arg0,
      ) {
    return _PyErr_PrintEx(
      arg0,
    );
  }

  late final _PyErr_PrintExPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('PyErr_PrintEx');
  late final _PyErr_PrintEx =
  _PyErr_PrintExPtr.asFunction<void Function(int)>();

  void PyErr_Display(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyErr_Display(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyErr_DisplayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyErr_Display');
  late final _PyErr_Display = _PyErr_DisplayPtr.asFunction<
      void Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>>
  _PyOS_InputHook =
  _lookup<ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>>(
      'PyOS_InputHook');

  ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> get PyOS_InputHook =>
      _PyOS_InputHook.value;

  set PyOS_InputHook(
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>> value) =>
      _PyOS_InputHook.value = value;

  void Py_Initialize() {
    return _Py_Initialize();
  }

  late final _Py_InitializePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('Py_Initialize');
  late final _Py_Initialize = _Py_InitializePtr.asFunction<void Function()>();

  void Py_InitializeEx(
      int arg0,
      ) {
    return _Py_InitializeEx(
      arg0,
    );
  }

  late final _Py_InitializeExPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
      'Py_InitializeEx');
  late final _Py_InitializeEx =
  _Py_InitializeExPtr.asFunction<void Function(int)>();

  void Py_Finalize() {
    return _Py_Finalize();
  }

  late final _Py_FinalizePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('Py_Finalize');
  late final _Py_Finalize = _Py_FinalizePtr.asFunction<void Function()>();

  int Py_FinalizeEx() {
    return _Py_FinalizeEx();
  }

  late final _Py_FinalizeExPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('Py_FinalizeEx');
  late final _Py_FinalizeEx = _Py_FinalizeExPtr.asFunction<int Function()>();

  int Py_IsInitialized() {
    return _Py_IsInitialized();
  }

  late final _Py_IsInitializedPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('Py_IsInitialized');
  late final _Py_IsInitialized =
  _Py_IsInitializedPtr.asFunction<int Function()>();

  ffi.Pointer<PyThreadState> Py_NewInterpreter() {
    return _Py_NewInterpreter();
  }

  late final _Py_NewInterpreterPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyThreadState> Function()>>(
      'Py_NewInterpreter');
  late final _Py_NewInterpreter =
  _Py_NewInterpreterPtr.asFunction<ffi.Pointer<PyThreadState> Function()>();

  void Py_EndInterpreter(
      ffi.Pointer<PyThreadState> arg0,
      ) {
    return _Py_EndInterpreter(
      arg0,
    );
  }

  late final _Py_EndInterpreterPtr = _lookup<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyThreadState>)>>(
      'Py_EndInterpreter');
  late final _Py_EndInterpreter = _Py_EndInterpreterPtr.asFunction<
      void Function(ffi.Pointer<PyThreadState>)>();

  int Py_AtExit(
      ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> func,
      ) {
    return _Py_AtExit(
      func,
    );
  }

  late final _Py_AtExitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'Py_AtExit');
  late final _Py_AtExit = _Py_AtExitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  void Py_Exit(
      int arg0,
      ) {
    return _Py_Exit(
      arg0,
    );
  }

  late final _Py_ExitPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('Py_Exit');
  late final _Py_Exit = _Py_ExitPtr.asFunction<void Function(int)>();

  int Py_Main(
      int argc,
      ffi.Pointer<ffi.Pointer<ffi.WChar>> argv,
      ) {
    return _Py_Main(
      argc,
      argv,
    );
  }

  late final _Py_MainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('Py_Main');
  late final _Py_Main = _Py_MainPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  int Py_BytesMain(
      int argc,
      ffi.Pointer<ffi.Pointer<ffi.Char>> argv,
      ) {
    return _Py_BytesMain(
      argc,
      argv,
    );
  }

  late final _Py_BytesMainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('Py_BytesMain');
  late final _Py_BytesMain = _Py_BytesMainPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void Py_SetProgramName(
      ffi.Pointer<ffi.WChar> arg0,
      ) {
    return _Py_SetProgramName(
      arg0,
    );
  }

  late final _Py_SetProgramNamePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
      'Py_SetProgramName');
  late final _Py_SetProgramName =
  _Py_SetProgramNamePtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> Py_GetProgramName() {
    return _Py_GetProgramName();
  }

  late final _Py_GetProgramNamePtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function()>>(
      'Py_GetProgramName');
  late final _Py_GetProgramName =
  _Py_GetProgramNamePtr.asFunction<ffi.Pointer<ffi.WChar> Function()>();

  void Py_SetPythonHome(
      ffi.Pointer<ffi.WChar> arg0,
      ) {
    return _Py_SetPythonHome(
      arg0,
    );
  }

  late final _Py_SetPythonHomePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
      'Py_SetPythonHome');
  late final _Py_SetPythonHome =
  _Py_SetPythonHomePtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> Py_GetPythonHome() {
    return _Py_GetPythonHome();
  }

  late final _Py_GetPythonHomePtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function()>>(
      'Py_GetPythonHome');
  late final _Py_GetPythonHome =
  _Py_GetPythonHomePtr.asFunction<ffi.Pointer<ffi.WChar> Function()>();

  ffi.Pointer<ffi.WChar> Py_GetProgramFullPath() {
    return _Py_GetProgramFullPath();
  }

  late final _Py_GetProgramFullPathPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function()>>(
      'Py_GetProgramFullPath');
  late final _Py_GetProgramFullPath =
  _Py_GetProgramFullPathPtr.asFunction<ffi.Pointer<ffi.WChar> Function()>();

  ffi.Pointer<ffi.WChar> Py_GetPrefix() {
    return _Py_GetPrefix();
  }

  late final _Py_GetPrefixPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function()>>(
      'Py_GetPrefix');
  late final _Py_GetPrefix =
  _Py_GetPrefixPtr.asFunction<ffi.Pointer<ffi.WChar> Function()>();

  ffi.Pointer<ffi.WChar> Py_GetExecPrefix() {
    return _Py_GetExecPrefix();
  }

  late final _Py_GetExecPrefixPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function()>>(
      'Py_GetExecPrefix');
  late final _Py_GetExecPrefix =
  _Py_GetExecPrefixPtr.asFunction<ffi.Pointer<ffi.WChar> Function()>();

  ffi.Pointer<ffi.WChar> Py_GetPath() {
    return _Py_GetPath();
  }

  late final _Py_GetPathPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function()>>(
      'Py_GetPath');
  late final _Py_GetPath =
  _Py_GetPathPtr.asFunction<ffi.Pointer<ffi.WChar> Function()>();

  void Py_SetPath(
      ffi.Pointer<ffi.WChar> arg0,
      ) {
    return _Py_SetPath(
      arg0,
    );
  }

  late final _Py_SetPathPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
      'Py_SetPath');
  late final _Py_SetPath =
  _Py_SetPathPtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.Char> Py_GetVersion() {
    return _Py_GetVersion();
  }

  late final _Py_GetVersionPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'Py_GetVersion');
  late final _Py_GetVersion =
  _Py_GetVersionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> Py_GetPlatform() {
    return _Py_GetPlatform();
  }

  late final _Py_GetPlatformPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'Py_GetPlatform');
  late final _Py_GetPlatform =
  _Py_GetPlatformPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> Py_GetCopyright() {
    return _Py_GetCopyright();
  }

  late final _Py_GetCopyrightPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'Py_GetCopyright');
  late final _Py_GetCopyright =
  _Py_GetCopyrightPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> Py_GetCompiler() {
    return _Py_GetCompiler();
  }

  late final _Py_GetCompilerPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'Py_GetCompiler');
  late final _Py_GetCompiler =
  _Py_GetCompilerPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> Py_GetBuildInfo() {
    return _Py_GetBuildInfo();
  }

  late final _Py_GetBuildInfoPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'Py_GetBuildInfo');
  late final _Py_GetBuildInfo =
  _Py_GetBuildInfoPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  PyOS_sighandler_t PyOS_getsig(
      int arg0,
      ) {
    return _PyOS_getsig(
      arg0,
    );
  }

  late final _PyOS_getsigPtr =
  _lookup<ffi.NativeFunction<PyOS_sighandler_t Function(ffi.Int)>>(
      'PyOS_getsig');
  late final _PyOS_getsig =
  _PyOS_getsigPtr.asFunction<PyOS_sighandler_t Function(int)>();

  PyOS_sighandler_t PyOS_setsig(
      int arg0,
      PyOS_sighandler_t arg1,
      ) {
    return _PyOS_setsig(
      arg0,
      arg1,
    );
  }

  late final _PyOS_setsigPtr = _lookup<
      ffi.NativeFunction<
          PyOS_sighandler_t Function(
              ffi.Int, PyOS_sighandler_t)>>('PyOS_setsig');
  late final _PyOS_setsig = _PyOS_setsigPtr.asFunction<
      PyOS_sighandler_t Function(int, PyOS_sighandler_t)>();

  late final ffi.Pointer<ffi.UnsignedLong> _Py_Version =
  _lookup<ffi.UnsignedLong>('Py_Version');

  int get Py_Version => _Py_Version.value;

  set Py_Version(int value) => _Py_Version.value = value;

  ffi.Pointer<PyObject> PyEval_EvalCode(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<PyObject> arg2,
      ) {
    return _PyEval_EvalCode(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyEval_EvalCodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyEval_EvalCode');
  late final _PyEval_EvalCode = _PyEval_EvalCodePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyEval_EvalCodeEx(
      ffi.Pointer<PyObject> co,
      ffi.Pointer<PyObject> globals,
      ffi.Pointer<PyObject> locals,
      ffi.Pointer<ffi.Pointer<PyObject>> args,
      int argc,
      ffi.Pointer<ffi.Pointer<PyObject>> kwds,
      int kwdc,
      ffi.Pointer<ffi.Pointer<PyObject>> defs,
      int defc,
      ffi.Pointer<PyObject> kwdefs,
      ffi.Pointer<PyObject> closure,
      ) {
    return _PyEval_EvalCodeEx(
      co,
      globals,
      locals,
      args,
      argc,
      kwds,
      kwdc,
      defs,
      defc,
      kwdefs,
      closure,
    );
  }

  late final _PyEval_EvalCodeExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<PyObject>>,
              ffi.Int,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyEval_EvalCodeEx');
  late final _PyEval_EvalCodeEx = _PyEval_EvalCodeExPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Pointer<PyObject>>,
          int,
          ffi.Pointer<ffi.Pointer<PyObject>>,
          int,
          ffi.Pointer<ffi.Pointer<PyObject>>,
          int,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyEval_CallObjectWithKeywords(
      ffi.Pointer<PyObject> callable,
      ffi.Pointer<PyObject> args,
      ffi.Pointer<PyObject> kwargs,
      ) {
    return _PyEval_CallObjectWithKeywords(
      callable,
      args,
      kwargs,
    );
  }

  late final _PyEval_CallObjectWithKeywordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyEval_CallObjectWithKeywords');
  late final _PyEval_CallObjectWithKeywords =
  _PyEval_CallObjectWithKeywordsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyEval_CallFunction(
      ffi.Pointer<PyObject> callable,
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyEval_CallFunction(
      callable,
      format,
    );
  }

  late final _PyEval_CallFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyEval_CallFunction');
  late final _PyEval_CallFunction = _PyEval_CallFunctionPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyEval_CallMethod(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyEval_CallMethod(
      obj,
      name,
      format,
    );
  }

  late final _PyEval_CallMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyEval_CallMethod');
  late final _PyEval_CallMethod = _PyEval_CallMethodPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyEval_GetBuiltins() {
    return _PyEval_GetBuiltins();
  }

  late final _PyEval_GetBuiltinsPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyEval_GetBuiltins');
  late final _PyEval_GetBuiltins =
  _PyEval_GetBuiltinsPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  ffi.Pointer<PyObject> PyEval_GetGlobals() {
    return _PyEval_GetGlobals();
  }

  late final _PyEval_GetGlobalsPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyEval_GetGlobals');
  late final _PyEval_GetGlobals =
  _PyEval_GetGlobalsPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  ffi.Pointer<PyObject> PyEval_GetLocals() {
    return _PyEval_GetLocals();
  }

  late final _PyEval_GetLocalsPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyEval_GetLocals');
  late final _PyEval_GetLocals =
  _PyEval_GetLocalsPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  ffi.Pointer<PyFrameObject> PyEval_GetFrame() {
    return _PyEval_GetFrame();
  }

  late final _PyEval_GetFramePtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyFrameObject> Function()>>(
      'PyEval_GetFrame');
  late final _PyEval_GetFrame =
  _PyEval_GetFramePtr.asFunction<ffi.Pointer<PyFrameObject> Function()>();

  int Py_AddPendingCall(
      ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>
      func,
      ffi.Pointer<ffi.Void> arg,
      ) {
    return _Py_AddPendingCall(
      func,
      arg,
    );
  }

  late final _Py_AddPendingCallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Void>)>>('Py_AddPendingCall');
  late final _Py_AddPendingCall = _Py_AddPendingCallPtr.asFunction<
      int Function(
          ffi.Pointer<
              ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<ffi.Void>)>();

  int Py_MakePendingCalls() {
    return _Py_MakePendingCalls();
  }

  late final _Py_MakePendingCallsPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('Py_MakePendingCalls');
  late final _Py_MakePendingCalls =
  _Py_MakePendingCallsPtr.asFunction<int Function()>();

  void Py_SetRecursionLimit(
      int arg0,
      ) {
    return _Py_SetRecursionLimit(
      arg0,
    );
  }

  late final _Py_SetRecursionLimitPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>(
      'Py_SetRecursionLimit');
  late final _Py_SetRecursionLimit =
  _Py_SetRecursionLimitPtr.asFunction<void Function(int)>();

  int Py_GetRecursionLimit() {
    return _Py_GetRecursionLimit();
  }

  late final _Py_GetRecursionLimitPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('Py_GetRecursionLimit');
  late final _Py_GetRecursionLimit =
  _Py_GetRecursionLimitPtr.asFunction<int Function()>();

  int Py_EnterRecursiveCall(
      ffi.Pointer<ffi.Char> where,
      ) {
    return _Py_EnterRecursiveCall(
      where,
    );
  }

  late final _Py_EnterRecursiveCallPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
      'Py_EnterRecursiveCall');
  late final _Py_EnterRecursiveCall = _Py_EnterRecursiveCallPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  void Py_LeaveRecursiveCall() {
    return _Py_LeaveRecursiveCall();
  }

  late final _Py_LeaveRecursiveCallPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('Py_LeaveRecursiveCall');
  late final _Py_LeaveRecursiveCall =
  _Py_LeaveRecursiveCallPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Char> PyEval_GetFuncName(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyEval_GetFuncName(
      arg0,
    );
  }

  late final _PyEval_GetFuncNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PyObject>)>>('PyEval_GetFuncName');
  late final _PyEval_GetFuncName = _PyEval_GetFuncNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Char> PyEval_GetFuncDesc(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyEval_GetFuncDesc(
      arg0,
    );
  }

  late final _PyEval_GetFuncDescPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PyObject>)>>('PyEval_GetFuncDesc');
  late final _PyEval_GetFuncDesc = _PyEval_GetFuncDescPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyEval_EvalFrame(
      ffi.Pointer<PyFrameObject> arg0,
      ) {
    return _PyEval_EvalFrame(
      arg0,
    );
  }

  late final _PyEval_EvalFramePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyFrameObject>)>>('PyEval_EvalFrame');
  late final _PyEval_EvalFrame = _PyEval_EvalFramePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyFrameObject>)>();

  ffi.Pointer<PyObject> PyEval_EvalFrameEx(
      ffi.Pointer<PyFrameObject> f,
      int exc,
      ) {
    return _PyEval_EvalFrameEx(
      f,
      exc,
    );
  }

  late final _PyEval_EvalFrameExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyFrameObject>, ffi.Int)>>('PyEval_EvalFrameEx');
  late final _PyEval_EvalFrameEx = _PyEval_EvalFrameExPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyFrameObject>, int)>();

  ffi.Pointer<PyThreadState> PyEval_SaveThread() {
    return _PyEval_SaveThread();
  }

  late final _PyEval_SaveThreadPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyThreadState> Function()>>(
      'PyEval_SaveThread');
  late final _PyEval_SaveThread =
  _PyEval_SaveThreadPtr.asFunction<ffi.Pointer<PyThreadState> Function()>();

  void PyEval_RestoreThread(
      ffi.Pointer<PyThreadState> arg0,
      ) {
    return _PyEval_RestoreThread(
      arg0,
    );
  }

  late final _PyEval_RestoreThreadPtr = _lookup<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyThreadState>)>>(
      'PyEval_RestoreThread');
  late final _PyEval_RestoreThread = _PyEval_RestoreThreadPtr.asFunction<
      void Function(ffi.Pointer<PyThreadState>)>();

  int PyEval_ThreadsInitialized() {
    return _PyEval_ThreadsInitialized();
  }

  late final _PyEval_ThreadsInitializedPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>(
      'PyEval_ThreadsInitialized');
  late final _PyEval_ThreadsInitialized =
  _PyEval_ThreadsInitializedPtr.asFunction<int Function()>();

  void PyEval_InitThreads() {
    return _PyEval_InitThreads();
  }

  late final _PyEval_InitThreadsPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyEval_InitThreads');
  late final _PyEval_InitThreads =
  _PyEval_InitThreadsPtr.asFunction<void Function()>();

  void PyEval_AcquireLock() {
    return _PyEval_AcquireLock();
  }

  late final _PyEval_AcquireLockPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyEval_AcquireLock');
  late final _PyEval_AcquireLock =
  _PyEval_AcquireLockPtr.asFunction<void Function()>();

  void PyEval_ReleaseLock() {
    return _PyEval_ReleaseLock();
  }

  late final _PyEval_ReleaseLockPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyEval_ReleaseLock');
  late final _PyEval_ReleaseLock =
  _PyEval_ReleaseLockPtr.asFunction<void Function()>();

  void PyEval_AcquireThread(
      ffi.Pointer<PyThreadState> tstate,
      ) {
    return _PyEval_AcquireThread(
      tstate,
    );
  }

  late final _PyEval_AcquireThreadPtr = _lookup<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyThreadState>)>>(
      'PyEval_AcquireThread');
  late final _PyEval_AcquireThread = _PyEval_AcquireThreadPtr.asFunction<
      void Function(ffi.Pointer<PyThreadState>)>();

  void PyEval_ReleaseThread(
      ffi.Pointer<PyThreadState> tstate,
      ) {
    return _PyEval_ReleaseThread(
      tstate,
    );
  }

  late final _PyEval_ReleaseThreadPtr = _lookup<
      ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyThreadState>)>>(
      'PyEval_ReleaseThread');
  late final _PyEval_ReleaseThread = _PyEval_ReleaseThreadPtr.asFunction<
      void Function(ffi.Pointer<PyThreadState>)>();

  ffi.Pointer<PyObject> PySys_GetObject(
      ffi.Pointer<ffi.Char> arg0,
      ) {
    return _PySys_GetObject(
      arg0,
    );
  }

  late final _PySys_GetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PySys_GetObject');
  late final _PySys_GetObject = _PySys_GetObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  int PySys_SetObject(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<PyObject> arg1,
      ) {
    return _PySys_SetObject(
      arg0,
      arg1,
    );
  }

  late final _PySys_SetObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PySys_SetObject');
  late final _PySys_SetObject = _PySys_SetObjectPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<PyObject>)>();

  void PySys_SetArgv(
      int arg0,
      ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
      ) {
    return _PySys_SetArgv(
      arg0,
      arg1,
    );
  }

  late final _PySys_SetArgvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('PySys_SetArgv');
  late final _PySys_SetArgv = _PySys_SetArgvPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  void PySys_SetArgvEx(
      int arg0,
      ffi.Pointer<ffi.Pointer<ffi.WChar>> arg1,
      int arg2,
      ) {
    return _PySys_SetArgvEx(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PySys_SetArgvExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int)>>('PySys_SetArgvEx');
  late final _PySys_SetArgvEx = _PySys_SetArgvExPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  void PySys_SetPath(
      ffi.Pointer<ffi.WChar> arg0,
      ) {
    return _PySys_SetPath(
      arg0,
    );
  }

  late final _PySys_SetPathPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
      'PySys_SetPath');
  late final _PySys_SetPath =
  _PySys_SetPathPtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  void PySys_WriteStdout(
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PySys_WriteStdout(
      format,
    );
  }

  late final _PySys_WriteStdoutPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
      'PySys_WriteStdout');
  late final _PySys_WriteStdout =
  _PySys_WriteStdoutPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void PySys_WriteStderr(
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PySys_WriteStderr(
      format,
    );
  }

  late final _PySys_WriteStderrPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
      'PySys_WriteStderr');
  late final _PySys_WriteStderr =
  _PySys_WriteStderrPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void PySys_FormatStdout(
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PySys_FormatStdout(
      format,
    );
  }

  late final _PySys_FormatStdoutPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
      'PySys_FormatStdout');
  late final _PySys_FormatStdout =
  _PySys_FormatStdoutPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void PySys_FormatStderr(
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PySys_FormatStderr(
      format,
    );
  }

  late final _PySys_FormatStderrPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
      'PySys_FormatStderr');
  late final _PySys_FormatStderr =
  _PySys_FormatStderrPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void PySys_ResetWarnOptions() {
    return _PySys_ResetWarnOptions();
  }

  late final _PySys_ResetWarnOptionsPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>(
      'PySys_ResetWarnOptions');
  late final _PySys_ResetWarnOptions =
  _PySys_ResetWarnOptionsPtr.asFunction<void Function()>();

  void PySys_AddWarnOption(
      ffi.Pointer<ffi.WChar> arg0,
      ) {
    return _PySys_AddWarnOption(
      arg0,
    );
  }

  late final _PySys_AddWarnOptionPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
      'PySys_AddWarnOption');
  late final _PySys_AddWarnOption = _PySys_AddWarnOptionPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>)>();

  void PySys_AddWarnOptionUnicode(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PySys_AddWarnOptionUnicode(
      arg0,
    );
  }

  late final _PySys_AddWarnOptionUnicodePtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>(
      'PySys_AddWarnOptionUnicode');
  late final _PySys_AddWarnOptionUnicode = _PySys_AddWarnOptionUnicodePtr
      .asFunction<void Function(ffi.Pointer<PyObject>)>();

  int PySys_HasWarnOptions() {
    return _PySys_HasWarnOptions();
  }

  late final _PySys_HasWarnOptionsPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('PySys_HasWarnOptions');
  late final _PySys_HasWarnOptions =
  _PySys_HasWarnOptionsPtr.asFunction<int Function()>();

  void PySys_AddXOption(
      ffi.Pointer<ffi.WChar> arg0,
      ) {
    return _PySys_AddXOption(
      arg0,
    );
  }

  late final _PySys_AddXOptionPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
      'PySys_AddXOption');
  late final _PySys_AddXOption =
  _PySys_AddXOptionPtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<PyObject> PySys_GetXOptions() {
    return _PySys_GetXOptions();
  }

  late final _PySys_GetXOptionsPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PySys_GetXOptions');
  late final _PySys_GetXOptions =
  _PySys_GetXOptionsPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  ffi.Pointer<PyObject> PyOS_FSPath(
      ffi.Pointer<PyObject> path,
      ) {
    return _PyOS_FSPath(
      path,
    );
  }

  late final _PyOS_FSPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyOS_FSPath');
  late final _PyOS_FSPath = _PyOS_FSPathPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyOS_InterruptOccurred() {
    return _PyOS_InterruptOccurred();
  }

  late final _PyOS_InterruptOccurredPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('PyOS_InterruptOccurred');
  late final _PyOS_InterruptOccurred =
  _PyOS_InterruptOccurredPtr.asFunction<int Function()>();

  void PyOS_BeforeFork() {
    return _PyOS_BeforeFork();
  }

  late final _PyOS_BeforeForkPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyOS_BeforeFork');
  late final _PyOS_BeforeFork =
  _PyOS_BeforeForkPtr.asFunction<void Function()>();

  void PyOS_AfterFork_Parent() {
    return _PyOS_AfterFork_Parent();
  }

  late final _PyOS_AfterFork_ParentPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyOS_AfterFork_Parent');
  late final _PyOS_AfterFork_Parent =
  _PyOS_AfterFork_ParentPtr.asFunction<void Function()>();

  void PyOS_AfterFork_Child() {
    return _PyOS_AfterFork_Child();
  }

  late final _PyOS_AfterFork_ChildPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyOS_AfterFork_Child');
  late final _PyOS_AfterFork_Child =
  _PyOS_AfterFork_ChildPtr.asFunction<void Function()>();

  void PyOS_AfterFork() {
    return _PyOS_AfterFork();
  }

  late final _PyOS_AfterForkPtr =
  _lookup<ffi.NativeFunction<ffi.Void Function()>>('PyOS_AfterFork');
  late final _PyOS_AfterFork = _PyOS_AfterForkPtr.asFunction<void Function()>();

  int _PyOS_IsMainThread() {
    return __PyOS_IsMainThread();
  }

  late final __PyOS_IsMainThreadPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function()>>('_PyOS_IsMainThread');
  late final __PyOS_IsMainThread =
  __PyOS_IsMainThreadPtr.asFunction<int Function()>();

  int PyImport_GetMagicNumber() {
    return _PyImport_GetMagicNumber();
  }

  late final _PyImport_GetMagicNumberPtr =
  _lookup<ffi.NativeFunction<ffi.Long Function()>>(
      'PyImport_GetMagicNumber');
  late final _PyImport_GetMagicNumber =
  _PyImport_GetMagicNumberPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> PyImport_GetMagicTag() {
    return _PyImport_GetMagicTag();
  }

  late final _PyImport_GetMagicTagPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
      'PyImport_GetMagicTag');
  late final _PyImport_GetMagicTag =
  _PyImport_GetMagicTagPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<PyObject> PyImport_ExecCodeModule(
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<PyObject> co,
      ) {
    return _PyImport_ExecCodeModule(
      name,
      co,
    );
  }

  late final _PyImport_ExecCodeModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PyImport_ExecCodeModule');
  late final _PyImport_ExecCodeModule = _PyImport_ExecCodeModulePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyImport_ExecCodeModuleEx(
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<PyObject> co,
      ffi.Pointer<ffi.Char> pathname,
      ) {
    return _PyImport_ExecCodeModuleEx(
      name,
      co,
      pathname,
    );
  }

  late final _PyImport_ExecCodeModuleExPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyImport_ExecCodeModuleEx');
  late final _PyImport_ExecCodeModuleEx =
  _PyImport_ExecCodeModuleExPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyImport_ExecCodeModuleWithPathnames(
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<PyObject> co,
      ffi.Pointer<ffi.Char> pathname,
      ffi.Pointer<ffi.Char> cpathname,
      ) {
    return _PyImport_ExecCodeModuleWithPathnames(
      name,
      co,
      pathname,
      cpathname,
    );
  }

  late final _PyImport_ExecCodeModuleWithPathnamesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyImport_ExecCodeModuleWithPathnames');
  late final _PyImport_ExecCodeModuleWithPathnames =
  _PyImport_ExecCodeModuleWithPathnamesPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyImport_ExecCodeModuleObject(
      ffi.Pointer<PyObject> name,
      ffi.Pointer<PyObject> co,
      ffi.Pointer<PyObject> pathname,
      ffi.Pointer<PyObject> cpathname,
      ) {
    return _PyImport_ExecCodeModuleObject(
      name,
      co,
      pathname,
      cpathname,
    );
  }

  late final _PyImport_ExecCodeModuleObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyImport_ExecCodeModuleObject');
  late final _PyImport_ExecCodeModuleObject =
  _PyImport_ExecCodeModuleObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyImport_GetModuleDict() {
    return _PyImport_GetModuleDict();
  }

  late final _PyImport_GetModuleDictPtr =
  _lookup<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>(
      'PyImport_GetModuleDict');
  late final _PyImport_GetModuleDict =
  _PyImport_GetModuleDictPtr.asFunction<ffi.Pointer<PyObject> Function()>();

  ffi.Pointer<PyObject> PyImport_GetModule(
      ffi.Pointer<PyObject> name,
      ) {
    return _PyImport_GetModule(
      name,
    );
  }

  late final _PyImport_GetModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyImport_GetModule');
  late final _PyImport_GetModule = _PyImport_GetModulePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyImport_AddModuleObject(
      ffi.Pointer<PyObject> name,
      ) {
    return _PyImport_AddModuleObject(
      name,
    );
  }

  late final _PyImport_AddModuleObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyImport_AddModuleObject');
  late final _PyImport_AddModuleObject = _PyImport_AddModuleObjectPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyImport_AddModule(
      ffi.Pointer<ffi.Char> name,
      ) {
    return _PyImport_AddModule(
      name,
    );
  }

  late final _PyImport_AddModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyImport_AddModule');
  late final _PyImport_AddModule = _PyImport_AddModulePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyImport_ImportModule(
      ffi.Pointer<ffi.Char> name,
      ) {
    return _PyImport_ImportModule(
      name,
    );
  }

  late final _PyImport_ImportModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyImport_ImportModule');
  late final _PyImport_ImportModule = _PyImport_ImportModulePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyImport_ImportModuleNoBlock(
      ffi.Pointer<ffi.Char> name,
      ) {
    return _PyImport_ImportModuleNoBlock(
      name,
    );
  }

  late final _PyImport_ImportModuleNoBlockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>)>>('PyImport_ImportModuleNoBlock');
  late final _PyImport_ImportModuleNoBlock = _PyImport_ImportModuleNoBlockPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyImport_ImportModuleLevel(
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<PyObject> globals,
      ffi.Pointer<PyObject> locals,
      ffi.Pointer<PyObject> fromlist,
      int level,
      ) {
    return _PyImport_ImportModuleLevel(
      name,
      globals,
      locals,
      fromlist,
      level,
    );
  }

  late final _PyImport_ImportModuleLevelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Int)>>('PyImport_ImportModuleLevel');
  late final _PyImport_ImportModuleLevel =
  _PyImport_ImportModuleLevelPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          int)>();

  ffi.Pointer<PyObject> PyImport_ImportModuleLevelObject(
      ffi.Pointer<PyObject> name,
      ffi.Pointer<PyObject> globals,
      ffi.Pointer<PyObject> locals,
      ffi.Pointer<PyObject> fromlist,
      int level,
      ) {
    return _PyImport_ImportModuleLevelObject(
      name,
      globals,
      locals,
      fromlist,
      level,
    );
  }

  late final _PyImport_ImportModuleLevelObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Int)>>('PyImport_ImportModuleLevelObject');
  late final _PyImport_ImportModuleLevelObject =
  _PyImport_ImportModuleLevelObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>,
          int)>();

  ffi.Pointer<PyObject> PyImport_GetImporter(
      ffi.Pointer<PyObject> path,
      ) {
    return _PyImport_GetImporter(
      path,
    );
  }

  late final _PyImport_GetImporterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyImport_GetImporter');
  late final _PyImport_GetImporter = _PyImport_GetImporterPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyImport_Import(
      ffi.Pointer<PyObject> name,
      ) {
    return _PyImport_Import(
      name,
    );
  }

  late final _PyImport_ImportPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyImport_Import');
  late final _PyImport_Import = _PyImport_ImportPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyImport_ReloadModule(
      ffi.Pointer<PyObject> m,
      ) {
    return _PyImport_ReloadModule(
      m,
    );
  }

  late final _PyImport_ReloadModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyImport_ReloadModule');
  late final _PyImport_ReloadModule = _PyImport_ReloadModulePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyImport_ImportFrozenModuleObject(
      ffi.Pointer<PyObject> name,
      ) {
    return _PyImport_ImportFrozenModuleObject(
      name,
    );
  }

  late final _PyImport_ImportFrozenModuleObjectPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyImport_ImportFrozenModuleObject');
  late final _PyImport_ImportFrozenModuleObject =
  _PyImport_ImportFrozenModuleObjectPtr.asFunction<
      int Function(ffi.Pointer<PyObject>)>();

  int PyImport_ImportFrozenModule(
      ffi.Pointer<ffi.Char> name,
      ) {
    return _PyImport_ImportFrozenModule(
      name,
    );
  }

  late final _PyImport_ImportFrozenModulePtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
      'PyImport_ImportFrozenModule');
  late final _PyImport_ImportFrozenModule = _PyImport_ImportFrozenModulePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int PyImport_AppendInittab(
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>> initfunc,
      ) {
    return _PyImport_AppendInittab(
      name,
      initfunc,
    );
  }

  late final _PyImport_AppendInittabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<
                  ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>)>>(
      'PyImport_AppendInittab');
  late final _PyImport_AppendInittab = _PyImport_AppendInittabPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>)>();

  ffi.Pointer<PyObject> PyObject_CallNoArgs(
      ffi.Pointer<PyObject> func,
      ) {
    return _PyObject_CallNoArgs(
      func,
    );
  }

  late final _PyObject_CallNoArgsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_CallNoArgs');
  late final _PyObject_CallNoArgs = _PyObject_CallNoArgsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_Call(
      ffi.Pointer<PyObject> callable,
      ffi.Pointer<PyObject> args,
      ffi.Pointer<PyObject> kwargs,
      ) {
    return _PyObject_Call(
      callable,
      args,
      kwargs,
    );
  }

  late final _PyObject_CallPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyObject_Call');
  late final _PyObject_Call = _PyObject_CallPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_CallObject(
      ffi.Pointer<PyObject> callable,
      ffi.Pointer<PyObject> args,
      ) {
    return _PyObject_CallObject(
      callable,
      args,
    );
  }

  late final _PyObject_CallObjectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_CallObject');
  late final _PyObject_CallObject = _PyObject_CallObjectPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_CallFunction(
      ffi.Pointer<PyObject> callable,
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyObject_CallFunction(
      callable,
      format,
    );
  }

  late final _PyObject_CallFunctionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyObject_CallFunction');
  late final _PyObject_CallFunction = _PyObject_CallFunctionPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyObject_CallMethod(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<ffi.Char> format,
      ) {
    return _PyObject_CallMethod(
      obj,
      name,
      format,
    );
  }

  late final _PyObject_CallMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('PyObject_CallMethod');
  late final _PyObject_CallMethod = _PyObject_CallMethodPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> _PyObject_CallFunction_SizeT(
      ffi.Pointer<PyObject> callable,
      ffi.Pointer<ffi.Char> format,
      ) {
    return __PyObject_CallFunction_SizeT(
      callable,
      format,
    );
  }

  late final __PyObject_CallFunction_SizeTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('_PyObject_CallFunction_SizeT');
  late final __PyObject_CallFunction_SizeT =
  __PyObject_CallFunction_SizeTPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> _PyObject_CallMethod_SizeT(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<ffi.Char> name,
      ffi.Pointer<ffi.Char> format,
      ) {
    return __PyObject_CallMethod_SizeT(
      obj,
      name,
      format,
    );
  }

  late final __PyObject_CallMethod_SizeTPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_PyObject_CallMethod_SizeT');
  late final __PyObject_CallMethod_SizeT =
  __PyObject_CallMethod_SizeTPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<PyObject> PyObject_CallFunctionObjArgs(
      ffi.Pointer<PyObject> callable,
      ) {
    return _PyObject_CallFunctionObjArgs(
      callable,
    );
  }

  late final _PyObject_CallFunctionObjArgsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_CallFunctionObjArgs');
  late final _PyObject_CallFunctionObjArgs = _PyObject_CallFunctionObjArgsPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_CallMethodObjArgs(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<PyObject> name,
      ) {
    return _PyObject_CallMethodObjArgs(
      obj,
      name,
    );
  }

  late final _PyObject_CallMethodObjArgsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_CallMethodObjArgs');
  late final _PyObject_CallMethodObjArgs =
  _PyObject_CallMethodObjArgsPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_Type(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyObject_Type(
      o,
    );
  }

  late final _PyObject_TypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_Type');
  late final _PyObject_Type = _PyObject_TypePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyObject_Size(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyObject_Size(
      o,
    );
  }

  late final _PyObject_SizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyObject_Size');
  late final _PyObject_Size =
  _PyObject_SizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyObject_Length(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyObject_Length(
      o,
    );
  }

  late final _PyObject_LengthPtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyObject_Length');
  late final _PyObject_Length =
  _PyObject_LengthPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_GetItem(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<PyObject> key,
      ) {
    return _PyObject_GetItem(
      o,
      key,
    );
  }

  late final _PyObject_GetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_GetItem');
  late final _PyObject_GetItem = _PyObject_GetItemPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyObject_SetItem(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<PyObject> key,
      ffi.Pointer<PyObject> v,
      ) {
    return _PyObject_SetItem(
      o,
      key,
      v,
    );
  }

  late final _PyObject_SetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_SetItem');
  late final _PyObject_SetItem = _PyObject_SetItemPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>)>();

  int PyObject_DelItemString(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<ffi.Char> key,
      ) {
    return _PyObject_DelItemString(
      o,
      key,
    );
  }

  late final _PyObject_DelItemStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyObject_DelItemString');
  late final _PyObject_DelItemString = _PyObject_DelItemStringPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyObject_DelItem(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<PyObject> key,
      ) {
    return _PyObject_DelItem(
      o,
      key,
    );
  }

  late final _PyObject_DelItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_DelItem');
  late final _PyObject_DelItem = _PyObject_DelItemPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyObject_AsCharBuffer(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<ffi.Pointer<ffi.Char>> buffer,
      ffi.Pointer<Py_ssize_t> buffer_len,
      ) {
    return _PyObject_AsCharBuffer(
      obj,
      buffer,
      buffer_len,
    );
  }

  late final _PyObject_AsCharBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<Py_ssize_t>)>>('PyObject_AsCharBuffer');
  late final _PyObject_AsCharBuffer = _PyObject_AsCharBufferPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<Py_ssize_t>)>();

  int PyObject_CheckReadBuffer(
      ffi.Pointer<PyObject> obj,
      ) {
    return _PyObject_CheckReadBuffer(
      obj,
    );
  }

  late final _PyObject_CheckReadBufferPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyObject_CheckReadBuffer');
  late final _PyObject_CheckReadBuffer = _PyObject_CheckReadBufferPtr
      .asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyObject_AsReadBuffer(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
      ffi.Pointer<Py_ssize_t> buffer_len,
      ) {
    return _PyObject_AsReadBuffer(
      obj,
      buffer,
      buffer_len,
    );
  }

  late final _PyObject_AsReadBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<Py_ssize_t>)>>('PyObject_AsReadBuffer');
  late final _PyObject_AsReadBuffer = _PyObject_AsReadBufferPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<Py_ssize_t>)>();

  int PyObject_AsWriteBuffer(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<ffi.Pointer<ffi.Void>> buffer,
      ffi.Pointer<Py_ssize_t> buffer_len,
      ) {
    return _PyObject_AsWriteBuffer(
      obj,
      buffer,
      buffer_len,
    );
  }

  late final _PyObject_AsWriteBufferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<Py_ssize_t>)>>('PyObject_AsWriteBuffer');
  late final _PyObject_AsWriteBuffer = _PyObject_AsWriteBufferPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Pointer<ffi.Void>>,
          ffi.Pointer<Py_ssize_t>)>();

  ffi.Pointer<PyObject> PyObject_Format(
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<PyObject> format_spec,
      ) {
    return _PyObject_Format(
      obj,
      format_spec,
    );
  }

  late final _PyObject_FormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_Format');
  late final _PyObject_Format = _PyObject_FormatPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_GetIter(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_GetIter(
      arg0,
    );
  }

  late final _PyObject_GetIterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_GetIter');
  late final _PyObject_GetIter = _PyObject_GetIterPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyObject_GetAIter(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyObject_GetAIter(
      arg0,
    );
  }

  late final _PyObject_GetAIterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyObject_GetAIter');
  late final _PyObject_GetAIter = _PyObject_GetAIterPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyIter_Check(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyIter_Check(
      arg0,
    );
  }

  late final _PyIter_CheckPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyIter_Check');
  late final _PyIter_Check =
  _PyIter_CheckPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyAIter_Check(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyAIter_Check(
      arg0,
    );
  }

  late final _PyAIter_CheckPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyAIter_Check');
  late final _PyAIter_Check =
  _PyAIter_CheckPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyIter_Next(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyIter_Next(
      arg0,
    );
  }

  late final _PyIter_NextPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyIter_Next');
  late final _PyIter_Next = _PyIter_NextPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyIter_Send(
      ffi.Pointer<PyObject> arg0,
      ffi.Pointer<PyObject> arg1,
      ffi.Pointer<ffi.Pointer<PyObject>> arg2,
      ) {
    return _PyIter_Send(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyIter_SendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Pointer<PyObject>>)>>('PyIter_Send');
  late final _PyIter_Send = _PyIter_SendPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Pointer<PyObject>>)>();

  int PyNumber_Check(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyNumber_Check(
      o,
    );
  }

  late final _PyNumber_CheckPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyNumber_Check');
  late final _PyNumber_Check =
  _PyNumber_CheckPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Add(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_Add(
      o1,
      o2,
    );
  }

  late final _PyNumber_AddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyNumber_Add');
  late final _PyNumber_Add = _PyNumber_AddPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Subtract(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_Subtract(
      o1,
      o2,
    );
  }

  late final _PyNumber_SubtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_Subtract');
  late final _PyNumber_Subtract = _PyNumber_SubtractPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Multiply(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_Multiply(
      o1,
      o2,
    );
  }

  late final _PyNumber_MultiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_Multiply');
  late final _PyNumber_Multiply = _PyNumber_MultiplyPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_MatrixMultiply(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_MatrixMultiply(
      o1,
      o2,
    );
  }

  late final _PyNumber_MatrixMultiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_MatrixMultiply');
  late final _PyNumber_MatrixMultiply = _PyNumber_MatrixMultiplyPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_FloorDivide(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_FloorDivide(
      o1,
      o2,
    );
  }

  late final _PyNumber_FloorDividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_FloorDivide');
  late final _PyNumber_FloorDivide = _PyNumber_FloorDividePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_TrueDivide(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_TrueDivide(
      o1,
      o2,
    );
  }

  late final _PyNumber_TrueDividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_TrueDivide');
  late final _PyNumber_TrueDivide = _PyNumber_TrueDividePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Remainder(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_Remainder(
      o1,
      o2,
    );
  }

  late final _PyNumber_RemainderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_Remainder');
  late final _PyNumber_Remainder = _PyNumber_RemainderPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Divmod(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_Divmod(
      o1,
      o2,
    );
  }

  late final _PyNumber_DivmodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_Divmod');
  late final _PyNumber_Divmod = _PyNumber_DivmodPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Power(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ffi.Pointer<PyObject> o3,
      ) {
    return _PyNumber_Power(
      o1,
      o2,
      o3,
    );
  }

  late final _PyNumber_PowerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyNumber_Power');
  late final _PyNumber_Power = _PyNumber_PowerPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Negative(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyNumber_Negative(
      o,
    );
  }

  late final _PyNumber_NegativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyNumber_Negative');
  late final _PyNumber_Negative = _PyNumber_NegativePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Positive(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyNumber_Positive(
      o,
    );
  }

  late final _PyNumber_PositivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyNumber_Positive');
  late final _PyNumber_Positive = _PyNumber_PositivePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Absolute(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyNumber_Absolute(
      o,
    );
  }

  late final _PyNumber_AbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyNumber_Absolute');
  late final _PyNumber_Absolute = _PyNumber_AbsolutePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Invert(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyNumber_Invert(
      o,
    );
  }

  late final _PyNumber_InvertPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyNumber_Invert');
  late final _PyNumber_Invert = _PyNumber_InvertPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Lshift(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_Lshift(
      o1,
      o2,
    );
  }

  late final _PyNumber_LshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_Lshift');
  late final _PyNumber_Lshift = _PyNumber_LshiftPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Rshift(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_Rshift(
      o1,
      o2,
    );
  }

  late final _PyNumber_RshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_Rshift');
  late final _PyNumber_Rshift = _PyNumber_RshiftPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_And(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_And(
      o1,
      o2,
    );
  }

  late final _PyNumber_AndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyNumber_And');
  late final _PyNumber_And = _PyNumber_AndPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Xor(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_Xor(
      o1,
      o2,
    );
  }

  late final _PyNumber_XorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyNumber_Xor');
  late final _PyNumber_Xor = _PyNumber_XorPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Or(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_Or(
      o1,
      o2,
    );
  }

  late final _PyNumber_OrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PyNumber_Or');
  late final _PyNumber_Or = _PyNumber_OrPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyIndex_Check(
      ffi.Pointer<PyObject> arg0,
      ) {
    return _PyIndex_Check(
      arg0,
    );
  }

  late final _PyIndex_CheckPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyIndex_Check');
  late final _PyIndex_Check =
  _PyIndex_CheckPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Index(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyNumber_Index(
      o,
    );
  }

  late final _PyNumber_IndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyNumber_Index');
  late final _PyNumber_Index = _PyNumber_IndexPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  int PyNumber_AsSsize_t(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<PyObject> exc,
      ) {
    return _PyNumber_AsSsize_t(
      o,
      exc,
    );
  }

  late final _PyNumber_AsSsize_tPtr = _lookup<
      ffi.NativeFunction<
          Py_ssize_t Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_AsSsize_t');
  late final _PyNumber_AsSsize_t = _PyNumber_AsSsize_tPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Long(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyNumber_Long(
      o,
    );
  }

  late final _PyNumber_LongPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyNumber_Long');
  late final _PyNumber_Long = _PyNumber_LongPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_Float(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyNumber_Float(
      o,
    );
  }

  late final _PyNumber_FloatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyNumber_Float');
  late final _PyNumber_Float = _PyNumber_FloatPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceAdd(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceAdd(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceAddPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceAdd');
  late final _PyNumber_InPlaceAdd = _PyNumber_InPlaceAddPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceSubtract(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceSubtract(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceSubtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceSubtract');
  late final _PyNumber_InPlaceSubtract =
  _PyNumber_InPlaceSubtractPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceMultiply(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceMultiply(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceMultiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceMultiply');
  late final _PyNumber_InPlaceMultiply =
  _PyNumber_InPlaceMultiplyPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceMatrixMultiply(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceMatrixMultiply(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceMatrixMultiplyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceMatrixMultiply');
  late final _PyNumber_InPlaceMatrixMultiply =
  _PyNumber_InPlaceMatrixMultiplyPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceFloorDivide(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceFloorDivide(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceFloorDividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceFloorDivide');
  late final _PyNumber_InPlaceFloorDivide =
  _PyNumber_InPlaceFloorDividePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceTrueDivide(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceTrueDivide(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceTrueDividePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceTrueDivide');
  late final _PyNumber_InPlaceTrueDivide =
  _PyNumber_InPlaceTrueDividePtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceRemainder(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceRemainder(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceRemainderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceRemainder');
  late final _PyNumber_InPlaceRemainder =
  _PyNumber_InPlaceRemainderPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlacePower(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ffi.Pointer<PyObject> o3,
      ) {
    return _PyNumber_InPlacePower(
      o1,
      o2,
      o3,
    );
  }

  late final _PyNumber_InPlacePowerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlacePower');
  late final _PyNumber_InPlacePower = _PyNumber_InPlacePowerPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceLshift(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceLshift(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceLshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceLshift');
  late final _PyNumber_InPlaceLshift = _PyNumber_InPlaceLshiftPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceRshift(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceRshift(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceRshiftPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceRshift');
  late final _PyNumber_InPlaceRshift = _PyNumber_InPlaceRshiftPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceAnd(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceAnd(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceAndPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceAnd');
  late final _PyNumber_InPlaceAnd = _PyNumber_InPlaceAndPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceXor(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceXor(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceXorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceXor');
  late final _PyNumber_InPlaceXor = _PyNumber_InPlaceXorPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_InPlaceOr(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PyNumber_InPlaceOr(
      o1,
      o2,
    );
  }

  late final _PyNumber_InPlaceOrPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyNumber_InPlaceOr');
  late final _PyNumber_InPlaceOr = _PyNumber_InPlaceOrPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyNumber_ToBase(
      ffi.Pointer<PyObject> n,
      int base,
      ) {
    return _PyNumber_ToBase(
      n,
      base,
    );
  }

  late final _PyNumber_ToBasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, ffi.Int)>>('PyNumber_ToBase');
  late final _PyNumber_ToBase = _PyNumber_ToBasePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  int PySequence_Check(
      ffi.Pointer<PyObject> o,
      ) {
    return _PySequence_Check(
      o,
    );
  }

  late final _PySequence_CheckPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PySequence_Check');
  late final _PySequence_Check =
  _PySequence_CheckPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PySequence_Size(
      ffi.Pointer<PyObject> o,
      ) {
    return _PySequence_Size(
      o,
    );
  }

  late final _PySequence_SizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PySequence_Size');
  late final _PySequence_Size =
  _PySequence_SizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PySequence_Length(
      ffi.Pointer<PyObject> o,
      ) {
    return _PySequence_Length(
      o,
    );
  }

  late final _PySequence_LengthPtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PySequence_Length');
  late final _PySequence_Length =
  _PySequence_LengthPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PySequence_Concat(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PySequence_Concat(
      o1,
      o2,
    );
  }

  late final _PySequence_ConcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PySequence_Concat');
  late final _PySequence_Concat = _PySequence_ConcatPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PySequence_Repeat(
      ffi.Pointer<PyObject> o,
      int count,
      ) {
    return _PySequence_Repeat(
      o,
      count,
    );
  }

  late final _PySequence_RepeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PySequence_Repeat');
  late final _PySequence_Repeat = _PySequence_RepeatPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> PySequence_GetItem(
      ffi.Pointer<PyObject> o,
      int i,
      ) {
    return _PySequence_GetItem(
      o,
      i,
    );
  }

  late final _PySequence_GetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PySequence_GetItem');
  late final _PySequence_GetItem = _PySequence_GetItemPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  ffi.Pointer<PyObject> PySequence_GetSlice(
      ffi.Pointer<PyObject> o,
      int i1,
      int i2,
      ) {
    return _PySequence_GetSlice(
      o,
      i1,
      i2,
    );
  }

  late final _PySequence_GetSlicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, Py_ssize_t,
              Py_ssize_t)>>('PySequence_GetSlice');
  late final _PySequence_GetSlice = _PySequence_GetSlicePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int, int)>();

  int PySequence_SetItem(
      ffi.Pointer<PyObject> o,
      int i,
      ffi.Pointer<PyObject> v,
      ) {
    return _PySequence_SetItem(
      o,
      i,
      v,
    );
  }

  late final _PySequence_SetItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t,
              ffi.Pointer<PyObject>)>>('PySequence_SetItem');
  late final _PySequence_SetItem = _PySequence_SetItemPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, ffi.Pointer<PyObject>)>();

  int PySequence_DelItem(
      ffi.Pointer<PyObject> o,
      int i,
      ) {
    return _PySequence_DelItem(
      o,
      i,
    );
  }

  late final _PySequence_DelItemPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PySequence_DelItem');
  late final _PySequence_DelItem = _PySequence_DelItemPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int)>();

  int PySequence_SetSlice(
      ffi.Pointer<PyObject> o,
      int i1,
      int i2,
      ffi.Pointer<PyObject> v,
      ) {
    return _PySequence_SetSlice(
      o,
      i1,
      i2,
      v,
    );
  }

  late final _PySequence_SetSlicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t, Py_ssize_t,
              ffi.Pointer<PyObject>)>>('PySequence_SetSlice');
  late final _PySequence_SetSlice = _PySequence_SetSlicePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, int, ffi.Pointer<PyObject>)>();

  int PySequence_DelSlice(
      ffi.Pointer<PyObject> o,
      int i1,
      int i2,
      ) {
    return _PySequence_DelSlice(
      o,
      i1,
      i2,
    );
  }

  late final _PySequence_DelSlicePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, Py_ssize_t,
              Py_ssize_t)>>('PySequence_DelSlice');
  late final _PySequence_DelSlice = _PySequence_DelSlicePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, int, int)>();

  ffi.Pointer<PyObject> PySequence_Tuple(
      ffi.Pointer<PyObject> o,
      ) {
    return _PySequence_Tuple(
      o,
    );
  }

  late final _PySequence_TuplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PySequence_Tuple');
  late final _PySequence_Tuple = _PySequence_TuplePtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PySequence_List(
      ffi.Pointer<PyObject> o,
      ) {
    return _PySequence_List(
      o,
    );
  }

  late final _PySequence_ListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PySequence_List');
  late final _PySequence_List = _PySequence_ListPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PySequence_Fast(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<ffi.Char> m,
      ) {
    return _PySequence_Fast(
      o,
      m,
    );
  }

  late final _PySequence_FastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PySequence_Fast');
  late final _PySequence_Fast = _PySequence_FastPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PySequence_Count(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<PyObject> value,
      ) {
    return _PySequence_Count(
      o,
      value,
    );
  }

  late final _PySequence_CountPtr = _lookup<
      ffi.NativeFunction<
          Py_ssize_t Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PySequence_Count');
  late final _PySequence_Count = _PySequence_CountPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PySequence_Contains(
      ffi.Pointer<PyObject> seq,
      ffi.Pointer<PyObject> ob,
      ) {
    return _PySequence_Contains(
      seq,
      ob,
    );
  }

  late final _PySequence_ContainsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PySequence_Contains');
  late final _PySequence_Contains = _PySequence_ContainsPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PySequence_In(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<PyObject> value,
      ) {
    return _PySequence_In(
      o,
      value,
    );
  }

  late final _PySequence_InPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>>('PySequence_In');
  late final _PySequence_In = _PySequence_InPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PySequence_Index(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<PyObject> value,
      ) {
    return _PySequence_Index(
      o,
      value,
    );
  }

  late final _PySequence_IndexPtr = _lookup<
      ffi.NativeFunction<
          Py_ssize_t Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PySequence_Index');
  late final _PySequence_Index = _PySequence_IndexPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PySequence_InPlaceConcat(
      ffi.Pointer<PyObject> o1,
      ffi.Pointer<PyObject> o2,
      ) {
    return _PySequence_InPlaceConcat(
      o1,
      o2,
    );
  }

  late final _PySequence_InPlaceConcatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PySequence_InPlaceConcat');
  late final _PySequence_InPlaceConcat =
  _PySequence_InPlaceConcatPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PySequence_InPlaceRepeat(
      ffi.Pointer<PyObject> o,
      int count,
      ) {
    return _PySequence_InPlaceRepeat(
      o,
      count,
    );
  }

  late final _PySequence_InPlaceRepeatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>, Py_ssize_t)>>('PySequence_InPlaceRepeat');
  late final _PySequence_InPlaceRepeat = _PySequence_InPlaceRepeatPtr
      .asFunction<ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>, int)>();

  int PyMapping_Check(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyMapping_Check(
      o,
    );
  }

  late final _PyMapping_CheckPtr =
  _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject>)>>(
      'PyMapping_Check');
  late final _PyMapping_Check =
  _PyMapping_CheckPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyMapping_Size(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyMapping_Size(
      o,
    );
  }

  late final _PyMapping_SizePtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyMapping_Size');
  late final _PyMapping_Size =
  _PyMapping_SizePtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyMapping_Length(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyMapping_Length(
      o,
    );
  }

  late final _PyMapping_LengthPtr =
  _lookup<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject>)>>(
      'PyMapping_Length');
  late final _PyMapping_Length =
  _PyMapping_LengthPtr.asFunction<int Function(ffi.Pointer<PyObject>)>();

  int PyMapping_HasKeyString(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<ffi.Char> key,
      ) {
    return _PyMapping_HasKeyString(
      o,
      key,
    );
  }

  late final _PyMapping_HasKeyStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyMapping_HasKeyString');
  late final _PyMapping_HasKeyString = _PyMapping_HasKeyStringPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyMapping_HasKey(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<PyObject> key,
      ) {
    return _PyMapping_HasKey(
      o,
      key,
    );
  }

  late final _PyMapping_HasKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyMapping_HasKey');
  late final _PyMapping_HasKey = _PyMapping_HasKeyPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyMapping_Keys(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyMapping_Keys(
      o,
    );
  }

  late final _PyMapping_KeysPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyMapping_Keys');
  late final _PyMapping_Keys = _PyMapping_KeysPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyMapping_Values(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyMapping_Values(
      o,
    );
  }

  late final _PyMapping_ValuesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyMapping_Values');
  late final _PyMapping_Values = _PyMapping_ValuesPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyMapping_Items(
      ffi.Pointer<PyObject> o,
      ) {
    return _PyMapping_Items(
      o,
    );
  }

  late final _PyMapping_ItemsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<PyObject>)>>('PyMapping_Items');
  late final _PyMapping_Items = _PyMapping_ItemsPtr.asFunction<
      ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>)>();

  ffi.Pointer<PyObject> PyMapping_GetItemString(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<ffi.Char> key,
      ) {
    return _PyMapping_GetItemString(
      o,
      key,
    );
  }

  late final _PyMapping_GetItemStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Char>)>>('PyMapping_GetItemString');
  late final _PyMapping_GetItemString = _PyMapping_GetItemStringPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>)>();

  int PyMapping_SetItemString(
      ffi.Pointer<PyObject> o,
      ffi.Pointer<ffi.Char> key,
      ffi.Pointer<PyObject> value,
      ) {
    return _PyMapping_SetItemString(
      o,
      key,
      value,
    );
  }

  late final _PyMapping_SetItemStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>)>>('PyMapping_SetItemString');
  late final _PyMapping_SetItemString = _PyMapping_SetItemStringPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>)>();

  int PyObject_IsInstance(
      ffi.Pointer<PyObject> object,
      ffi.Pointer<PyObject> typeorclass,
      ) {
    return _PyObject_IsInstance(
      object,
      typeorclass,
    );
  }

  late final _PyObject_IsInstancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_IsInstance');
  late final _PyObject_IsInstance = _PyObject_IsInstancePtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  int PyObject_IsSubclass(
      ffi.Pointer<PyObject> object,
      ffi.Pointer<PyObject> typeorclass,
      ) {
    return _PyObject_IsSubclass(
      object,
      typeorclass,
    );
  }

  late final _PyObject_IsSubclassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<PyObject>,
              ffi.Pointer<PyObject>)>>('PyObject_IsSubclass');
  late final _PyObject_IsSubclass = _PyObject_IsSubclassPtr.asFunction<
      int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyObject>)>();

  late final ffi.Pointer<PyTypeObject> _PyFilter_Type =
  _lookup<PyTypeObject>('PyFilter_Type');

  PyTypeObject get PyFilter_Type => _PyFilter_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyMap_Type =
  _lookup<PyTypeObject>('PyMap_Type');

  PyTypeObject get PyMap_Type => _PyMap_Type.ref;

  late final ffi.Pointer<PyTypeObject> _PyZip_Type =
  _lookup<PyTypeObject>('PyZip_Type');

  PyTypeObject get PyZip_Type => _PyZip_Type.ref;

  double PyOS_string_to_double(
      ffi.Pointer<ffi.Char> str,
      ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
      ffi.Pointer<PyObject> overflow_exception,
      ) {
    return _PyOS_string_to_double(
      str,
      endptr,
      overflow_exception,
    );
  }

  late final _PyOS_string_to_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<PyObject>)>>('PyOS_string_to_double');
  late final _PyOS_string_to_double = _PyOS_string_to_doublePtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<PyObject>)>();

  ffi.Pointer<ffi.Char> PyOS_double_to_string(
      double val,
      int format_code,
      int precision,
      int flags,
      ffi.Pointer<ffi.Int> type,
      ) {
    return _PyOS_double_to_string(
      val,
      format_code,
      precision,
      flags,
      type,
    );
  }

  late final _PyOS_double_to_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Char, ffi.Int, ffi.Int,
              ffi.Pointer<ffi.Int>)>>('PyOS_double_to_string');
  late final _PyOS_double_to_string = _PyOS_double_to_stringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, int, int, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<PyObject> _Py_string_to_number_with_underscores(
      ffi.Pointer<ffi.Char> str,
      int len,
      ffi.Pointer<ffi.Char> what,
      ffi.Pointer<PyObject> obj,
      ffi.Pointer<ffi.Void> arg,
      ffi.Pointer<
          ffi.NativeFunction<
              ffi.Pointer<PyObject> Function(
                  ffi.Pointer<ffi.Char>, Py_ssize_t, ffi.Pointer<ffi.Void>)>>
      innerfunc,
      ) {
    return __Py_string_to_number_with_underscores(
      str,
      len,
      what,
      obj,
      arg,
      innerfunc,
    );
  }

  late final __Py_string_to_number_with_underscoresPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.Pointer<ffi.Char>,
              Py_ssize_t,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PyObject>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
                          Py_ssize_t, ffi.Pointer<ffi.Void>)>>)>>(
      '_Py_string_to_number_with_underscores');
  late final __Py_string_to_number_with_underscores =
  __Py_string_to_number_with_underscoresPtr.asFunction<
      ffi.Pointer<PyObject> Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<PyObject>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<PyObject> Function(ffi.Pointer<ffi.Char>,
                      Py_ssize_t, ffi.Pointer<ffi.Void>)>>)>();

  double _Py_parse_inf_or_nan(
      ffi.Pointer<ffi.Char> p,
      ffi.Pointer<ffi.Pointer<ffi.Char>> endptr,
      ) {
    return __Py_parse_inf_or_nan(
      p,
      endptr,
    );
  }

  late final __Py_parse_inf_or_nanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('_Py_parse_inf_or_nan');
  late final __Py_parse_inf_or_nan = __Py_parse_inf_or_nanPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int PyOS_mystrnicmp(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<ffi.Char> arg1,
      int arg2,
      ) {
    return _PyOS_mystrnicmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PyOS_mystrnicmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              Py_ssize_t)>>('PyOS_mystrnicmp');
  late final _PyOS_mystrnicmp = _PyOS_mystrnicmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int PyOS_mystricmp(
      ffi.Pointer<ffi.Char> arg0,
      ffi.Pointer<ffi.Char> arg1,
      ) {
    return _PyOS_mystricmp(
      arg0,
      arg1,
    );
  }

  late final _PyOS_mystricmpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('PyOS_mystricmp');
  late final _PyOS_mystricmp = _PyOS_mystricmpPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.WChar> Py_DecodeLocale(
      ffi.Pointer<ffi.Char> arg,
      ffi.Pointer<ffi.Size> size,
      ) {
    return _Py_DecodeLocale(
      arg,
      size,
    );
  }

  late final _Py_DecodeLocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('Py_DecodeLocale');
  late final _Py_DecodeLocale = _Py_DecodeLocalePtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> Py_EncodeLocale(
      ffi.Pointer<ffi.WChar> text,
      ffi.Pointer<ffi.Size> error_pos,
      ) {
    return _Py_EncodeLocale(
      text,
      error_pos,
    );
  }

  late final _Py_EncodeLocalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Size>)>>('Py_EncodeLocale');
  late final _Py_EncodeLocale = _Py_EncodeLocalePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Size>)>();

  int PyTraceMalloc_Track(
      int domain,
      int ptr,
      int size,
      ) {
    return _PyTraceMalloc_Track(
      domain,
      ptr,
      size,
    );
  }

  late final _PyTraceMalloc_TrackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedInt, ffi.UintPtr, ffi.Size)>>('PyTraceMalloc_Track');
  late final _PyTraceMalloc_Track =
  _PyTraceMalloc_TrackPtr.asFunction<int Function(int, int, int)>();

  int PyTraceMalloc_Untrack(
      int domain,
      int ptr,
      ) {
    return _PyTraceMalloc_Untrack(
      domain,
      ptr,
    );
  }

  late final _PyTraceMalloc_UntrackPtr = _lookup<
      ffi.NativeFunction<ffi.Int Function(ffi.UnsignedInt, ffi.UintPtr)>>(
      'PyTraceMalloc_Untrack');
  late final _PyTraceMalloc_Untrack =
  _PyTraceMalloc_UntrackPtr.asFunction<int Function(int, int)>();

  ffi.Pointer<PyObject> _PyTraceMalloc_GetTraceback(
      int domain,
      int ptr,
      ) {
    return __PyTraceMalloc_GetTraceback(
      domain,
      ptr,
    );
  }

  late final __PyTraceMalloc_GetTracebackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PyObject> Function(
              ffi.UnsignedInt, ffi.UintPtr)>>('_PyTraceMalloc_GetTraceback');
  late final __PyTraceMalloc_GetTraceback = __PyTraceMalloc_GetTracebackPtr
      .asFunction<ffi.Pointer<PyObject> Function(int, int)>();
}

class PyModuleDef extends ffi.Struct {
  external PyModuleDef_Base m_base;

  external ffi.Pointer<ffi.Char> m_name;

  external ffi.Pointer<ffi.Char> m_doc;

  @Py_ssize_t()
  external int m_size;

  external ffi.Pointer<PyMethodDef> m_methods;

  external ffi.Pointer<PyModuleDef_Slot> m_slots;

  external traverseproc m_traverse;

  external inquiry m_clear;

  external freefunc m_free;
}

class PyModuleDef_Base extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<ffi.NativeFunction<ffi.Pointer<PyObject> Function()>>
  m_init;

  @Py_ssize_t()
  external int m_index;

  external ffi.Pointer<PyObject> m_copy;
}

typedef PyObject = _object;

class _object extends ffi.Struct {
  @Py_ssize_t()
  external int ob_refcnt;

  external ffi.Pointer<PyTypeObject> ob_type;
}

typedef Py_ssize_t = ssize_t;
typedef ssize_t = __darwin_ssize_t;
typedef __darwin_ssize_t = ffi.Long;
typedef PyTypeObject = _typeobject;

class _typeobject extends ffi.Struct {
  external PyVarObject ob_base;

  external ffi.Pointer<ffi.Char> tp_name;

  @Py_ssize_t()
  external int tp_basicsize;

  @Py_ssize_t()
  external int tp_itemsize;

  external destructor tp_dealloc;

  @Py_ssize_t()
  external int tp_vectorcall_offset;

  external getattrfunc tp_getattr;

  external setattrfunc tp_setattr;

  external ffi.Pointer<PyAsyncMethods> tp_as_async;

  external reprfunc tp_repr;

  external ffi.Pointer<PyNumberMethods> tp_as_number;

  external ffi.Pointer<PySequenceMethods> tp_as_sequence;

  external ffi.Pointer<PyMappingMethods> tp_as_mapping;

  external hashfunc tp_hash;

  external ternaryfunc tp_call;

  external reprfunc tp_str;

  external getattrofunc tp_getattro;

  external setattrofunc tp_setattro;

  external ffi.Pointer<PyBufferProcs> tp_as_buffer;

  @ffi.UnsignedLong()
  external int tp_flags;

  external ffi.Pointer<ffi.Char> tp_doc;

  external traverseproc tp_traverse;

  external inquiry tp_clear;

  external richcmpfunc tp_richcompare;

  @Py_ssize_t()
  external int tp_weaklistoffset;

  external getiterfunc tp_iter;

  external iternextfunc tp_iternext;

  external ffi.Pointer<PyMethodDef> tp_methods;

  external ffi.Pointer<PyMemberDef> tp_members;

  external ffi.Pointer<PyGetSetDef> tp_getset;

  external ffi.Pointer<PyTypeObject1> tp_base;

  external ffi.Pointer<PyObject1> tp_dict;

  external descrgetfunc tp_descr_get;

  external descrsetfunc tp_descr_set;

  @Py_ssize_t()
  external int tp_dictoffset;

  external initproc tp_init;

  external allocfunc tp_alloc;

  external newfunc tp_new;

  external freefunc tp_free;

  external inquiry tp_is_gc;

  external ffi.Pointer<PyObject1> tp_bases;

  external ffi.Pointer<PyObject1> tp_mro;

  external ffi.Pointer<PyObject1> tp_cache;

  external ffi.Pointer<PyObject1> tp_subclasses;

  external ffi.Pointer<PyObject1> tp_weaklist;

  external destructor tp_del;

  @ffi.UnsignedInt()
  external int tp_version_tag;

  external destructor tp_finalize;

  external vectorcallfunc tp_vectorcall;
}

class PyVarObject extends ffi.Struct {
  external PyObject1 ob_base;

  @Py_ssize_t()
  external int ob_size;
}

typedef PyObject1 = _object;
typedef destructor = ffi
    .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject1>)>>;
typedef getattrfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(
            ffi.Pointer<PyObject1>, ffi.Pointer<ffi.Char>)>>;
typedef setattrfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<PyObject1>, ffi.Pointer<ffi.Char>,
            ffi.Pointer<PyObject1>)>>;

class PyAsyncMethods extends ffi.Struct {
  external unaryfunc am_await;

  external unaryfunc am_aiter;

  external unaryfunc am_anext;

  external sendfunc am_send;
}

typedef unaryfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(ffi.Pointer<PyObject1>)>>;
typedef sendfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>,
            ffi.Pointer<ffi.Pointer<PyObject1>>)>>;

abstract class PySendResult {
  static const int PYGEN_RETURN = 0;
  static const int PYGEN_ERROR = -1;
  static const int PYGEN_NEXT = 1;
}

typedef reprfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(ffi.Pointer<PyObject1>)>>;

class PyNumberMethods extends ffi.Struct {
  external binaryfunc nb_add;

  external binaryfunc nb_subtract;

  external binaryfunc nb_multiply;

  external binaryfunc nb_remainder;

  external binaryfunc nb_divmod;

  external ternaryfunc nb_power;

  external unaryfunc nb_negative;

  external unaryfunc nb_positive;

  external unaryfunc nb_absolute;

  external inquiry nb_bool;

  external unaryfunc nb_invert;

  external binaryfunc nb_lshift;

  external binaryfunc nb_rshift;

  external binaryfunc nb_and;

  external binaryfunc nb_xor;

  external binaryfunc nb_or;

  external unaryfunc nb_int;

  external ffi.Pointer<ffi.Void> nb_reserved;

  external unaryfunc nb_float;

  external binaryfunc nb_inplace_add;

  external binaryfunc nb_inplace_subtract;

  external binaryfunc nb_inplace_multiply;

  external binaryfunc nb_inplace_remainder;

  external ternaryfunc nb_inplace_power;

  external binaryfunc nb_inplace_lshift;

  external binaryfunc nb_inplace_rshift;

  external binaryfunc nb_inplace_and;

  external binaryfunc nb_inplace_xor;

  external binaryfunc nb_inplace_or;

  external binaryfunc nb_floor_divide;

  external binaryfunc nb_true_divide;

  external binaryfunc nb_inplace_floor_divide;

  external binaryfunc nb_inplace_true_divide;

  external unaryfunc nb_index;

  external binaryfunc nb_matrix_multiply;

  external binaryfunc nb_inplace_matrix_multiply;
}

typedef binaryfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(
            ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>)>>;
typedef ternaryfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(ffi.Pointer<PyObject1>,
            ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>)>>;
typedef inquiry
= ffi.Pointer<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<PyObject1>)>>;

class PySequenceMethods extends ffi.Struct {
  external lenfunc sq_length;

  external binaryfunc sq_concat;

  external ssizeargfunc sq_repeat;

  external ssizeargfunc sq_item;

  external ffi.Pointer<ffi.Void> was_sq_slice;

  external ssizeobjargproc sq_ass_item;

  external ffi.Pointer<ffi.Void> was_sq_ass_slice;

  external objobjproc sq_contains;

  external binaryfunc sq_inplace_concat;

  external ssizeargfunc sq_inplace_repeat;
}

typedef lenfunc = ffi
    .Pointer<ffi.NativeFunction<Py_ssize_t Function(ffi.Pointer<PyObject1>)>>;
typedef ssizeargfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(ffi.Pointer<PyObject1>, Py_ssize_t)>>;
typedef ssizeobjargproc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<PyObject1>, Py_ssize_t, ffi.Pointer<PyObject1>)>>;
typedef objobjproc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>)>>;

class PyMappingMethods extends ffi.Struct {
  external lenfunc mp_length;

  external binaryfunc mp_subscript;

  external objobjargproc mp_ass_subscript;
}

typedef objobjargproc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>,
            ffi.Pointer<PyObject1>)>>;
typedef hashfunc = ffi
    .Pointer<ffi.NativeFunction<Py_hash_t Function(ffi.Pointer<PyObject1>)>>;
typedef Py_hash_t = Py_ssize_t;
typedef getattrofunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(
            ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>)>>;
typedef setattrofunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>,
            ffi.Pointer<PyObject1>)>>;

class PyBufferProcs extends ffi.Struct {
  external getbufferproc bf_getbuffer;

  external releasebufferproc bf_releasebuffer;
}

typedef getbufferproc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<PyObject1>, ffi.Pointer<Py_buffer>, ffi.Int)>>;

class Py_buffer extends ffi.Struct {
  external ffi.Pointer<ffi.Void> buf;

  external ffi.Pointer<PyObject1> obj;

  @Py_ssize_t()
  external int len;

  @Py_ssize_t()
  external int itemsize;

  @ffi.Int()
  external int readonly;

  @ffi.Int()
  external int ndim;

  external ffi.Pointer<ffi.Char> format;

  external ffi.Pointer<Py_ssize_t> shape;

  external ffi.Pointer<Py_ssize_t> strides;

  external ffi.Pointer<Py_ssize_t> suboffsets;

  external ffi.Pointer<ffi.Void> internal;
}

typedef releasebufferproc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<PyObject1>, ffi.Pointer<Py_buffer>)>>;
typedef traverseproc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(
            ffi.Pointer<PyObject1>, visitproc, ffi.Pointer<ffi.Void>)>>;
typedef visitproc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<PyObject1>, ffi.Pointer<ffi.Void>)>>;
typedef richcmpfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(
            ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>, ffi.Int)>>;
typedef getiterfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(ffi.Pointer<PyObject1>)>>;
typedef iternextfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(ffi.Pointer<PyObject1>)>>;

class PyMethodDef extends ffi.Struct {
  external ffi.Pointer<ffi.Char> ml_name;

  external PyCFunction ml_meth;

  @ffi.Int()
  external int ml_flags;

  external ffi.Pointer<ffi.Char> ml_doc;
}

typedef PyCFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(
            ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>)>>;

class PyMemberDef extends ffi.Opaque {}

class PyGetSetDef extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external getter get1;

  external setter set1;

  external ffi.Pointer<ffi.Char> doc;

  external ffi.Pointer<ffi.Void> closure;
}

typedef getter = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(
            ffi.Pointer<PyObject1>, ffi.Pointer<ffi.Void>)>>;
typedef setter = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>,
            ffi.Pointer<ffi.Void>)>>;
typedef PyTypeObject1 = _typeobject;
typedef descrgetfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(ffi.Pointer<PyObject1>,
            ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>)>>;
typedef descrsetfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>,
            ffi.Pointer<PyObject1>)>>;
typedef initproc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>,
            ffi.Pointer<PyObject1>)>>;
typedef allocfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(
            ffi.Pointer<PyTypeObject1>, Py_ssize_t)>>;
typedef newfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(ffi.Pointer<PyTypeObject1>,
            ffi.Pointer<PyObject1>, ffi.Pointer<PyObject1>)>>;
typedef freefunc
= ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef vectorcallfunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<PyObject1> Function(
            ffi.Pointer<PyObject1>,
            ffi.Pointer<ffi.Pointer<PyObject1>>,
            ffi.Size,
            ffi.Pointer<PyObject1>)>>;

class PyModuleDef_Slot extends ffi.Struct {
  @ffi.Int()
  external int slot;

  external ffi.Pointer<ffi.Void> value;
}

class _longobject extends ffi.Struct {
  external PyVarObject ob_base;

  @ffi.Array.multi([1])
  external ffi.Array<digit> ob_digit;
}

typedef digit = ffi.Uint32;

class PyCodeObject extends ffi.Struct {
  external PyVarObject ob_base;

  external ffi.Pointer<PyObject> co_consts;

  external ffi.Pointer<PyObject> co_names;

  external ffi.Pointer<PyObject> co_exceptiontable;

  @ffi.Int()
  external int co_flags;

  @ffi.Short()
  external int co_warmup;

  @ffi.Short()
  external int _co_linearray_entry_size;

  @ffi.Int()
  external int co_argcount;

  @ffi.Int()
  external int co_posonlyargcount;

  @ffi.Int()
  external int co_kwonlyargcount;

  @ffi.Int()
  external int co_stacksize;

  @ffi.Int()
  external int co_firstlineno;

  @ffi.Int()
  external int co_nlocalsplus;

  @ffi.Int()
  external int co_nlocals;

  @ffi.Int()
  external int co_nplaincellvars;

  @ffi.Int()
  external int co_ncellvars;

  @ffi.Int()
  external int co_nfreevars;

  external ffi.Pointer<PyObject> co_localsplusnames;

  external ffi.Pointer<PyObject> co_localspluskinds;

  external ffi.Pointer<PyObject> co_filename;

  external ffi.Pointer<PyObject> co_name;

  external ffi.Pointer<PyObject> co_qualname;

  external ffi.Pointer<PyObject> co_linetable;

  external ffi.Pointer<PyObject> co_weakreflist;

  external ffi.Pointer<PyObject> _co_code;

  external ffi.Pointer<ffi.Char> _co_linearray;

  @ffi.Int()
  external int _co_firsttraceable;

  external ffi.Pointer<ffi.Void> co_extra;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Char> co_code_adaptive;
}

class _frame extends ffi.Opaque {}

class _ts extends ffi.Struct {
  external ffi.Pointer<PyThreadState> prev;

  external ffi.Pointer<PyThreadState> next;

  external ffi.Pointer<PyInterpreterState> interp;

  @ffi.Int()
  external int _initialized;

  @ffi.Int()
  external int _static;

  @ffi.Int()
  external int recursion_remaining;

  @ffi.Int()
  external int recursion_limit;

  @ffi.Int()
  external int recursion_headroom;

  @ffi.Int()
  external int tracing;

  @ffi.Int()
  external int tracing_what;

  external ffi.Pointer<_PyCFrame> cframe;

  external Py_tracefunc c_profilefunc;

  external Py_tracefunc c_tracefunc;

  external ffi.Pointer<PyObject> c_profileobj;

  external ffi.Pointer<PyObject> c_traceobj;

  external ffi.Pointer<PyObject> curexc_type;

  external ffi.Pointer<PyObject> curexc_value;

  external ffi.Pointer<PyObject> curexc_traceback;

  external ffi.Pointer<_PyErr_StackItem> exc_info;

  external ffi.Pointer<PyObject> dict;

  @ffi.Int()
  external int gilstate_counter;

  external ffi.Pointer<PyObject> async_exc;

  @ffi.UnsignedLong()
  external int thread_id;

  @ffi.UnsignedLong()
  external int native_thread_id;

  @ffi.Int()
  external int trash_delete_nesting;

  external ffi.Pointer<PyObject> trash_delete_later;

  external ffi
      .Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>
  on_delete;

  external ffi.Pointer<ffi.Void> on_delete_data;

  @ffi.Int()
  external int coroutine_origin_tracking_depth;

  external ffi.Pointer<PyObject> async_gen_firstiter;

  external ffi.Pointer<PyObject> async_gen_finalizer;

  external ffi.Pointer<PyObject> context;

  @ffi.Uint64()
  external int context_ver;

  @ffi.Uint64()
  external int id;

  external PyTraceInfo trace_info;

  external ffi.Pointer<_PyStackChunk> datastack_chunk;

  external ffi.Pointer<ffi.Pointer<PyObject>> datastack_top;

  external ffi.Pointer<ffi.Pointer<PyObject>> datastack_limit;

  external _PyErr_StackItem exc_state;

  external _PyCFrame root_cframe;
}

typedef PyThreadState = _ts;
typedef PyInterpreterState = _is;

class _is extends ffi.Opaque {}

class _PyCFrame extends ffi.Struct {
  @ffi.Uint8()
  external int use_tracing;

  external ffi.Pointer<_PyInterpreterFrame> current_frame;

  external ffi.Pointer<_PyCFrame> previous;
}

class _PyInterpreterFrame extends ffi.Opaque {}

typedef Py_tracefunc = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<PyObject>, ffi.Pointer<PyFrameObject>,
            ffi.Int, ffi.Pointer<PyObject>)>>;
typedef PyFrameObject = _frame;
typedef _PyErr_StackItem = _err_stackitem;

class _err_stackitem extends ffi.Struct {
  external ffi.Pointer<PyObject> exc_value;

  external ffi.Pointer<_err_stackitem> previous_item;
}

class PyTraceInfo extends ffi.Struct {
  external ffi.Pointer<PyCodeObject> code;

  external PyCodeAddressRange bounds;
}

typedef PyCodeAddressRange = _line_offsets;

class _line_offsets extends ffi.Struct {
  @ffi.Int()
  external int ar_start;

  @ffi.Int()
  external int ar_end;

  @ffi.Int()
  external int ar_line;

  external _opaque opaque;
}

class _opaque extends ffi.Struct {
  @ffi.Int()
  external int computed_line;

  external ffi.Pointer<ffi.Uint8> lo_next;

  external ffi.Pointer<ffi.Uint8> limit;
}

typedef _PyStackChunk = _stack_chunk;

class _stack_chunk extends ffi.Struct {
  external ffi.Pointer<_stack_chunk> previous;

  @ffi.Size()
  external int size;

  @ffi.Size()
  external int top;

  @ffi.Array.multi([1])
  external ffi.Array<ffi.Pointer<PyObject>> data;
}

class PyType_Slot extends ffi.Struct {
  @ffi.Int()
  external int slot;

  external ffi.Pointer<ffi.Void> pfunc;
}

class PyType_Spec extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  @ffi.Int()
  external int basicsize;

  @ffi.Int()
  external int itemsize;

  @ffi.UnsignedInt()
  external int flags;

  external ffi.Pointer<PyType_Slot> slots;
}

class _Py_HashSecret_t extends ffi.Union {
  @ffi.Array.multi([24])
  external ffi.Array<ffi.UnsignedChar> uc;

  external UnnamedStruct1 fnv;

  external UnnamedStruct2 siphash;

  external UnnamedStruct3 djbx33a;

  external UnnamedStruct4 expat;
}

class UnnamedStruct1 extends ffi.Struct {
  @Py_hash_t()
  external int prefix;

  @Py_hash_t()
  external int suffix;
}

class UnnamedStruct2 extends ffi.Struct {
  @ffi.Uint64()
  external int k0;

  @ffi.Uint64()
  external int k1;
}

class UnnamedStruct3 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> padding;

  @Py_hash_t()
  external int suffix;
}

class UnnamedStruct4 extends ffi.Struct {
  @ffi.Array.multi([16])
  external ffi.Array<ffi.UnsignedChar> padding;

  @Py_hash_t()
  external int hashsalt;
}

class PyHash_FuncDef extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          Py_hash_t Function(ffi.Pointer<ffi.Void>, Py_ssize_t)>> hash;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Int()
  external int hash_bits;

  @ffi.Int()
  external int seed_bits;
}

class __va_list_tag extends ffi.Struct {
  @ffi.UnsignedInt()
  external int gp_offset;

  @ffi.UnsignedInt()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

typedef Py_UCS4 = ffi.Uint32;
typedef PyLongObject = _longobject;

class _PyManagedBufferObject extends ffi.Struct {
  external PyObject ob_base;

  @ffi.Int()
  external int flags;

  @Py_ssize_t()
  external int exports;

  external Py_buffer master;
}

class PyMemoryViewObject extends ffi.Struct {
  external PyVarObject ob_base;

  external ffi.Pointer<_PyManagedBufferObject> mbuf;

  @Py_hash_t()
  external int hash;

  @ffi.Int()
  external int flags;

  @Py_ssize_t()
  external int exports;

  external Py_buffer view;

  external ffi.Pointer<PyObject> weakreflist;

  @ffi.Array.multi([1])
  external ffi.Array<Py_ssize_t> ob_array;
}

typedef PyCapsule_Destructor
= ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PyObject>)>>;

class PySliceObject extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<PyObject> start;

  external ffi.Pointer<PyObject> stop;

  external ffi.Pointer<PyObject> step;
}

abstract class PyGILState_STATE {
  static const int PyGILState_LOCKED = 0;
  static const int PyGILState_UNLOCKED = 1;
}

class _PyWeakReference extends ffi.Struct {
  external PyObject ob_base;

  external ffi.Pointer<PyObject> wr_object;

  external ffi.Pointer<PyObject> wr_callback;

  @Py_hash_t()
  external int hash;

  external ffi.Pointer<PyWeakReference> wr_prev;

  external ffi.Pointer<PyWeakReference> wr_next;

  external vectorcallfunc vectorcall;
}

typedef PyWeakReference = _PyWeakReference;

class PyStructSequence_Field extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> doc;
}

class PyStructSequence_Desc extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> doc;

  external ffi.Pointer<PyStructSequence_Field> fields;

  @ffi.Int()
  external int n_in_sequence;
}

abstract class PyLockStatus {
  static const int PY_LOCK_FAILURE = 0;
  static const int PY_LOCK_ACQUIRED = 1;
  static const int PY_LOCK_INTR = 2;
}

typedef PyThread_type_lock = ffi.Pointer<ffi.Void>;

class _Py_tss_t extends ffi.Struct {
  @ffi.Int()
  external int _is_initialized;

  @pthread_key_t()
  external int _key;
}

typedef pthread_key_t = __darwin_pthread_key_t;
typedef __darwin_pthread_key_t = ffi.UnsignedLong;
typedef Py_tss_t = _Py_tss_t;
typedef PyOS_sighandler_t
= ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>;

const int PY_RELEASE_LEVEL_ALPHA = 10;

const int PY_RELEASE_LEVEL_BETA = 11;

const int PY_RELEASE_LEVEL_GAMMA = 12;

const int PY_RELEASE_LEVEL_FINAL = 15;

const int PY_MAJOR_VERSION = 3;

const int PY_MINOR_VERSION = 11;

const int PY_MICRO_VERSION = 0;

const int PY_RELEASE_LEVEL = 15;

const int PY_RELEASE_SERIAL = 0;

const String PY_VERSION = '3.11.0';

const int PY_VERSION_HEX = 51052784;

const int ALIGNOF_LONG = 8;

const int ALIGNOF_SIZE_T = 8;

const int ENABLE_IPV6 = 1;

const int HAVE_ACCEPT = 1;

const int HAVE_ACOSH = 1;

const int HAVE_ADDRINFO = 1;

const int HAVE_ALARM = 1;

const int HAVE_ALLOCA_H = 1;

const int HAVE_ASINH = 1;

const int HAVE_ATANH = 1;

const int HAVE_BIND = 1;

const int HAVE_BROKEN_SEM_GETVALUE = 1;

const int HAVE_BUILTIN_ATOMIC = 1;

const int HAVE_BZLIB_H = 1;

const int HAVE_CHFLAGS = 1;

const int HAVE_CHMOD = 1;

const int HAVE_CHOWN = 1;

const int HAVE_CHROOT = 1;

const int HAVE_CLOCK = 1;

const int HAVE_CLOCK_GETRES = 1;

const int HAVE_CLOCK_GETTIME = 1;

const int HAVE_CLOCK_SETTIME = 1;

const int HAVE_COMPUTED_GOTOS = 1;

const int HAVE_CONFSTR = 1;

const int HAVE_CONNECT = 1;

const int HAVE_CTERMID = 1;

const int HAVE_CTERMID_R = 1;

const int HAVE_CURSES_FILTER = 1;

const int HAVE_CURSES_H = 1;

const int HAVE_CURSES_HAS_KEY = 1;

const int HAVE_CURSES_IMMEDOK = 1;

const int HAVE_CURSES_IS_TERM_RESIZED = 1;

const int HAVE_CURSES_RESIZETERM = 1;

const int HAVE_CURSES_RESIZE_TERM = 1;

const int HAVE_CURSES_SYNCOK = 1;

const int HAVE_CURSES_TYPEAHEAD = 1;

const int HAVE_CURSES_USE_ENV = 1;

const int HAVE_CURSES_WCHGAT = 1;

const int HAVE_DB_H = 1;

const int HAVE_DECL_RTLD_DEEPBIND = 0;

const int HAVE_DECL_RTLD_GLOBAL = 1;

const int HAVE_DECL_RTLD_LAZY = 1;

const int HAVE_DECL_RTLD_LOCAL = 1;

const int HAVE_DECL_RTLD_MEMBER = 0;

const int HAVE_DECL_RTLD_NODELETE = 1;

const int HAVE_DECL_RTLD_NOLOAD = 1;

const int HAVE_DECL_RTLD_NOW = 1;

const int HAVE_DEVICE_MACROS = 1;

const int HAVE_DEV_PTMX = 1;

const int HAVE_DIRENT_D_TYPE = 1;

const int HAVE_DIRENT_H = 1;

const int HAVE_DIRFD = 1;

const int HAVE_DLFCN_H = 1;

const int HAVE_DLOPEN = 1;

const int HAVE_DUP = 1;

const int HAVE_DUP2 = 1;

const int HAVE_DYLD_SHARED_CACHE_CONTAINS_PATH = 1;

const int HAVE_DYNAMIC_LOADING = 1;

const int HAVE_ERF = 1;

const int HAVE_ERFC = 1;

const int HAVE_ERRNO_H = 1;

const int HAVE_EXECV = 1;

const int HAVE_EXPM1 = 1;

const int HAVE_FACCESSAT = 1;

const int HAVE_FCHDIR = 1;

const int HAVE_FCHMOD = 1;

const int HAVE_FCHMODAT = 1;

const int HAVE_FCHOWN = 1;

const int HAVE_FCHOWNAT = 1;

const int HAVE_FCNTL_H = 1;

const int HAVE_FDOPENDIR = 1;

const int HAVE_FLOCK = 1;

const int HAVE_FORK = 1;

const int HAVE_FORKPTY = 1;

const int HAVE_FPATHCONF = 1;

const int HAVE_FSEEKO = 1;

const int HAVE_FSTATAT = 1;

const int HAVE_FSTATVFS = 1;

const int HAVE_FSYNC = 1;

const int HAVE_FTELLO = 1;

const int HAVE_FTIME = 1;

const int HAVE_FTRUNCATE = 1;

const int HAVE_FUTIMENS = 1;

const int HAVE_FUTIMES = 1;

const int HAVE_GAI_STRERROR = 1;

const int HAVE_GCC_UINT128_T = 1;

const int HAVE_GETADDRINFO = 1;

const int HAVE_GETC_UNLOCKED = 1;

const int HAVE_GETEGID = 1;

const int HAVE_GETENTROPY = 1;

const int HAVE_GETEUID = 1;

const int HAVE_GETGID = 1;

const int HAVE_GETGRGID = 1;

const int HAVE_GETGRGID_R = 1;

const int HAVE_GETGRNAM_R = 1;

const int HAVE_GETGROUPLIST = 1;

const int HAVE_GETGROUPS = 1;

const int HAVE_GETHOSTBYADDR = 1;

const int HAVE_GETHOSTBYNAME = 1;

const int HAVE_GETHOSTNAME = 1;

const int HAVE_GETITIMER = 1;

const int HAVE_GETLOADAVG = 1;

const int HAVE_GETLOGIN = 1;

const int HAVE_GETNAMEINFO = 1;

const int HAVE_GETPAGESIZE = 1;

const int HAVE_GETPEERNAME = 1;

const int HAVE_GETPGID = 1;

const int HAVE_GETPGRP = 1;

const int HAVE_GETPID = 1;

const int HAVE_GETPPID = 1;

const int HAVE_GETPRIORITY = 1;

const int HAVE_GETPROTOBYNAME = 1;

const int HAVE_GETPWENT = 1;

const int HAVE_GETPWNAM_R = 1;

const int HAVE_GETPWUID = 1;

const int HAVE_GETPWUID_R = 1;

const int HAVE_GETRUSAGE = 1;

const int HAVE_GETSERVBYNAME = 1;

const int HAVE_GETSERVBYPORT = 1;

const int HAVE_GETSID = 1;

const int HAVE_GETSOCKNAME = 1;

const int HAVE_GETUID = 1;

const int HAVE_GETWD = 1;

const int HAVE_GRP_H = 1;

const int HAVE_HSTRERROR = 1;

const int HAVE_IF_NAMEINDEX = 1;

const int HAVE_INET_ATON = 1;

const int HAVE_INET_NTOA = 1;

const int HAVE_INET_PTON = 1;

const int HAVE_INITGROUPS = 1;

const int HAVE_INTTYPES_H = 1;

const int HAVE_KILL = 1;

const int HAVE_KILLPG = 1;

const int HAVE_KQUEUE = 1;

const int HAVE_LANGINFO_H = 1;

const int HAVE_LCHFLAGS = 1;

const int HAVE_LCHMOD = 1;

const int HAVE_LCHOWN = 1;

const int HAVE_LIBDL = 1;

const int HAVE_LIBREADLINE = 1;

const int HAVE_LIBSQLITE3 = 1;

const int HAVE_LINK = 1;

const int HAVE_LINKAT = 1;

const int HAVE_LISTEN = 1;

const int HAVE_LOCKF = 1;

const int HAVE_LOG1P = 1;

const int HAVE_LOG2 = 1;

const int HAVE_LOGIN_TTY = 1;

const int HAVE_LONG_DOUBLE = 1;

const int HAVE_LSTAT = 1;

const int HAVE_LUTIMES = 1;

const int HAVE_LZMA_H = 1;

const int HAVE_MADVISE = 1;

const int HAVE_MAKEDEV = 1;

const int HAVE_MBRTOWC = 1;

const int HAVE_MEMORY_H = 1;

const int HAVE_MKDIRAT = 1;

const int HAVE_MKFIFO = 1;

const int HAVE_MKNOD = 1;

const int HAVE_MKTIME = 1;

const int HAVE_MMAP = 1;

const int HAVE_NANOSLEEP = 1;

const int HAVE_NCURSES_H = 1;

const int HAVE_NDBM_H = 1;

const int HAVE_NETDB_H = 1;

const int HAVE_NETINET_IN_H = 1;

const int HAVE_NET_IF_H = 1;

const int HAVE_NICE = 1;

const int HAVE_OPENAT = 1;

const int HAVE_OPENDIR = 1;

const int HAVE_OPENPTY = 1;

const int HAVE_PATHCONF = 1;

const int HAVE_PAUSE = 1;

const int HAVE_PIPE = 1;

const int HAVE_POLL = 1;

const int HAVE_POLL_H = 1;

const int HAVE_POSIX_SPAWN = 1;

const int HAVE_POSIX_SPAWNP = 1;

const int HAVE_PREAD = 1;

const int HAVE_PREADV = 1;

const int HAVE_PROTOTYPES = 1;

const int HAVE_PTHREAD_H = 1;

const int HAVE_PTHREAD_KILL = 1;

const int HAVE_PTHREAD_SIGMASK = 1;

const int HAVE_PWRITE = 1;

const int HAVE_PWRITEV = 1;

const int HAVE_READLINK = 1;

const int HAVE_READLINKAT = 1;

const int HAVE_READV = 1;

const int HAVE_REALPATH = 1;

const int HAVE_RECVFROM = 1;

const int HAVE_RENAMEAT = 1;

const int HAVE_RL_COMPLETION_APPEND_CHARACTER = 1;

const int HAVE_RL_COMPLETION_DISPLAY_MATCHES_HOOK = 1;

const int HAVE_RL_COMPLETION_MATCHES = 1;

const int HAVE_RL_PRE_INPUT_HOOK = 1;

const int HAVE_RPC_RPC_H = 1;

const int HAVE_SCHED_GET_PRIORITY_MAX = 1;

const int HAVE_SCHED_H = 1;

const int HAVE_SEM_GETVALUE = 1;

const int HAVE_SEM_OPEN = 1;

const int HAVE_SEM_UNLINK = 1;

const int HAVE_SENDFILE = 1;

const int HAVE_SENDTO = 1;

const int HAVE_SETEGID = 1;

const int HAVE_SETEUID = 1;

const int HAVE_SETGID = 1;

const int HAVE_SETGROUPS = 1;

const int HAVE_SETHOSTNAME = 1;

const int HAVE_SETITIMER = 1;

const int HAVE_SETJMP_H = 1;

const int HAVE_SETLOCALE = 1;

const int HAVE_SETPGID = 1;

const int HAVE_SETPGRP = 1;

const int HAVE_SETPRIORITY = 1;

const int HAVE_SETREGID = 1;

const int HAVE_SETREUID = 1;

const int HAVE_SETSID = 1;

const int HAVE_SETSOCKOPT = 1;

const int HAVE_SETUID = 1;

const int HAVE_SETVBUF = 1;

const int HAVE_SHM_OPEN = 1;

const int HAVE_SHM_UNLINK = 1;

const int HAVE_SHUTDOWN = 1;

const int HAVE_SIGACTION = 1;

const int HAVE_SIGALTSTACK = 1;

const int HAVE_SIGFILLSET = 1;

const int HAVE_SIGINFO_T_SI_BAND = 1;

const int HAVE_SIGINTERRUPT = 1;

const int HAVE_SIGNAL_H = 1;

const int HAVE_SIGPENDING = 1;

const int HAVE_SIGRELSE = 1;

const int HAVE_SIGWAIT = 1;

const int HAVE_SNPRINTF = 1;

const int HAVE_SOCKADDR_SA_LEN = 1;

const int HAVE_SOCKADDR_STORAGE = 1;

const int HAVE_SOCKET = 1;

const int HAVE_SOCKETPAIR = 1;

const int HAVE_SPAWN_H = 1;

const int HAVE_SSIZE_T = 1;

const int HAVE_STATVFS = 1;

const int HAVE_STAT_TV_NSEC2 = 1;

const int HAVE_STDARG_PROTOTYPES = 1;

const int HAVE_STDINT_H = 1;

const int HAVE_STDLIB_H = 1;

const int HAVE_STD_ATOMIC = 1;

const int HAVE_STRFTIME = 1;

const int HAVE_STRINGS_H = 1;

const int HAVE_STRING_H = 1;

const int HAVE_STRLCPY = 1;

const int HAVE_STRSIGNAL = 1;

const int HAVE_STRUCT_PASSWD_PW_GECOS = 1;

const int HAVE_STRUCT_PASSWD_PW_PASSWD = 1;

const int HAVE_STRUCT_STAT_ST_BIRTHTIME = 1;

const int HAVE_STRUCT_STAT_ST_BLKSIZE = 1;

const int HAVE_STRUCT_STAT_ST_BLOCKS = 1;

const int HAVE_STRUCT_STAT_ST_FLAGS = 1;

const int HAVE_STRUCT_STAT_ST_GEN = 1;

const int HAVE_STRUCT_STAT_ST_RDEV = 1;

const int HAVE_STRUCT_TM_TM_ZONE = 1;

const int HAVE_SYMLINK = 1;

const int HAVE_SYMLINKAT = 1;

const int HAVE_SYNC = 1;

const int HAVE_SYSCONF = 1;

const int HAVE_SYSEXITS_H = 1;

const int HAVE_SYSLOG_H = 1;

const int HAVE_SYSTEM = 1;

const int HAVE_SYS_EVENT_H = 1;

const int HAVE_SYS_FILE_H = 1;

const int HAVE_SYS_IOCTL_H = 1;

const int HAVE_SYS_KERN_CONTROL_H = 1;

const int HAVE_SYS_LOCK_H = 1;

const int HAVE_SYS_MMAN_H = 1;

const int HAVE_SYS_PARAM_H = 1;

const int HAVE_SYS_POLL_H = 1;

const int HAVE_SYS_RANDOM_H = 1;

const int HAVE_SYS_RESOURCE_H = 1;

const int HAVE_SYS_SELECT_H = 1;

const int HAVE_SYS_SOCKET_H = 1;

const int HAVE_SYS_STATVFS_H = 1;

const int HAVE_SYS_STAT_H = 1;

const int HAVE_SYS_SYSCALL_H = 1;

const int HAVE_SYS_SYS_DOMAIN_H = 1;

const int HAVE_SYS_TIMES_H = 1;

const int HAVE_SYS_TIME_H = 1;

const int HAVE_SYS_TYPES_H = 1;

const int HAVE_SYS_UIO_H = 1;

const int HAVE_SYS_UN_H = 1;

const int HAVE_SYS_UTSNAME_H = 1;

const int HAVE_SYS_WAIT_H = 1;

const int HAVE_SYS_XATTR_H = 1;

const int HAVE_TCGETPGRP = 1;

const int HAVE_TCSETPGRP = 1;

const int HAVE_TEMPNAM = 1;

const int HAVE_TERMIOS_H = 1;

const int HAVE_TERM_H = 1;

const int HAVE_TIMEGM = 1;

const int HAVE_TIMES = 1;

const int HAVE_TMPFILE = 1;

const int HAVE_TMPNAM = 1;

const int HAVE_TM_ZONE = 1;

const int HAVE_TRUNCATE = 1;

const int HAVE_TTYNAME = 1;

const int HAVE_UMASK = 1;

const int HAVE_UNAME = 1;

const int HAVE_UNISTD_H = 1;

const int HAVE_UNLINKAT = 1;

const int HAVE_UTIL_H = 1;

const int HAVE_UTIMENSAT = 1;

const int HAVE_UTIMES = 1;

const int HAVE_UTIME_H = 1;

const int HAVE_UTMP_H = 1;

const int HAVE_UUID_UUID_H = 1;

const int HAVE_VFORK = 1;

const int HAVE_WAIT = 1;

const int HAVE_WAIT3 = 1;

const int HAVE_WAIT4 = 1;

const int HAVE_WAITID = 1;

const int HAVE_WAITPID = 1;

const int HAVE_WCHAR_H = 1;

const int HAVE_WCSCOLL = 1;

const int HAVE_WCSFTIME = 1;

const int HAVE_WCSXFRM = 1;

const int HAVE_WMEMCMP = 1;

const int HAVE_WORKING_TZSET = 1;

const int HAVE_WRITEV = 1;

const int HAVE_ZLIB_COPY = 1;

const int HAVE_ZLIB_H = 1;

const int MVWDELCH_IS_EXPRESSION = 1;

const int PTHREAD_SYSTEM_SCHED_SUPPORTED = 1;

const String PY_BUILTIN_HASHLIB_HASHES = 'md5,sha1,sha256,sha512,sha3,blake2';

const int PY_COERCE_C_LOCALE = 1;

const String PY_FORMAT_SIZE_T = 'z';

const int PY_SQLITE_HAVE_SERIALIZE = 1;

const int PY_SSL_DEFAULT_CIPHERS = 1;

const int PY_SUPPORT_TIER = 1;

const int SIZEOF_DOUBLE = 8;

const int SIZEOF_FLOAT = 4;

const int SIZEOF_FPOS_T = 8;

const int SIZEOF_INT = 4;

const int SIZEOF_LONG = 8;

const int SIZEOF_LONG_DOUBLE = 16;

const int SIZEOF_LONG_LONG = 8;

const int SIZEOF_OFF_T = 8;

const int SIZEOF_PID_T = 4;

const int SIZEOF_PTHREAD_KEY_T = 8;

const int SIZEOF_PTHREAD_T = 8;

const int SIZEOF_SHORT = 2;

const int SIZEOF_SIZE_T = 8;

const int SIZEOF_TIME_T = 8;

const int SIZEOF_UINTPTR_T = 8;

const int SIZEOF_VOID_P = 8;

const int SIZEOF_WCHAR_T = 4;

const int SIZEOF__BOOL = 1;

const int STDC_HEADERS = 1;

const int SYS_SELECT_WITH_SYS_TIME = 1;

const int THREAD_STACK_SIZE = 16777216;

const int TIME_WITH_SYS_TIME = 1;

const int USE_COMPUTED_GOTOS = 1;

const int _ALL_SOURCE = 1;

const int _GNU_SOURCE = 1;

const int _POSIX_PTHREAD_SEMANTICS = 1;

const int _TANDEM_SOURCE = 1;

const int __EXTENSIONS__ = 1;

const int WINDOW_HAS_FLAGS = 1;

const int WITH_DECIMAL_CONTEXTVAR = 1;

const int WITH_DOC_STRINGS = 1;

const int WITH_DYLD = 1;

const int WITH_FREELISTS = 1;

const int WITH_NEXT_FRAMEWORK = 1;

const int WITH_PYMALLOC = 1;

const int _DARWIN_C_SOURCE = 1;

const int _FILE_OFFSET_BITS = 64;

const int _LARGEFILE_SOURCE = 1;

const int _NETBSD_SOURCE = 1;

const String _PYTHONFRAMEWORK = 'Python';

const int _REENTRANT = 1;

const int __BSD_VISIBLE = 1;

const int VA_LIST_IS_ARRAY = 1;

const int HAVE_LONG_LONG = 1;

const int PY_LLONG_MIN = -9223372036854775808;

const int PY_LLONG_MAX = 9223372036854775807;

const int PY_ULLONG_MAX = -1;

const int PYLONG_BITS_IN_DIGIT = 30;

const int PY_SSIZE_T_MAX = 9223372036854775807;

const int PY_SSIZE_T_MIN = -9223372036854775808;

const int SIZEOF_PY_HASH_T = 8;

const int SIZEOF_PY_UHASH_T = 8;

const int PY_SIZE_MAX = -1;

const int PY_BIG_ENDIAN = 0;

const int PY_LITTLE_ENDIAN = 1;

const int PY_DWORD_MAX = 4294967295;

const double Py_MATH_PIl = 3.141592653589793;

const double Py_MATH_PI = 3.141592653589793;

const double Py_MATH_El = 2.718281828459045;

const double Py_MATH_E = 2.718281828459045;

const double Py_MATH_TAU = 6.283185307179586;

const double Py_HUGE_VAL = double.infinity;

const double Py_NAN = double.nan;

const int PyBUF_MAX_NDIM = 64;

const int PyBUF_SIMPLE = 0;

const int PyBUF_WRITABLE = 1;

const int PyBUF_WRITEABLE = 1;

const int PyBUF_FORMAT = 4;

const int PyBUF_ND = 8;

const int PyBUF_STRIDES = 24;

const int PyBUF_C_CONTIGUOUS = 56;

const int PyBUF_F_CONTIGUOUS = 88;

const int PyBUF_ANY_CONTIGUOUS = 152;

const int PyBUF_INDIRECT = 280;

const int PyBUF_CONTIG = 9;

const int PyBUF_CONTIG_RO = 8;

const int PyBUF_STRIDED = 25;

const int PyBUF_STRIDED_RO = 24;

const int PyBUF_RECORDS = 29;

const int PyBUF_RECORDS_RO = 28;

const int PyBUF_FULL = 285;

const int PyBUF_FULL_RO = 284;

const int PyBUF_READ = 256;

const int PyBUF_WRITE = 512;

const int Py_INVALID_SIZE = -1;

const int Py_PRINT_RAW = 1;

const int Py_TPFLAGS_MANAGED_DICT = 16;

const int Py_TPFLAGS_SEQUENCE = 32;

const int Py_TPFLAGS_MAPPING = 64;

const int Py_TPFLAGS_DISALLOW_INSTANTIATION = 128;

const int Py_TPFLAGS_IMMUTABLETYPE = 256;

const int Py_TPFLAGS_HEAPTYPE = 512;

const int Py_TPFLAGS_BASETYPE = 1024;

const int Py_TPFLAGS_HAVE_VECTORCALL = 2048;

const int _Py_TPFLAGS_HAVE_VECTORCALL = 2048;

const int Py_TPFLAGS_READY = 4096;

const int Py_TPFLAGS_READYING = 8192;

const int Py_TPFLAGS_HAVE_GC = 16384;

const int Py_TPFLAGS_HAVE_STACKLESS_EXTENSION = 0;

const int Py_TPFLAGS_METHOD_DESCRIPTOR = 131072;

const int Py_TPFLAGS_VALID_VERSION_TAG = 524288;

const int Py_TPFLAGS_IS_ABSTRACT = 1048576;

const int _Py_TPFLAGS_MATCH_SELF = 4194304;

const int Py_TPFLAGS_LONG_SUBCLASS = 16777216;

const int Py_TPFLAGS_LIST_SUBCLASS = 33554432;

const int Py_TPFLAGS_TUPLE_SUBCLASS = 67108864;

const int Py_TPFLAGS_BYTES_SUBCLASS = 134217728;

const int Py_TPFLAGS_UNICODE_SUBCLASS = 268435456;

const int Py_TPFLAGS_DICT_SUBCLASS = 536870912;

const int Py_TPFLAGS_BASE_EXC_SUBCLASS = 1073741824;

const int Py_TPFLAGS_TYPE_SUBCLASS = 2147483648;

const int Py_TPFLAGS_DEFAULT = 0;

const int Py_TPFLAGS_HAVE_FINALIZE = 1;

const int Py_TPFLAGS_HAVE_VERSION_TAG = 262144;

const int Py_LT = 0;

const int Py_LE = 1;

const int Py_EQ = 2;

const int Py_NE = 3;

const int Py_GT = 4;

const int Py_GE = 5;

const int Py_bf_getbuffer = 1;

const int Py_bf_releasebuffer = 2;

const int Py_mp_ass_subscript = 3;

const int Py_mp_length = 4;

const int Py_mp_subscript = 5;

const int Py_nb_absolute = 6;

const int Py_nb_add = 7;

const int Py_nb_and = 8;

const int Py_nb_bool = 9;

const int Py_nb_divmod = 10;

const int Py_nb_float = 11;

const int Py_nb_floor_divide = 12;

const int Py_nb_index = 13;

const int Py_nb_inplace_add = 14;

const int Py_nb_inplace_and = 15;

const int Py_nb_inplace_floor_divide = 16;

const int Py_nb_inplace_lshift = 17;

const int Py_nb_inplace_multiply = 18;

const int Py_nb_inplace_or = 19;

const int Py_nb_inplace_power = 20;

const int Py_nb_inplace_remainder = 21;

const int Py_nb_inplace_rshift = 22;

const int Py_nb_inplace_subtract = 23;

const int Py_nb_inplace_true_divide = 24;

const int Py_nb_inplace_xor = 25;

const int Py_nb_int = 26;

const int Py_nb_invert = 27;

const int Py_nb_lshift = 28;

const int Py_nb_multiply = 29;

const int Py_nb_negative = 30;

const int Py_nb_or = 31;

const int Py_nb_positive = 32;

const int Py_nb_power = 33;

const int Py_nb_remainder = 34;

const int Py_nb_rshift = 35;

const int Py_nb_subtract = 36;

const int Py_nb_true_divide = 37;

const int Py_nb_xor = 38;

const int Py_sq_ass_item = 39;

const int Py_sq_concat = 40;

const int Py_sq_contains = 41;

const int Py_sq_inplace_concat = 42;

const int Py_sq_inplace_repeat = 43;

const int Py_sq_item = 44;

const int Py_sq_length = 45;

const int Py_sq_repeat = 46;

const int Py_tp_alloc = 47;

const int Py_tp_base = 48;

const int Py_tp_bases = 49;

const int Py_tp_call = 50;

const int Py_tp_clear = 51;

const int Py_tp_dealloc = 52;

const int Py_tp_del = 53;

const int Py_tp_descr_get = 54;

const int Py_tp_descr_set = 55;

const int Py_tp_doc = 56;

const int Py_tp_getattr = 57;

const int Py_tp_getattro = 58;

const int Py_tp_hash = 59;

const int Py_tp_init = 60;

const int Py_tp_is_gc = 61;

const int Py_tp_iter = 62;

const int Py_tp_iternext = 63;

const int Py_tp_methods = 64;

const int Py_tp_new = 65;

const int Py_tp_repr = 66;

const int Py_tp_richcompare = 67;

const int Py_tp_setattr = 68;

const int Py_tp_setattro = 69;

const int Py_tp_str = 70;

const int Py_tp_traverse = 71;

const int Py_tp_members = 72;

const int Py_tp_getset = 73;

const int Py_tp_free = 74;

const int Py_nb_matrix_multiply = 75;

const int Py_nb_inplace_matrix_multiply = 76;

const int Py_am_await = 77;

const int Py_am_aiter = 78;

const int Py_am_anext = 79;

const int Py_tp_finalize = 80;

const int Py_am_send = 81;

const int _PyHASH_MULTIPLIER = 1000003;

const int _PyHASH_BITS = 61;

const int _PyHASH_MODULUS = 2305843009213693951;

const int _PyHASH_INF = 314159;

const int _PyHASH_IMAG = 1000003;

const int Py_HASH_CUTOFF = 0;

const int Py_HASH_EXTERNAL = 0;

const int Py_HASH_SIPHASH24 = 1;

const int Py_HASH_FNV = 2;

const int Py_HASH_SIPHASH13 = 3;

const int Py_HASH_ALGORITHM = 3;

const int Py_UNICODE_SIZE = 4;

const int Py_UNICODE_REPLACEMENT_CHARACTER = 65533;

const String _Py_PARSE_PID = 'i';

const String _Py_PARSE_INTPTR = 'l';

const String _Py_PARSE_UINTPTR = 'k';

const int _Py_MANAGED_BUFFER_RELEASED = 1;

const int _Py_MANAGED_BUFFER_FREE_FORMAT = 2;

const int _Py_MEMORYVIEW_RELEASED = 1;

const int _Py_MEMORYVIEW_C = 2;

const int _Py_MEMORYVIEW_FORTRAN = 4;

const int _Py_MEMORYVIEW_SCALAR = 8;

const int _Py_MEMORYVIEW_PIL = 16;

const int METH_VARARGS = 1;

const int METH_KEYWORDS = 2;

const int METH_NOARGS = 4;

const int METH_O = 8;

const int METH_CLASS = 16;

const int METH_STATIC = 32;

const int METH_COEXIST = 64;

const int METH_FASTCALL = 128;

const int METH_STACKLESS = 0;

const int METH_METHOD = 512;

const int Py_mod_create = 1;

const int Py_mod_exec = 2;

const int _Py_mod_LAST_SLOT = 2;

const String PY_STDIOTEXTMODE = 'b';

const int MAX_CO_EXTRA_USERS = 255;

const int WAIT_LOCK = 1;

const int NOWAIT_LOCK = 0;

const int PY_TIMEOUT_MAX = 9223372036854775;

const int Py_CLEANUP_SUPPORTED = 131072;

const int PYTHON_API_VERSION = 1013;

const String PYTHON_API_STRING = '1013';

const int PYTHON_ABI_VERSION = 3;

const String PYTHON_ABI_STRING = '3';

const int Py_single_input = 256;

const int Py_file_input = 257;

const int Py_eval_input = 258;

const int Py_func_type_input = 345;

const int Py_fstring_input = 800;

const int PYOS_STACK_MARGIN = 2048;

const int FVC_MASK = 3;

const int FVC_NONE = 0;

const int FVC_STR = 1;

const int FVC_REPR = 2;

const int FVC_ASCII = 3;

const int FVS_MASK = 4;

const int FVS_HAVE_SPEC = 4;

const int Py_DTSF_SIGN = 1;

const int Py_DTSF_ADD_DOT_0 = 2;

const int Py_DTSF_ALT = 4;

const int Py_DTSF_NO_NEG_0 = 8;

const int Py_DTST_FINITE = 0;

const int Py_DTST_INFINITE = 1;

const int Py_DTST_NAN = 2;
