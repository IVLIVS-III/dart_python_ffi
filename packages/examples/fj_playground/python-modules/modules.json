{"python_ffi":{"name":"python_ffi.py","base64":"ZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzCmZyb20gdHlwaW5nIGltcG9ydCBDYWxsYWJsZSwgR2VuZXJhdG9yLCBJdGVyYXRvciwgU2VsZiwgVHlwZVZhciwgR2VuZXJpYwoKClQgPSBUeXBlVmFyKCJUIikKCgpAZGF0YWNsYXNzCmNsYXNzIFB5dGhvbkZmaUl0ZXJhdG9yKEdlbmVyaWNbVF0pOgogICAgZGFydF9tb3ZlX25leHQ6IENhbGxhYmxlW1tdLCBib29sXQogICAgZGFydF9jdXJyZW50OiBDYWxsYWJsZVtbXSwgVF0KCiAgICBkZWYgX19pdGVyX18oc2VsZjogU2VsZikgLT4gU2VsZjoKICAgICAgICByZXR1cm4gc2VsZgoKICAgIGRlZiBfX25leHRfXyhzZWxmOiBTZWxmKSAtPiBUOgogICAgICAgIGlmIHNlbGYuZGFydF9tb3ZlX25leHQoKToKICAgICAgICAgICAgcmV0dXJuIHNlbGYuZGFydF9jdXJyZW50KCkKICAgICAgICByYWlzZSBTdG9wSXRlcmF0aW9uCgoKQGRhdGFjbGFzcwpjbGFzcyBQeXRob25GZmlJdGVyYWJsZShHZW5lcmljW1RdKToKICAgIGRhcnRfaXRlcjogQ2FsbGFibGVbW10sIEl0ZXJhdG9yW1RdXQoKICAgIGRlZiBfX2l0ZXJfXyhzZWxmOiBTZWxmKSAtPiBJdGVyYXRvcltUXToKICAgICAgICByZXR1cm4gc2VsZi5kYXJ0X2l0ZXIoKQoKCkBkYXRhY2xhc3MoKQpjbGFzcyBQeXRob25GZmlBd2FpdGFibGUoR2VuZXJpY1tUXSk6CiAgICBkYXJ0X2lzX2RvbmU6IENhbGxhYmxlW1tdLCBib29sXQogICAgZGFydF9yZXN1bHQ6IENhbGxhYmxlW1tdLCBUXQoKICAgIGRlZiBfX2F3YWl0X18oc2VsZjogU2VsZikgLT4gR2VuZXJhdG9yW1QsIE5vbmUsIE5vbmVdOgogICAgICAgIHdoaWxlIG5vdCBzZWxmLmRhcnRfaXNfZG9uZSgpOgogICAgICAgICAgICB5aWVsZCBOb25lCiAgICAgICAgcmV0dXJuIHNlbGYuZGFydF9yZXN1bHQoKQo="},"FJ_AST":{"name":"FJ_AST.py","base64":"ZnJvbSBkYXRhY2xhc3NlcyBpbXBvcnQgZGF0YWNsYXNzDQoNCg0KY2xhc3MgVHlwZToNCiAgICBwYXNzDQoNCg0KQGRhdGFjbGFzcyhmcm96ZW49VHJ1ZSkNCmNsYXNzIEZKT2JqZWN0KFR5cGUpOg0KDQogICAgZGVmIF9fc3RyX18oc2VsZikgLT4gc3RyOg0KICAgICAgICByZXR1cm4gIk9iamVjdCINCg0KDQpAZGF0YWNsYXNzKGZyb3plbj1UcnVlKQ0KY2xhc3MgRkpDbGFzcyhUeXBlKToNCiAgICBuYW1lOiBzdHINCg0KICAgIGRlZiBfX3N0cl9fKHNlbGYpIC0+IHN0cjoNCiAgICAgICAgcmV0dXJuIHNlbGYubmFtZQ0KDQoNCmNsYXNzIEV4cHJlc3Npb246DQogICAgcGFzcw0KDQoNCkBkYXRhY2xhc3MoZnJvemVuPVRydWUpDQpjbGFzcyBWYXJpYWJsZShFeHByZXNzaW9uKToNCiAgICAnJycNCiAgICB2YXJpYWJsZQ0KICAgICcnJw0KICAgIG5hbWU6IHN0cg0KDQogICAgZGVmIF9fc3RyX18oc2VsZikgLT4gc3RyOg0KICAgICAgICByZXR1cm4gc2VsZi5uYW1lDQoNCg0KQGRhdGFjbGFzcyhmcm96ZW49VHJ1ZSkNCmNsYXNzIEZpZWxkTG9va3VwKEV4cHJlc3Npb24pOg0KICAgICcnJw0KICAgIGV4cHJlc3Npb24uZmllbGQNCiAgICAnJycNCiAgICBleHByZXNzaW9uOiBFeHByZXNzaW9uDQogICAgZmllbGQ6IHN0cg0KDQogICAgZGVmIF9fc3RyX18oc2VsZikgLT4gc3RyOg0KICAgICAgICBleHByID0gIigiICsgc3RyKHNlbGYuZXhwcmVzc2lvbikgKyAiKSIgaWYgaXNpbnN0YW5jZShzZWxmLmV4cHJlc3Npb24sIENhc3QpIGVsc2Ugc3RyKHNlbGYuZXhwcmVzc2lvbikNCiAgICAgICAgcmV0dXJuIGYie2V4cHJ9LntzZWxmLmZpZWxkfSINCg0KDQpAZGF0YWNsYXNzKGZyb3plbj1UcnVlKQ0KY2xhc3MgTWV0aG9kTG9va3VwKEV4cHJlc3Npb24pOg0KICAgICcnJw0KICAgIGV4cHJlc3Npb24ubWV0aG9kKGV4cHJlc3Npb25zKQ0KICAgICcnJw0KICAgIGV4cHJlc3Npb246IEV4cHJlc3Npb24NCiAgICBtZXRob2Q6IHN0cg0KICAgIHBhcmFtZXRlcnM6IGxpc3RbRXhwcmVzc2lvbl0NCiAgICBjb3VudGVyX3N1cGVyOiBpbnQgPSAwDQoNCiAgICBkZWYgX19zdHJfXyhzZWxmKSAtPiBzdHI6DQogICAgICAgIGV4cHIgPSAiKCIgKyBzdHIoc2VsZi5leHByZXNzaW9uKSArICIpIiBpZiBpc2luc3RhbmNlKHNlbGYuZXhwcmVzc2lvbiwgQ2FzdCkgZWxzZSBzdHIoc2VsZi5leHByZXNzaW9uKQ0KICAgICAgICByZXR1cm4gZiJ7ZXhwcn0ue3NlbGYubWV0aG9kfSh7JywgJy5qb2luKHN0cihlKSBmb3IgZSBpbiBzZWxmLnBhcmFtZXRlcnMpfSkiDQoNCg0KQGRhdGFjbGFzcyhmcm96ZW49VHJ1ZSkNCmNsYXNzIE5ld0NsYXNzKEV4cHJlc3Npb24pOg0KICAgICcnJw0KICAgIG5ldyBjbGFzc19uYW1lKGV4cHJlc3Npb25zKQ0KICAgICcnJw0KICAgIHR5cGU6IFR5cGUNCiAgICBwYXJhbWV0ZXJzOiBsaXN0W0V4cHJlc3Npb25dDQoNCiAgICBkZWYgX19zdHJfXyhzZWxmKSAtPiBzdHI6DQogICAgICAgIHJldHVybiBmIm5ldyB7c3RyKHNlbGYudHlwZSl9KHsnLCAnLmpvaW4oc3RyKGUpIGZvciBlIGluIHNlbGYucGFyYW1ldGVycyl9KSINCg0KDQpAZGF0YWNsYXNzKGZyb3plbj1UcnVlKQ0KY2xhc3MgQ2FzdChFeHByZXNzaW9uKToNCiAgICAnJycNCiAgICAoY2xhc3NfbmFtZSlleHByZXNzaW9uDQogICAgJycnDQogICAgdHlwZTogVHlwZQ0KICAgIGV4cHJlc3Npb246IEV4cHJlc3Npb24NCg0KICAgIGRlZiBfX3N0cl9fKHNlbGYpIC0+IHN0cjoNCiAgICAgICAgcmV0dXJuIGYiKHtzdHIoc2VsZi50eXBlKX0pe3N0cihzZWxmLmV4cHJlc3Npb24pfSINCg0KDQpGaWVsZEVudiA9IGRpY3Rbc3RyLCBUeXBlXQ0KDQoNClZhckVudiA9IGRpY3Rbc3RyLCBUeXBlXQ0KDQoNCkBkYXRhY2xhc3MoZnJvemVuPVRydWUpDQpjbGFzcyBNZXRob2REZWY6DQogICAgJycnDQogICAgcmV0dXJuX3R5cGUgbWV0aG9kZV9uYW1lKHR5cGVzIHBhcmFtZXRlcnMpIHsNCiAgICAgICAgcmV0dXJuIGV4cHJlc3Npb247DQogICAgfQ0KICAgICcnJw0KICAgIG1ldGhvZF9uYW1lOiBzdHINCiAgICByZXR1cm5fdHlwZTogVHlwZQ0KICAgIHR5cGVkX3BhcmFtZXRlcnM6IFZhckVudg0KICAgIGJvZHk6IEV4cHJlc3Npb24NCg0KICAgIGRlZiBfX3N0cl9fKHNlbGYpIC0+IHN0cjoNCiAgICAgICAgb3V0ID0gZiJ7c3RyKHNlbGYucmV0dXJuX3R5cGUpfSB7c2VsZi5tZXRob2RfbmFtZX0oIg0KICAgICAgICBvdXQgKz0gJywgJy5qb2luKGYne2FyZ3VtZW50X3R5cGV9IHthcmd1bWVudF9uYW1lfScgZm9yIGFyZ3VtZW50X3R5cGUsIGFyZ3VtZW50X25hbWUgaW4gc2VsZi50eXBlZF9wYXJhbWV0ZXJzLml0ZW1zKCkpDQogICAgICAgIG91dCArPSAiKSB7XG5cdHJldHVybiAiICsgc3RyKHNlbGYuYm9keSkgKyAiO1xufSINCiAgICAgICAgcmV0dXJuIG91dA0KDQoNCkBkYXRhY2xhc3MoZnJvemVuPVRydWUpDQpjbGFzcyBDbGFzc0RlZjoNCiAgICAnJycNCiAgICBjbGFzcyBjbGFzc19uYW1lIGV4dGVuZHMgc3VwZXJjbGFzcyB7DQogICAgICAgIHR5cGVzIGZpZWxkczsNCiAgICAgICAgY29uc3RydWN0b3INCiAgICAgICAgbWV0aG9kcw0KICAgIH0NCiAgICAnJycNCiAgICBjbGFzc19uYW1lOiBzdHINCiAgICBzdXBlcmNsYXNzOiBUeXBlDQogICAgdHlwZWRfZmllbGRzOiBGaWVsZEVudg0KICAgIG1ldGhvZHM6IGRpY3Rbc3RyLCBNZXRob2REZWZdDQoNCiAgICBkZWYgX19zdHJfXyhzZWxmKSAtPiBzdHI6DQogICAgICAgICIiIg0KICAgICAgICBXaXRob3V0IENvbnN0cnVjdG9yDQogICAgICAgICIiIg0KICAgICAgICBvdXQgPSBmImNsYXNzIHtzZWxmLmNsYXNzX25hbWV9IGV4dGVuZHMge3N0cihzZWxmLnN1cGVyY2xhc3MpfSIgKyAiIHsiDQogICAgICAgIGlmIHNlbGYudHlwZWRfZmllbGRzIG9yIHNlbGYubWV0aG9kczoNCiAgICAgICAgICAgIG91dCArPSAiXG4iDQogICAgICAgIG91dCArPSAnXG4nLmpvaW4oZidcdHtmaWVsZF90eXBlfSB7ZmllbGRfbmFtZX07JyBmb3IgZmllbGRfbmFtZSwgZmllbGRfdHlwZSBpbiBzZWxmLnR5cGVkX2ZpZWxkcy5pdGVtcygpKQ0KICAgICAgICBpZiBzZWxmLnR5cGVkX2ZpZWxkczoNCiAgICAgICAgICAgIG91dCArPSAiXG4iDQogICAgICAgIG91dCArPSAnXG4nLmpvaW4oIlxuIi5qb2luKFsnXHQnICsgbGluZSBmb3IgbGluZSBpbiBzdHIobWV0aG9kX2RlZikuc3BsaXQoIlxuIildKSBmb3IgbWV0aG9kX2RlZiBpbiBzZWxmLm1ldGhvZHMudmFsdWVzKCkpDQogICAgICAgIGlmIHNlbGYubWV0aG9kczoNCiAgICAgICAgICAgIG91dCArPSAiXG4iDQogICAgICAgIHJldHVybiBvdXQgKyAifSINCg0KICAgIGRlZiBzdHJfd2l0aF9jb25zdHJ1Y3RvcihzZWxmLCBDVDogJ0NsYXNzVGFibGUnKToNCiAgICAgICAgZGVmIGZpZWxkcyhmamNsYXNzOiBUeXBlLCBDVDogQ2xhc3NUYWJsZSkgLT4gZGljdFtzdHIsIFR5cGVdOg0KICAgICAgICAgICAgbWF0Y2ggZmpjbGFzczoNCiAgICAgICAgICAgICAgICBjYXNlIEZKT2JqZWN0KCk6DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBkaWN0KCkNCiAgICAgICAgICAgICAgICBjYXNlIEZKQ2xhc3MobmFtZSk6DQogICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWVsZHMoQ1RbbmFtZV0uc3VwZXJjbGFzcywgQ1QpIHwgQ1RbbmFtZV0udHlwZWRfZmllbGRzDQoNCiAgICAgICAgdHlwZWRfZmllbGRzX3N1cGVyY2xhc3NfbGlzdCA9IGxpc3QoZmllbGRzKHNlbGYuc3VwZXJjbGFzcywgQ1QpLml0ZW1zKCkpDQogICAgICAgIHR5cGVfZmllbGRzX2xpc3QgPSBsaXN0KGZpZWxkcyhGSkNsYXNzKHNlbGYuY2xhc3NfbmFtZSksIENUKS5pdGVtcygpKQ0KICAgICAgICBjb25zdHJ1Y3RvciA9IGYie3NlbGYuY2xhc3NfbmFtZX0oIg0KICAgICAgICBjb25zdHJ1Y3RvciArPSAiLCAiLmpvaW4oZiJ7dHlwZX0ge25hbWV9IiBmb3IgbmFtZSwgdHlwZSBpbiB0eXBlX2ZpZWxkc19saXN0KSArICIpIHsiDQogICAgICAgIGlmIHR5cGVkX2ZpZWxkc19zdXBlcmNsYXNzX2xpc3QgPT0gW10gYW5kIHR5cGVfZmllbGRzX2xpc3QgPT0gW106DQogICAgICAgICAgICBjb25zdHJ1Y3RvciArPSAiIHN1cGVyKCk7ICINCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIGNvbnN0cnVjdG9yICs9IGYiXG5cdHN1cGVyKHsnLCAnLmpvaW4obmFtZSBmb3IgKG5hbWUsIF8pIGluIHR5cGVkX2ZpZWxkc19zdXBlcmNsYXNzX2xpc3QpfSk7XG4iDQogICAgICAgICAgICBjb25zdHJ1Y3RvciArPSAnXG4nLmpvaW4oZidcdHRoaXMue25hbWV9PXtuYW1lfTsnIGZvciBuYW1lIGluIHNlbGYudHlwZWRfZmllbGRzLmtleXMoKSkNCiAgICAgICAgICAgIGlmIHNlbGYudHlwZWRfZmllbGRzOg0KICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yICs9ICdcbicNCiAgICAgICAgY29uc3RydWN0b3IgKz0gIn0iDQoNCiAgICAgICAgb3V0ID0gZiJjbGFzcyB7c2VsZi5jbGFzc19uYW1lfSBleHRlbmRzIHtzdHIoc2VsZi5zdXBlcmNsYXNzKX0iDQogICAgICAgIG91dCArPSAiIHtcbiIgKyAnJy5qb2luKFtmJ1x0e2ZpZWxkX3R5cGV9IHtmaWVsZF9uYW1lfTtcbicgZm9yIGZpZWxkX25hbWUsIGZpZWxkX3R5cGUgaW4gc2VsZi50eXBlZF9maWVsZHMuaXRlbXMoKV0pDQogICAgICAgIG91dCArPSAnJy5qb2luKCdcdCcgKyBsaW5lICsgJ1xuJyBmb3IgbGluZSBpbiBjb25zdHJ1Y3Rvci5zcGxpdCgnXG4nKSkNCiAgICAgICAgb3V0ICs9ICcnLmpvaW4oJ1xuJy5qb2luKCdcdCcgKyBsaW5lIGZvciBsaW5lIGluIHN0cihtZXRob2RfZGVmKS5zcGxpdCgnXG4nKSkgKyAiXG4iIGZvciBtZXRob2RfZGVmIGluIHNlbGYubWV0aG9kcy52YWx1ZXMoKSkNCiAgICAgICAgcmV0dXJuIG91dCArICJ9Ig0KDQoNCkNsYXNzVGFibGUgPSBkaWN0W3N0ciwgQ2xhc3NEZWZdDQoNCg0KQGRhdGFjbGFzcyhmcm96ZW49VHJ1ZSkNCmNsYXNzIFByb2dyYW06DQogICAgJycnDQogICAge2NsYXNzX25hbWUgOiBDbGFzc0RlZiwgLi4ufQ0KICAgICcnJw0KICAgIGNsYXNzX3RhYmxlOiBDbGFzc1RhYmxlDQogICAgZXhwcmVzc2lvbjogRXhwcmVzc2lvbg0KDQogICAgZGVmIF9fc3RyX18oc2VsZikgLT4gc3RyOg0KICAgICAgICBvdXQgPSAnXG5cbicuam9pbihbc3RyKGNsYXNzX2RlZikgZm9yIGNsYXNzX2RlZiBpbiBzZWxmLmNsYXNzX3RhYmxlLnZhbHVlcygpXSkNCiAgICAgICAgcmV0dXJuIG91dCArIGYiXG5cbntzdHIoc2VsZi5leHByZXNzaW9uKX0iDQoNCiAgICBkZWYgc3RyX3dpdGhfY29uc3RydWN0b3Ioc2VsZikgLT4gc3RyOg0KICAgICAgICBvdXQgPSAnXG5cbicuam9pbihbQ2xhc3NEZWYuc3RyX3dpdGhfY29uc3RydWN0b3IoY2xhc3NfZGVmLCBzZWxmLmNsYXNzX3RhYmxlKSBmb3IgY2xhc3NfZGVmIGluIHNlbGYuY2xhc3NfdGFibGUudmFsdWVzKCldKQ0KICAgICAgICByZXR1cm4gb3V0ICsgZiJcblxue3N0cihzZWxmLmV4cHJlc3Npb24pfSINCg=="},"FJ_auxiliary_typing":{"name":"FJ_auxiliary_typing.py","base64":"aW1wb3J0IEZKX0FTVCBhcyBGSg0KDQoNCmNsYXNzIFN0dXBpZFdhcm5pbmcoV2FybmluZyk6DQogICAgZGVmIF9faW5pdF9fKHNlbGYsIG1lc3NhZ2UpOg0KICAgICAgICBpZiB0eXBlKG1lc3NhZ2UpIGlzIG5vdCBzdHI6DQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oIldhcm5pbmcgbWVzc2FnZXMgbXVzdCBiZSBhIFN0cmluZyIpDQogICAgICAgIHNlbGYuX19tZXNzYWdlOiBzdHIgPSBtZXNzYWdlDQoNCiAgICBAcHJvcGVydHkNCiAgICBkZWYgbWVzc2FnZShzZWxmKToNCiAgICAgICAgcmV0dXJuIHNlbGYuX19tZXNzYWdlDQoNCiAgICBkZWYgX19zdHJfXyhzZWxmKToNCiAgICAgICAgcmV0dXJuIHNlbGYubWVzc2FnZQ0KDQoNCmRlZiBpc19zdWJ0eXBlKGM6IEZKLlR5cGUsIGQ6IEZKLlR5cGUsIENUOiBGSi5DbGFzc1RhYmxlKSAtPiBib29sOg0KICAgICIiIg0KICAgIFRydWUgaWYgQyA8OiBEDQogICAgIiIiDQogICAgbWF0Y2ggKGMsIGQpOg0KICAgICAgICBjYXNlIF8sIEZKLkZKT2JqZWN0KCk6DQogICAgICAgICAgICByZXR1cm4gVHJ1ZQ0KICAgICAgICBjYXNlIEZKLkZKT2JqZWN0KCksIF86DQogICAgICAgICAgICByZXR1cm4gRmFsc2UNCiAgICAgICAgY2FzZSBGSi5GSkNsYXNzKG5hbWVfb2ZfYyksIEZKLkZKQ2xhc3MobmFtZV9vZl9kKSBpZiBuYW1lX29mX2MgPT0gbmFtZV9vZl9kOg0KICAgICAgICAgICAgcmV0dXJuIFRydWUNCiAgICAgICAgY2FzZSBGSi5GSkNsYXNzKG5hbWVfb2ZfYyksIF86DQogICAgICAgICAgICByZXR1cm4gaXNfc3VidHlwZShDVFtuYW1lX29mX2NdLnN1cGVyY2xhc3MsIGQsIENUKQ0KDQoNCmRlZiBmaWVsZHMoZmpjbGFzczogRkouVHlwZSwgQ1Q6IEZKLkNsYXNzVGFibGUpIC0+IGRpY3Rbc3RyLCBGSi5UeXBlXToNCiAgICAiIiINCiAgICBmaWVsZHMoQywgQ1QpID09IHtmaWVsZF9vZl9DIDogVHlwLCAuLi59DQogICAgIiIiDQogICAgbWF0Y2ggZmpjbGFzczoNCiAgICAgICAgY2FzZSBGSi5GSk9iamVjdCgpOg0KICAgICAgICAgICAgcmV0dXJuIGRpY3QoKQ0KICAgICAgICBjYXNlIEZKLkZKQ2xhc3MobmFtZSk6DQogICAgICAgICAgICByZXR1cm4gbWVyZ2VfZGljdHMoQ1RbbmFtZV0udHlwZWRfZmllbGRzLCBmaWVsZHMoQ1RbbmFtZV0uc3VwZXJjbGFzcywgQ1QpKQ0KICAgICAgICBjYXNlIF86DQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oZiJ7c3RyKGZqY2xhc3MpfSBpcyBuZWl0aGVyIEZKT2JqZWN0IG5vciBGSkNsYXNzIikNCg0KDQpkZWYgbXR5cGUobWV0aG9kX25hbWU6IHN0ciwgZmpjbGFzczogRkouVHlwZSwgQ1Q6IEZKLkNsYXNzVGFibGUpIC0+IHR1cGxlW2xpc3RbRkouVHlwZV0sIEZKLlR5cGVdOg0KICAgICIiIg0KICAgIG10eXBlKG0sIGNsYXNzX25hbWUsIENUKSA9PSAoW2FyZ3VtZW50X3R5cGUsIC4uLl0sIHJldHVybl90eXBlKQ0KICAgICIiIg0KICAgIG1hdGNoIGZqY2xhc3M6DQogICAgICAgIGNhc2UgRkouRkpDbGFzcyhuYW1lKSBpZiBtZXRob2RfbmFtZSBpbiBDVFtuYW1lXS5tZXRob2RzLmtleXMoKToNCiAgICAgICAgICAgIHJldHVybiAoW3ggZm9yIHggaW4gQ1RbbmFtZV0ubWV0aG9kc1ttZXRob2RfbmFtZV0udHlwZWRfcGFyYW1ldGVycy52YWx1ZXMoKV0sIENUW25hbWVdLm1ldGhvZHNbbWV0aG9kX25hbWVdLnJldHVybl90eXBlKQ0KICAgICAgICBjYXNlIEZKLkZKQ2xhc3MobmFtZSk6DQogICAgICAgICAgICByZXR1cm4gbXR5cGUobWV0aG9kX25hbWUsIENUW25hbWVdLnN1cGVyY2xhc3MsIENUKQ0KDQoNCmRlZiBtYm9keShtZXRob2RfbmFtZTogc3RyLCBmamNsYXNzOiBGSi5UeXBlLCBDVDogRkouQ2xhc3NUYWJsZSwgc3VwZXJfY291bnRlcjogaW50ID0gMCkgLT4gdHVwbGVbbGlzdFtzdHJdLCBGSi5FeHByZXNzaW9uXToNCiAgICAiIiINCiAgICBtYm9keShtLCBDLCBDVCkgPT0gKFtwYXJhbWV0ZXJzLCAuLi5dLCBleHByZXNzaW9uKQ0KICAgICIiIg0KICAgIG1hdGNoIGZqY2xhc3M6DQogICAgICAgIGNhc2UgRkouRkpDbGFzcyhuYW1lKSBpZiBtZXRob2RfbmFtZSBpbiBDVFtuYW1lXS5tZXRob2RzLmtleXMoKSBhbmQgc3VwZXJfY291bnRlciA8PSAwOg0KICAgICAgICAgICAgcmV0dXJuIGxpc3QoQ1RbbmFtZV0ubWV0aG9kc1ttZXRob2RfbmFtZV0udHlwZWRfcGFyYW1ldGVycy5rZXlzKCkpLCBDVFtuYW1lXS5tZXRob2RzW21ldGhvZF9uYW1lXS5ib2R5DQogICAgICAgIGNhc2UgRkouRkpDbGFzcyhuYW1lKToNCiAgICAgICAgICAgIHJldHVybiBtYm9keShtZXRob2RfbmFtZSwgQ1RbbmFtZV0uc3VwZXJjbGFzcywgQ1QsIHN1cGVyX2NvdW50ZXIgLSAxKQ0KDQoNCmRlZiBtZXJnZV9kaWN0cyhkMjogZGljdFtzdHIsIEZKLlR5cGVdLCBkMTogZGljdFtzdHIsIEZKLlR5cGVdKSAtPiBkaWN0W3N0ciwgRkouVHlwZV06DQogICAgZF9vdXQgPSBkMS5jb3B5KCkNCiAgICBmb3Iga2V5LCB2YWx1ZSBpbiBkMi5pdGVtcygpOg0KICAgICAgICAjIG5lZWQgdGhlIHNlY2NvbmQgY29uZGl0aW9uIHNvIHN0dXBpZCBjYXN0cyBhcmUgZGV0ZWN0ZWQNCiAgICAgICAgaWYga2V5IGluIGRfb3V0LmtleXMoKSBhbmQgdmFsdWUgIT0gZF9vdXRba2V5XToNCiAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbihmIktleXMgYXJlIG5vdCBkaXN0aW5jdCAtPiB7a2V5fSIpDQogICAgICAgIGRfb3V0W2tleV0gPSB2YWx1ZQ0KICAgIHJldHVybiBkX291dA0K"},"FJ_computation":{"name":"FJ_computation.py","base64":"aW1wb3J0IEZKX0FTVCBhcyBGSg0KZnJvbSBGSl9hdXhpbGlhcnlfdHlwaW5nIGltcG9ydCBmaWVsZHMsIG1ib2R5LCBpc19zdWJ0eXBlICAjLCBjYXN0X2NvdW50ZXINCg0KDQpkZWYgY29tcHV0ZV9leHByZXNzaW9uKG91dGVyX2V4cHJlc3Npb246IEZKLkV4cHJlc3Npb24sIENUOiBkaWN0W3N0ciwgRkouQ2xhc3NEZWZdKSAtPiBGSi5FeHByZXNzaW9uOg0KICAgIG1hdGNoIG91dGVyX2V4cHJlc3Npb246DQogICAgICAgIGNhc2UgRkouTmV3Q2xhc3MoKSB8IEZKLlZhcmlhYmxlKCk6DQogICAgICAgICAgICByZXR1cm4gb3V0ZXJfZXhwcmVzc2lvbg0KDQogICAgICAgIGNhc2UgRkouRmllbGRMb29rdXAoZXhwcmVzc2lvbiwgZmllbGQpOg0KICAgICAgICAgICAgaWYgdHlwZShleHByZXNzaW9uKSBpcyBub3QgRkouTmV3Q2xhc3M6DQogICAgICAgICAgICAgICAgcmFpc2UgRXhjZXB0aW9uKGYiQkVDQVVTRSBDT05HUlVFTkNFIFJVTEVTIC0+IENBTlQgR08gSEVSRSBCVVQgUFlUSE9OIFNUSUxMIE5FRURTIFRISVMgQ0hFQ0sgRk9SIFRZUElORkVSRU5DRSAtIEV4cGVjdGVkIGV4cHJlc3Npb24gb2YgVHlwZSBOZXdDbGFzcywgZ290IHt0eXBlKGV4cHJlc3Npb24pfSIpDQogICAgICAgICAgICBmaWVsZF9uYW1lcyA9IGZpZWxkcyhleHByZXNzaW9uLnR5cGUsIENUKS5rZXlzKCkNCiAgICAgICAgICAgIGlmIGZpZWxkIG5vdCBpbiBmaWVsZF9uYW1lczoNCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oZiJJRiBXRUxMIFRZUEVEIC0+IENBTlQgR08gSEVSRSAtIENsYXNzIHtzdHIoZXhwcmVzc2lvbi50eXBlKX0gaGFzIG5vIGZpZWxkIHtmaWVsZH0iKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAjIG9ubHkgd29ya3Mgd2hlbiB0aGUga2V5cyBvZiB0aGUgZGljdGlvbmFyeSBoYXZlIHRoZSBzYW1lIG9yZGUgYXMgdGhlIGxpc3Qgb2YgcGFyYW1ldGVycw0KICAgICAgICAgICAgICAgIHJldHVybiBleHByZXNzaW9uLnBhcmFtZXRlcnNbbGlzdChmaWVsZF9uYW1lcykuaW5kZXgoZmllbGQpXQ0KDQogICAgICAgIGNhc2UgRkouTWV0aG9kTG9va3VwKGV4cHJlc3Npb24sIG1ldGhvZF9uYW1lLCBleHByZXNzaW9ucywgc3VwZXJfY291bnRlcik6DQogICAgICAgICAgICBpZiB0eXBlKGV4cHJlc3Npb24pIGlzIG5vdCBGSi5OZXdDbGFzczoNCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oZiJCRUNBVVNFIENPTkdSVUVOQ0UgUlVMRVMgLT4gQ0FOVCBHTyBIRVJFIEJVVCBQWVRIT04gU1RJTEwgTkVFRFMgVEhJUyBDSEVDSyBGT1IgVFlQSU5GRVJFTkNFIC0gRXhwZWN0ZWQgZXhwcmVzc2lvbiBvZiBUeXBlIE5ld0NsYXNzLCBnb3Qge3R5cGUoZXhwcmVzc2lvbil9IikNCiAgICAgICAgICAgICMgeC5lDQogICAgICAgICAgICBtYm9keV92YXJpYWJsZXMsIG1ib2R5X2V4cHJlc3Npb24gPSBtYm9keShtZXRob2RfbmFtZSwgZXhwcmVzc2lvbi50eXBlLCBDVCwgc3VwZXJfY291bnRlcikNCiAgICAgICAgICAgICMgZXhwcmVzc2lvbnMgPT0gYXJndW1lbnRzIChyZXBsYWNpbmcgeCkgfCBleHByZXNzaW9uID09IG5ld0NsYXNzIChyZXBsYWNpbmcgdGhpcykNCiAgICAgICAgICAgICMgbWJvZHlfZXhwcmVzc2lvbiA9PSBlMCB8IG1ib2R5X3ZhcmlhYmxlcyA9PSB4DQogICAgICAgICAgICBleHByID0gcmVwbGFjZV90aGluZ3MobWJvZHlfZXhwcmVzc2lvbiwgZXhwcmVzc2lvbnMsIG1ib2R5X3ZhcmlhYmxlcywgZXhwcmVzc2lvbiwgQ1QsIHN1cGVyX2NvdW50ZXIpDQogICAgICAgICAgICByZXR1cm4gY29uZ3J1ZW5jZV9leHByZXNzaW9uKGV4cHIsIENUKQ0KDQogICAgICAgIGNhc2UgRkouQ2FzdCh0eXBlX29mX2NsYXNzLCBleHByZXNzaW9uKToNCiAgICAgICAgICAgIGlmIHR5cGUoZXhwcmVzc2lvbikgaXMgbm90IEZKLk5ld0NsYXNzOg0KICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbihmIkJFQ0FVU0UgQ09OR1JVRU5DRSBSVUxFUyAtPiBDQU5UIEdPIEhFUkUgQlVUIFBZVEhPTiBTVElMTCBORUVEUyBUSElTIENIRUNLIEZPUiBUWVBJTkZFUkVOQ0UgLSBFeHBlY3RlZCBleHByZXNzaW9uIG9mIFR5cGUgTmV3Q2xhc3MsIGdvdCB7dHlwZShleHByZXNzaW9uKX0iKQ0KICAgICAgICAgICAgaWYgaXNfc3VidHlwZShleHByZXNzaW9uLnR5cGUsIHR5cGVfb2ZfY2xhc3MsIENUKTogICMgVXBDYXN0DQogICAgICAgICAgICAgICAgcmV0dXJuIGV4cHJlc3Npb24NCiAgICAgICAgICAgIGVsaWYgaXNfc3VidHlwZSh0eXBlX29mX2NsYXNzLCBleHByZXNzaW9uLnR5cGUsIENUKTogICMgRG93bkNhc3QNCiAgICAgICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oZiJEb3duQ2FzdCBhcmUgbm90IGFsbG93ZWQgLSAne3N0cih0eXBlX29mX2NsYXNzKX0nIGlzIGEgc3VidHlwZSBvZiAne3N0cihleHByZXNzaW9uLnR5cGUpfSciKQ0KICAgICAgICAgICAgZWxzZTogICMgU3R1cGlkQ2FzdA0KICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbihmIlN0dXBpZCBDYXN0cyBhcmUgbm90IGFsbG93ZWQgLSAne3N0cihleHByZXNzaW9uLnR5cGUpfScgaXMgbm90IGEgc3VidHlwZSBvZiAne3N0cih0eXBlX29mX2NsYXNzKX0nIGFuZCB2aWNlIHZlcnNhIikNCg0KDQpkZWYgcmVwbGFjZV90aGluZ3MoZTA6IEZKLkV4cHJlc3Npb24sIGFyZ3VtZW50czogbGlzdFtGSi5FeHByZXNzaW9uXSwgeHM6IGxpc3Rbc3RyXSwgbmV3Q2xhc3M6IEZKLkV4cHJlc3Npb24sIENUOiBkaWN0W3N0ciwgRkouQ2xhc3NEZWZdLCBzdXBlcl9jb3VudGVyOiBpbnQpIC0+IEZKLkV4cHJlc3Npb246DQogICAgbWF0Y2ggZTA6DQogICAgICAgIGNhc2UgRkouVmFyaWFibGUobmFtZSk6DQogICAgICAgICAgICBpZiBuYW1lID09ICJ0aGlzIiBvciBuYW1lID09ICJzdXBlciI6DQogICAgICAgICAgICAgICAgcmV0dXJuIG5ld0NsYXNzDQogICAgICAgICAgICBlbGlmIG5hbWUgbm90IGluIHhzOg0KICAgICAgICAgICAgICAgIHJhaXNlIEV4Y2VwdGlvbihmIklGIFdFTEwgVFlQRUQgLT4gQ0FOVCBHTyBIRVJFIC0gVmFyaWFibGUge25hbWV9IG5vdCBmb3VuZCBpbiBzY29wZSIpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNbeHMuaW5kZXgobmFtZSldDQoNCiAgICAgICAgY2FzZSBGSi5GaWVsZExvb2t1cChleHByZXNzaW9uLCBmaWVsZCk6DQogICAgICAgICAgICBuZXdfZXhwcmVzc2lvbiA9IHJlcGxhY2VfdGhpbmdzKGV4cHJlc3Npb24sIGFyZ3VtZW50cywgeHMsIG5ld0NsYXNzLCBDVCwgc3VwZXJfY291bnRlcikNCiAgICAgICAgICAgIHJldHVybiBGSi5GaWVsZExvb2t1cChuZXdfZXhwcmVzc2lvbiwgZmllbGQpDQoNCiAgICAgICAgY2FzZSBGSi5NZXRob2RMb29rdXAoZXhwcmVzc2lvbiwgbWV0aG9kX25hbWUsIGV4cHJlc3Npb25zKToNCiAgICAgICAgICAgIG1hdGNoIGV4cHJlc3Npb246DQogICAgICAgICAgICAgICAgY2FzZSBGSi5WYXJpYWJsZSgic3VwZXIiKToNCiAgICAgICAgICAgICAgICAgICAgbmV3X3N1cGVyX2NvdW50ZXIgPSBzdXBlcl9jb3VudGVyICsgMQ0KICAgICAgICAgICAgICAgIGNhc2UgXzoNCiAgICAgICAgICAgICAgICAgICAgbmV3X3N1cGVyX2NvdW50ZXIgPSAwDQogICAgICAgICAgICBuZXdfZXhwcmVzc2lvbiA9IHJlcGxhY2VfdGhpbmdzKGV4cHJlc3Npb24sIGFyZ3VtZW50cywgeHMsIG5ld0NsYXNzLCBDVCwgc3VwZXJfY291bnRlcikNCiAgICAgICAgICAgIG5ld19leHByZXNzaW9ucyA9IFtyZXBsYWNlX3RoaW5ncyhlLCBhcmd1bWVudHMsIHhzLCBuZXdDbGFzcywgQ1QsIHN1cGVyX2NvdW50ZXIpIGZvciBlIGluIGV4cHJlc3Npb25zXQ0KICAgICAgICAgICAgcmV0dXJuIEZKLk1ldGhvZExvb2t1cChuZXdfZXhwcmVzc2lvbiwgbWV0aG9kX25hbWUsIG5ld19leHByZXNzaW9ucywgbmV3X3N1cGVyX2NvdW50ZXIpDQoNCiAgICAgICAgY2FzZSBGSi5OZXdDbGFzcyh0eXBlX29mLCBleHByZXNzaW9ucyk6DQogICAgICAgICAgICBuZXdfZXhwcmVzc2lvbnMgPSBbcmVwbGFjZV90aGluZ3MoaW5uZXJfZXhwcmVzc2lvbiwgYXJndW1lbnRzLCB4cywgbmV3Q2xhc3MsIENULCBzdXBlcl9jb3VudGVyKSBmb3IgaW5uZXJfZXhwcmVzc2lvbiBpbiBleHByZXNzaW9uc10NCiAgICAgICAgICAgIHJldHVybiBGSi5OZXdDbGFzcyh0eXBlX29mLCBuZXdfZXhwcmVzc2lvbnMpDQoNCiAgICAgICAgY2FzZSBGSi5DYXN0KHR5cGVfb2YsIGV4cHJlc3Npb24pOg0KICAgICAgICAgICAgbmV3X2V4cHJlc3Npb24gPSByZXBsYWNlX3RoaW5ncyhleHByZXNzaW9uLCBhcmd1bWVudHMsIHhzLCBuZXdDbGFzcywgQ1QsIHN1cGVyX2NvdW50ZXIpDQogICAgICAgICAgICByZXR1cm4gRkouQ2FzdCh0eXBlX29mLCBuZXdfZXhwcmVzc2lvbikNCg0KDQpkZWYgY29uZ3J1ZW5jZV9leHByZXNzaW9uKGV4cHJlc3Npb246IEZKLkV4cHJlc3Npb24sIENUOiBkaWN0W3N0ciwgRkouQ2xhc3NEZWZdKSAtPiBGSi5FeHByZXNzaW9uOg0KICAgIG1hdGNoIGV4cHJlc3Npb246DQogICAgICAgIGNhc2UgRkouRmllbGRMb29rdXAoaW5uZXJfZXhwcmVzc2lvbiwgaW5uZXJfZmllbGQpOg0KICAgICAgICAgICAgbmV3X2V4cHJlc3Npb24gPSBjb25ncnVlbmNlX2V4cHJlc3Npb24oaW5uZXJfZXhwcmVzc2lvbiwgQ1QpDQogICAgICAgICAgICByZXR1cm4gY29tcHV0ZV9leHByZXNzaW9uKEZKLkZpZWxkTG9va3VwKG5ld19leHByZXNzaW9uLCBpbm5lcl9maWVsZCksIENUKQ0KDQogICAgICAgIGNhc2UgRkouTWV0aG9kTG9va3VwKGlubmVyX2V4cHJlc3Npb24sIGlubmVyX21ldGhvZF9uYW1lLCBpbm5lcl9leHByZXNzaW9ucywgc3ApOg0KICAgICAgICAgICAgbmV3X2V4cHJlc3Npb24gPSBjb25ncnVlbmNlX2V4cHJlc3Npb24oaW5uZXJfZXhwcmVzc2lvbiwgQ1QpDQogICAgICAgICAgICBuZXdfZXhwcmVzc2lvbnMgPSBbY29uZ3J1ZW5jZV9leHByZXNzaW9uKHNpbmdsZV9leHByZXNzaW9uLCBDVCkgZm9yIHNpbmdsZV9leHByZXNzaW9uIGluIGlubmVyX2V4cHJlc3Npb25zXQ0KICAgICAgICAgICAgcmV0dXJuIGNvbXB1dGVfZXhwcmVzc2lvbihGSi5NZXRob2RMb29rdXAobmV3X2V4cHJlc3Npb24sIGlubmVyX21ldGhvZF9uYW1lLCBuZXdfZXhwcmVzc2lvbnMsIHNwKSwgQ1QpDQoNCiAgICAgICAgY2FzZSBGSi5OZXdDbGFzcyhpbm5lcl90eXBlLCBpbm5lcl9wYXJhbWV0ZXJzKToNCiAgICAgICAgICAgIG5ld19wYXJhbWV0ZXJzID0gW2NvbmdydWVuY2VfZXhwcmVzc2lvbihwYXJhbWV0ZXIsIENUKSBmb3IgcGFyYW1ldGVyIGluIGlubmVyX3BhcmFtZXRlcnNdDQogICAgICAgICAgICByZXR1cm4gRkouTmV3Q2xhc3MoaW5uZXJfdHlwZSwgbmV3X3BhcmFtZXRlcnMpDQoNCiAgICAgICAgY2FzZSBGSi5DYXN0KGlubmVyX3R5cGUsIGlubmVyX2V4cHJlc3Npb24pOg0KICAgICAgICAgICAgbmV3X2V4cHJlc3Npb24gPSBjb25ncnVlbmNlX2V4cHJlc3Npb24oaW5uZXJfZXhwcmVzc2lvbiwgQ1QpDQogICAgICAgICAgICByZXR1cm4gY29tcHV0ZV9leHByZXNzaW9uKEZKLkNhc3QoaW5uZXJfdHlwZSwgbmV3X2V4cHJlc3Npb24pLCBDVCkNCg0KDQpkZWYgY29tcHV0ZV9wcm9ncmFtKHByb2dyYW06IEZKLlByb2dyYW0pIC0+IEZKLk5ld0NsYXNzOg0KICAgICIiIg0KICAgIFRha2VzIGEgd2VsbCBwYXJzZWQgcHJvZ3JhbSBhbmQgY29tcHV0ZXMgaXQuXG4NCiAgICBJZiB0aGUgcHJvZ3JhbSBpc250IHdlbGwgdHlwZWQgaXQgbWF5IGdldCBzdHVjayBoZXJlLg0KICAgICIiIg0KICAgIGNvbmdydWVuY2VkX2V4cHJlc3Npb24gPSBjb25ncnVlbmNlX2V4cHJlc3Npb24ocHJvZ3JhbS5leHByZXNzaW9uLCBwcm9ncmFtLmNsYXNzX3RhYmxlKQ0KICAgIHJldHVybiBjb25ncnVlbmNlZF9leHByZXNzaW9uDQo="},"FJ_parser":{"name":"FJ_parser.py","base64":""},"FJ_interpreter":{"name":"FJ_interpreter.py","base64":"aW1wb3J0IEZKX0FTVCBhcyBGSg0KZnJvbSBGSl9wYXJzZXIgaW1wb3J0IGZqX3BhcnNlDQpmcm9tIEZKX3R5cGluZyBpbXBvcnQgdHlwZWNoZWNrX3Byb2dyYW0NCmZyb20gRkpfY29tcHV0YXRpb24gaW1wb3J0IGNvbXB1dGVfcHJvZ3JhbQ0KDQpmcm9tIGxhcmsgaW1wb3J0IFVuZXhwZWN0ZWRDaGFyYWN0ZXJzDQppbXBvcnQgYXJncGFyc2UNCg0KaW1wb3J0IHN5cw0KDQoNCmRlZiByZWFkX2Zyb20oZmlsZV9wYXRoOiBzdHIpIC0+IEZKLlByb2dyYW06DQogICAgd2l0aCBvcGVuKGZpbGVfcGF0aCwgInIiKSBhcyBmaWxlOg0KICAgICAgICB0cnk6DQogICAgICAgICAgICByZXR1cm4gZmpfcGFyc2UoZmlsZS5yZWFkKCkpDQogICAgICAgIGV4Y2VwdCBVbmV4cGVjdGVkQ2hhcmFjdGVycyBhcyBleGM6DQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oZiJcblxuU3ludGF4IEVycm9yXG5cbntzdHIoZXhjKS5zcGxpdCgnXicpWzBdfV4iKQ0KDQoNCmRlZiBydW4oZmlsZV9wYXRoOiBzdHIsIG91dF9maWxlX3BhdGg6IHN0ciwgdG9fc3Rkb3V0OiBib29sLCBvbmx5X3R5cGVjaGVjazogYm9vbCwgd2l0aF9jb25zdHJ1Y3RvcjogYm9vbCk6DQogICAgcHJvZ3JhbSA9IHJlYWRfZnJvbShmaWxlX3BhdGgpDQogICAgdHlwZV9vZl9leHByID0gdHlwZWNoZWNrX3Byb2dyYW0ocHJvZ3JhbSkNCg0KICAgIGRlZiB3cml0ZSh0ZXh0OiBzdHIsIG1vZGU6IHN0ciA9ICJhIik6DQogICAgICAgIGlmIHRvX3N0ZG91dDoNCiAgICAgICAgICAgIHByaW50KHRleHQpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICB3aXRoIG9wZW4ob3V0X2ZpbGVfcGF0aCwgbW9kZSkgYXMgZmlsZToNCiAgICAgICAgICAgICAgICBmaWxlLndyaXRlKHRleHQpDQoNCiAgICBpZiB3aXRoX2NvbnN0cnVjdG9yOg0KICAgICAgICB3cml0ZShwcm9ncmFtLnN0cl93aXRoX2NvbnN0cnVjdG9yKCkgKyAiXG4iLCBtb2RlPSJ3IikNCiAgICBlbGlmIGZpbGVfcGF0aCAhPSBvdXRfZmlsZV9wYXRoOg0KICAgICAgICB3cml0ZShzdHIocHJvZ3JhbSksIG1vZGU9InciKQ0KDQogICAgaWYgb25seV90eXBlY2hlY2s6DQogICAgICAgIHdyaXRlKGYiXG57cHJvZ3JhbS5leHByZXNzaW9ufSA6OiB7dHlwZV9vZl9leHByfVxuIikNCiAgICBlbHNlOg0KICAgICAgICBjb21wdXRlZF9leHByID0gY29tcHV0ZV9wcm9ncmFtKHByb2dyYW0pDQogICAgICAgIHdyaXRlKGYiXG57Y29tcHV0ZWRfZXhwcn0gOjoge3R5cGVfb2ZfZXhwcn1cbiIpDQoNCg0KZGVmIGZqX3J1bihwcm9ncmFtX2FzX3N0cjogc3RyLCB3aXRoX2NvbnN0cnVjdG9yOiBib29sID0gRmFsc2UsIG9ubHlfdHlwZWNoZWNrOiBib29sID0gRmFsc2UpIC0+IHR1cGxlW3N0ciwgc3RyLCBzdHJdOg0KICAgICIiIg0KICAgIFRha2VzIGEgZmVhdGhlcndlaWdodCBqYXZhIHByb2dyYW0gYXMgYSBzdHJpbmcuXG4NCiAgICBcbg0KICAgIEJ5IGRlZmF1bHQgcmV0dXJucyBhIHR1cGxlIG9mIHN0cmluZ3MgY29udGFpbmluZzpcbg0KICAgIFx0VGhlIHByb2dyYW0sIHRoZSBjb21wdXRlZCBleHByZXNzaW9uIGFuZCB0aGUgdHlwZSBvZiB0aGUgZXhwcmVzc2lvbi5cbg0KICAgIFxuDQogICAgSWYgJ3dpdGhfY29uc3RydWN0b3InIGlzIHNldCB0byBUcnVlOlxuDQogICAgXHRUaGUgcmV0dXJuZWQgcHJvZ3JhbSBjb250YWlucyBjb25zdHJ1Y3RvciBkZWZpbml0aW9ucywgZXZlbiBpZiB0aGUgb3JpZ2luYWwgcHJvZ3JhbSBkb2VzIG5vdC5cbg0KICAgIFxuDQogICAgSWYgJ29ubHlfdHlwZWNoZWNrJyBpcyBzZXQgdG8gVHJ1ZTpcbg0KICAgIFx0VGhlIHJldHVybmVkIHR1cGxlIGNvbnRhaW5zIHRoZSBwcm9ncmFtLCB0aGUgbm90IGNvbXB1dGVkIGV4cHJlc3Npb24gYW5kIHRoZSB0eXBlIG9mIHRoZSBleHByZXNzaW9uLg0KICAgICIiIg0KICAgIHByb2dyYW0gPSBmal9wYXJzZShwcm9ncmFtX2FzX3N0cikNCiAgICB0eXBlX29mX2V4cHIgPSB0eXBlY2hlY2tfcHJvZ3JhbShwcm9ncmFtKQ0KICAgIGlmIG9ubHlfdHlwZWNoZWNrOg0KICAgICAgICBpZiB3aXRoX2NvbnN0cnVjdG9yOg0KICAgICAgICAgICAgcmV0dXJuIHByb2dyYW0uc3RyX3dpdGhfY29uc3RydWN0b3IoKSwgc3RyKHByb2dyYW0uZXhwcmVzc2lvbiksIHN0cih0eXBlX29mX2V4cHIpDQogICAgICAgIHJldHVybiBzdHIocHJvZ3JhbSksIHN0cihwcm9ncmFtLmV4cHJlc3Npb24pLCBzdHIodHlwZV9vZl9leHByKQ0KICAgIGVsc2U6DQogICAgICAgIGNvbXBfZXhwciA9IGNvbXB1dGVfcHJvZ3JhbShwcm9ncmFtKQ0KICAgICAgICBpZiB3aXRoX2NvbnN0cnVjdG9yOg0KICAgICAgICAgICAgcmV0dXJuIHByb2dyYW0uc3RyX3dpdGhfY29uc3RydWN0b3IoKSwgc3RyKGNvbXBfZXhwciksIHN0cih0eXBlX29mX2V4cHIpDQogICAgICAgIHJldHVybiBzdHIocHJvZ3JhbSksIHN0cihjb21wX2V4cHIpLCBzdHIodHlwZV9vZl9leHByKQ0KDQoNCmlmIF9fbmFtZV9fID09ICJfX21haW5fXyI6DQogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoDQogICAgICAgIHByb2c9IkZlYXRlcndlaWdodCBKYXZhIEludGVycHJldGVyIiwNCiAgICAgICAgZGVzY3JpcHRpb249IkdpdmVuIGEgRmVhdGhlcndlaWdodCBKYXZhIHByb2dyYW0sIHRoaXMgaW50ZXJwcmV0ZXIgdHlwZWNoZWNrcyBhbmQgY29tcHV0ZXMgaXQuIg0KICAgICkNCg0KICAgIHBhcnNlci5hZGRfYXJndW1lbnQoImlucGF0aCIsIGhlbHA9IlRoZSBmaWxlIHlvdXIgRkogcHJvZ3JhbSBpcyBpbi4iKQ0KICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIm91dHBhdGgiLCBuYXJncz0iPyIsIGhlbHA9IlRoZSBmaWxlIHRoZSBvdXRwdXQgaXMgcHJpbnRlZCBpbi4gSWYgbm9uZSBnaXZlbiwgdGhlIG91dHB1dCBpcyBwcmludGVkIGludG8gdGhlIGluZmlsZS4iKQ0KICAgIHBhcnNlci5hZGRfYXJndW1lbnQoIi1vIiwgIi0tb3V0cGF0aCIsIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsIGhlbHA9IlByaW50IHRoZSBvdXRwdXQgdG8gdGhlIHRlcm1pbmFsLiIpDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLXQiLCAiLS10eXBlY2hlY2siLCBhY3Rpb249InN0b3JlX3RydWUiLCBoZWxwPSJUaGUgcHJvZ3JhbSBpcyB0eXBlY2hlY2tlZCBidXQgbm90IGNvbXB1dGVkLiIpDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgiLWMiLCAiLS1jb25zdHJ1Y3RvciIsIGFjdGlvbj0ic3RvcmVfdHJ1ZSIsIGhlbHA9IlRoZSBvdXRwdXQgaW5jbHVkZXMgY29uc3RydWN0b3JzIChldmVuIGlmIHRoZSBpbmZpbGUgZG9lcyBub3QpLiIpDQoNCiAgICBvcHRpb25zID0gcGFyc2VyLnBhcnNlX2FyZ3Moc3lzLmFyZ3ZbMTpdKQ0KDQogICAgcnVuKG9wdGlvbnMuaW5wYXRoLCBvcHRpb25zLm91dHBhdGggb3Igb3B0aW9ucy5pbnBhdGgsIG9wdGlvbnMub3V0cGF0aCwgb3B0aW9ucy50eXBlY2hlY2ssIG9wdGlvbnMuY29uc3RydWN0b3IpDQo="},"FJ_typing":{"name":"FJ_typing.py","base64":""},"fj":{"name":"fj","children":["FJ_AST.py","LICENSE","FJ_auxiliary_typing.py","__init__.py","FJ_interpreter.py","FJ_parser.py","FJ_computation.py","FJ_typing.py"]},"lark":{"name":"lark","children":["parser_frontends.py","tree_templates.py","tree.py","load_grammar.py",{"name":"parsers","children":["earley_forest.py","lalr_parser.py","earley_common.py","cyk.py","__init__.py","xearley.py","lalr_analysis.py","lalr_interactive_parser.py","grammar_analysis.py","earley.py"]},{"name":"__pyinstaller","children":["__init__.py","hook-lark.py"]},"visitors.py","lark.py","__init__.py","grammar.py","indenter.py",{"name":"grammars","children":["lark.lark","python.lark","__init__.py","common.lark","unicode.lark"]},"common.py","utils.py","ast_utils.py","lexer.py","py.typed","exceptions.py","tree_matcher.py","reconstruct.py","parse_tree_builder.py","LICENSE"]}}